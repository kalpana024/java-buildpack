# Name    : cm_ps_data_dvm_ex_v2
# Purpose : To get elapsed time, CPU time, memory used, shared memory, size of a process using pid , Number of threads, Open Files Soft Limit, Open Files Hard Limit, Open Files and Open Files (Pct).
#           This is run once monitor.
# Usage   :
#  cm_ps_data_dvm -s <search pattern> -f <vector name format (pid(default), seqno, process)> -X <vector prefix> -L<header/data> -i <interval> [-c(child flag, to get stats of child processes too)] -D"

#    -s: option will specify the pattern that is used to search and return the pid of the process.
#    -f: option will specify the vector name format which is pid by default, it could be pid, seqno or process.
#    -X: option will specify the vector prefix which is attached with header or data to return a vector name.
#    -L: option will specify the header or data.
#    -c: option is to enable stats for child processes too.
#    -i: interval(in seconds). Default is 10 seconds.
#    -D: option is to enable debug.
#
# Modification: 11/04/2015 
#               Maninder Singh: Bring vector and data for every instance of given search pattern.

# 1 Day = 24*60*60 = 86400 secs
# 1 Hour = 60*60
# 1 Min = 60
DAY_IN_SECS=86400
HRS_IN_SEC=3600
MIN_IN_SEC=60
PROCESS_ID=""
COMMAND=""
PS_CMD=""
CMD_OUTPUT=""
FIELD_1=""
FIELD_2=""
FIELD_3=""
FIELD_4=""
ELAPSED_TIME=""
TIME=""
VIRTUAL_PROCESS_SIZE=""
RESIDENT_SET_SIZE=""
CPU_TIME_PER=""
declare PREV_CPU_TIME[] 2>/dev/null	#declaring array PREV_CPU_TIME[] to store previous cpu time for every instance of search pattern
unset PREV_CPU_TIME[*]
MEMORY_USED=""
NUMBER_OF_THREADS=""
DEBUG=0
FLAG=0
PS_CMD_FOR_DATA=""
PID="$$"
write_flag_not_run=0
write_flag_more=0
OS_NAME=`uname`
monitor_childs=0
SEND_DEL_FLAG=0

BIT_SET_AFTER_SLEEP=0
E_O_NUM=0


#Variables used while converting this custom monitor to dynamic vector monitor
vector_prefix=""
VECTOR_FLAG="0"
VECTOR_NAME_FORMAT="pid"

ID=0

#For timestamp calculations
BEFORE_WRITE_TIMESTAMP=0 
AFTER_WRITE_TIMESTAMP=0
TIMESTAMP_DIFF=0 

#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ]; then
    CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d $HOME/cavisson/monitors ]; then
    CAV_MON_HOME=$HOME/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

export CAV_MON_HOME

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh
INTERVAL_SECS=$MON_FREQUENCY

#Linux,AIX
if [ "X$OS_NAME" = "XAIX" ]; then
  SYS_MEM=`svmon -G`
  TOTAL_MEM=`echo $SYS_MEM | $AWK_CMD -F' ' '{print $8}'` #frames
  if [ $BC_AVAILABLE -eq 1 ]; then 
    TOTAL_MEM=`echo " scale=2; $TOTAL_MEM * 4 * 1024" | bc ` #bytes
  else
    TOTAL_MEM=`$AWK_CMD -v "var1=$TOTAL_MEM" 'BEGIN{printf "%.2f", (var1 * 4 * 1024)}'` 
  fi
  if [ $BC_AVAILABLE -eq 1 ]; then
    TOTAL_MEM=`echo " scale=2; $TOTAL_MEM / 1024" | bc ` #KB
  else
    TOTAL_MEM=`$AWK_CMD -v "var1=$TOTAL_MEM" 'BEGIN{printf "%.2f", (var1 / 1024)}'`
  fi
elif [ "X$OS_NAME" = "XSunOS" ]; then
  SYS_MEM=`prtconf | grep Mem`
  TOTAL_MEM=`echo $SYS_MEM | $AWK_CMD -F' ' '{print $3}'` #MB
  if [ $BC_AVAILABLE -eq 1 ]; then
    TOTAL_MEM=`echo " scale=2; $TOTAL_MEM * 1024" | bc ` #KB
  else
    TOTAL_MEM=`$AWK_CMD -v "var1=$TOTAL_MEM" 'BEGIN{printf "%.2f", (var1 * 1024)}'`
  fi
else
  SYS_MEM=`free -k`
  TOTAL_MEM=`echo $SYS_MEM | $AWK_CMD -F' ' '{print $8}'`
fi

#This gives following error in linux. So sending to dev null.
# Not sure if we need this for other OS
# : `SEARCH_PATTERN_ARR[]': not a valid identifier
declare SEARCH_PATTERN_ARR[] 2>/dev/null
              
OS_NAME=`uname`

debug_log()
{
  if [ $DEBUG -eq 1 ]; then
    echo "`date +'%F %X'`|$*" >> $DEBUG_LOG_FILE
  fi
}

info_log()
{
  ns_log_event "Information" "$*"
}


error_log()
{
  ns_log_event "Major" "$*"
  echo "`date +'%F %X'`|$*" >> $ERROR_LOG_FILE
}

error_log_and_exit()
{
  ns_log_event "Major" "$*"
  echo "`date +'%F %X'`|$*" >> $ERROR_LOG_FILE
  exit -1
}

error_log_and_console()
{
  echo "$*"
  error_log "$*"
}

display_help_and_exit()
{ 
  error_log_and_console "Usage: cm_ps_data_dvm -s <search pattern> -f <vector name format (pid[default value], seqno, process)> -X <vector prefix> -L <header/data> -i <interval> -D"
  
  echo "  -s: option will specify the search pattern to find the pid of the process."
  echo "  -f: option will specify the vector name format which is pid by default, it could be pid, seqno or process."
  echo "  -X: option will specify the vector prefix."
  echo "  -L: option will specify the header or data."
  echo "  -i: option will specify the interval in seconds."
  echo "  -D: option is to enable debug."
  exit 1
}

#this method operates on string like HH:MM:SS
get_time_in_sec()
{
   debug_log "get_time_in_sec(): time string = $1"
   
   COUNT=`echo $1 | $AWK_CMD -F":" '{print NF}'`
   if [ $COUNT -eq 1 ]; then
     TIME_STR=`echo "00:00:$1"` 
   elif [ $COUNT -eq 2 ]; then
     TIME_STR=`echo "00:$1"` 
   else
     TIME_STR=$1
   fi
  
   debug_log "get_time_in_sec(): time string(complete) = $TIME_STR"

   HH=`echo $TIME_STR | $AWK_CMD -F":" '{print $1}'`
   MM=`echo $TIME_STR | $AWK_CMD -F":" '{print $2}'`
   SS=`echo $TIME_STR | $AWK_CMD -F":" '{print $3}'`
   
   TIME_IN_SECS=`expr \( $HH \* $HRS_IN_SEC \) + \( $MM \* $MIN_IN_SEC \) + $SS`
   debug_log "get_time_in_sec(): time = $TIME_IN_SECS"
   echo $TIME_IN_SECS
}

#this method operates on string like DD-HH:MM:SS,
get_time_in_sec_with_days()
{
   STR=$1
   debug_log "get_time_in_sec_with_days(): time string = $STR" 

   NUM_FIELDS=`echo $1 | $AWK_CMD -F"-" '{ print NF}'`

   if [ $NUM_FIELDS -eq 2 ]; then
     DAY=`echo $STR | $AWK_CMD -F"-" '{ print $1}'`
     TEMP=`echo $STR | $AWK_CMD -F"-" '{ print $2}'`
     debug_log "get_time_in_sec_with_days(): time string = $TEMP and NUM_FIELDS = $NUM_FIELDS" 
     LOCAL_TIME=`get_time_in_sec $TEMP`
   else
     DAY=0
     debug_log "get_time_in_sec_with_days(): time string = $STR and NUM_FIELDS = $NUM_FIELDS" 
     LOCAL_TIME=`get_time_in_sec $STR`
    fi

   TOTAL_TIME=`expr \( $DAY \* $DAY_IN_SECS \) + $LOCAL_TIME`
   debug_log "get_time_in_sec_with_days(): total time in secs = $TOTAL_TIME" 
   echo $TOTAL_TIME
}

#This function will join prefix with the Array of pid if vector name format is pid
#output of this funct : <vector_prefix>_pid <vector_prefix>_pid <vector_prefix>_pid
get_vectors_using_pid()
{
  prefix="${vector_prefix}_"
  for (( i=0; i<${#ARRAY_OF_PID[@]}; i++))
  do
    if [ "XX$vector_prefix" = "XX" ]; then
      echo -n ${id_arr[${ARRAY_OF_PID[$i]}]}:${ARRAY_OF_PID[$i]}" "
    else
      echo -n ${id_arr[${ARRAY_OF_PID[$i]}]}:$prefix${ARRAY_OF_PID[$i]}" "
    fi
  done
  echo ""
}

init_search_data()
{ 
  debug_log "Calling set_search_arr()"
  #Intializing the SEARCH_PATTERN_ARR
  unset SEARCH_PATTERN_ARR[*]
  search_count=0
  set_common_command              #Common command used by both old logic of search pattern and new logic of search pattern
}

set_ps_cmd()
{
  debug_log "set_ps_cmd() Called"
  if [ "X$OS_NAME" = "XSunOS" ]; then
    PS_CMD_FOR_DATA="/usr/bin/ps"
    if [ ! -f /usr/ucb/ps ]; then
      error_log "ps command not found on path /usr/ucb/ps. Hence standard ps command will be used."
      PS_CMD_FOR_SEARCH="ps -ef" # Do not use ps -lef as need pid at filed 2
    else
      PS_CMD_FOR_SEARCH="/usr/ucb/ps -auxwww"
    fi
    if [ ! -f /usr/xpg4/bin/grep ]; then
      error_log "grep command not found on path /usr/xpg4/bin/grep. Hence extended regular expression may not be supported."
      PS_GREP_CMD="/usr/bin/egrep -e"  #Search for a pattern_list(full regular expression that 
                                       #begins with a -).
    else
     PS_GREP_CMD="/usr/xpg4/bin/grep -E"
    fi
  else #Linux,AIX
    PS_CMD_FOR_DATA="ps"
    PS_CMD_FOR_SEARCH="ps -ef" # Do not use ps -lef as need pid at filed 2
    #PS_GREP_CMD="grep -e"
    PS_GREP_CMD="grep -E"      # Fixed bug: 4574
  fi
}

set_common_command()
{
  debug_log "set_common_command called"
  COMMON_COMMAND="grep -v cm_ps_data | grep -v cm_jstat_gc | grep -v cm_java_gc_ex | grep -v cm_ps_data_dvm | grep -v grep"
  debug_log "set_common_command end"
}

set_ps_file()
{
  debug_log "set_ps_file() Called"

  TEMP="cm_ps_data_dvm_${vector_prefix}_"$MON_TEST_RUN""
  PROCESS_FILE_BY_COMMAND="$CAV_MON_TMP_DIR/$TEMP.pid"
  >$PROCESS_FILE_BY_COMMAND
}

read_previous_pid_and_index()
{
  max_vector_id=0;
  while IFS=":" read prev_id prev_pid is_child
  do
    #if [ "X${id_arr[${prev_pid}]}" = "X" ]; then
    #  id_arr[${prev_pid}]=${prev_id}
    #fi 
    id_arr[${prev_pid}]=${id_arr[${prev_pid}]:=${prev_id}}
    IS_CHILD[${prev_pid}]=$is_child
    if [ ${max_vector_id} -lt ${prev_id} ]; then
      max_vector_id=${prev_id}
    fi
  done<$PROCESS_ID_DUMP_FILE
  if [ $max_vector_id -ne 0 ]; then
    ID=`expr ${max_vector_id} + 1`
  fi
  
}

get_ps_id()
{ 
  CHK_DUMP_FILE_FLAG=$1 

  debug_log "get_ps_id function called."

  if [ -f $PROCESS_ID_DUMP_FILE ]; then
    read_previous_pid_and_index
  fi

  create_array_of_pid 
  if [ $NUM_OF_PID -eq 0 ]; then
    return      #return if no. of pid is 0 
  fi

  #this code will execute onny in case of monitor restart
  #we are creating this file when monitor stops
  #on start of monitor will load this file again
  if [ $CHK_DUMP_FILE_FLAG -eq 1 -a $VECTOR_FLAG -ne 1 -a -f $PROCESS_ID_DUMP_FILE ]; then  

    #save file contents in prev array of TID
    ARRAY_OF_PREV_PID=(`cut -d ':' -f2 $PROCESS_ID_DUMP_FILE`)            

    if [ ${#ARRAY_OF_PREV_PID[@]} -gt 0 -a ${#SORTED_ARRAY_OF_PID[@]} -gt 0 ]; then
      chk_and_del_vectors
    fi
    #update prev array
    if [ ${#SORTED_ARRAY_OF_PID[@]} -gt 0 ]; then
      copy_orig_array_into_prev
    fi
  fi
}

create_array_of_pid()
{
  debug_log "create_array_of_pid called"
  unset ARRAY_OF_PID[*]
  unset SORTED_ARRAY_OF_PID[*]
  i=0
  CHILD_PIDS=""
  MULTIPLE_SEARCH_CMD=""
  while [ $i -lt $search_count ]
  do
    MULTIPLE_SEARCH_CMD=`echo "$MULTIPLE_SEARCH_CMD | $PS_GREP_CMD  '${SEARCH_PATTERN_ARR[$i]}' "`

    i=`expr $i + 1`
  done

  #eval is required since we have to run this command later
  SET_COMMAND="eval $PS_CMD_FOR_SEARCH $MULTIPLE_SEARCH_CMD | $COMMON_COMMAND"
  SET_COMMAND_FOR_CHILDS="eval $PS_CMD_FOR_SEARCH | $COMMON_COMMAND"
  #Creating ARRAY_OF_PID and SORTED_ARRAY_OF_PID using for loop because, AIX ex, AIX and Solaris does not support brackets i.e. ()
  COMMAND_VAL=`$SET_COMMAND | $AWK_CMD -F' ' '{printf $2" "}'`             #COMMAND_VAL contains all the pids from given search pattern
  debug_log "`echo ${COMMAND_VAL}` Command= `echo ${SET_COMMAND}`"

  for index in `echo $COMMAND_VAL`
  do
    #if [ "X${IS_CHILD[$index]}" = "X" ]; then
    #  IS_CHILD[$index]=0
    #fi
    IS_CHILD[$index]=${IS_CHILD[$index]:=0}
  done

  #if monitor_childs flag is set
  if [ ${monitor_childs} -eq 1 ]; then
    for index in `echo $COMMAND_VAL`
    do
      CHILD_PIDS="$CHILD_PIDS`$SET_COMMAND_FOR_CHILDS | $AWK_CMD -F' ' -v x=$index '{if($3==x)printf $2" "}'` "
    done
    debug_log "`echo ${CHILD_PIDS}` Command= `echo ${SET_COMMAND_FOR_CHILDS}`"

    for index in `echo $CHILD_PIDS`
    do
      #if [ "X${IS_CHILD[$index]}" = "X" ]; then
      #  IS_CHILD[$index]=1
      #fi
      IS_CHILD[$index]=1
    done

    COMMAND_VAL="$COMMAND_VAL $CHILD_PIDS"
    debug_log "Final PIDS : `echo $COMMAND_VAL`"
  fi

  #Added this on September 01, 2012 by Prachi
  j=0
  for index in `echo $COMMAND_VAL`
  do
    ARRAY_OF_PID[$j]=$index
    if [ "X${id_arr[$index]}" = "X" ]; then
      id_arr[$index]=$ID
      ID=`expr $ID + 1`
    fi
    j=`expr $j + 1`
  done
  

  SORT_COMMAND=`echo ${ARRAY_OF_PID[@]} | tr " " "\n" | sort -n | uniq`      #SORT_COMMAND contains all the sorted pids from given search pattern  #Added uniq to make sure we don't get any duplicate pid
  k=0
  for idx in `echo $SORT_COMMAND`
  do
    SORTED_ARRAY_OF_PID[$k]=$idx
    k=`expr $k + 1`
  done

  NUM_OF_PID=${#SORTED_ARRAY_OF_PID[@]}

  if [ $NUM_OF_PID -eq 0 ]; then
    ps_not_running_error 
  fi 

  debug_log "create_array_of_pid end. SORTED_ARRAY_OF_PID = ${SORTED_ARRAY_OF_PID[@]} and NUM_OF_PID = $NUM_OF_PID"
}
      
set_command_for_search()
{
  debug_log "Calling method set_command_for_search()"
  STATIC_COMMAND="$COMMON_COMMAND | $AWK_CMD '{print \$2}'"
  i=0
  MULTIPLE_SEARCH_CMD=""
  while [ $i -lt $search_count ] 
  do
    MULTIPLE_SEARCH_CMD=`echo "$MULTIPLE_SEARCH_CMD | $PS_GREP_CMD  ${SEARCH_PATTERN_ARR[$i]} "`
    i=`expr $i + 1`
  done
  COMMAND="eval $PS_CMD_FOR_SEARCH $MULTIPLE_SEARCH_CMD | $STATIC_COMMAND"
  debug_log "Value of COMMAND in set_command_for_search() method = $COMMAND"
}

set_debug_log_file()
{
  if [ "XX$CAV_MON_HOME" != "XX" ]; then
    DEBUG_LOG_FILE="$CAV_MON_HOME/logs/cm_ps_data_dvm_"$MON_TEST_RUN"_"${vector_prefix}"_debug.log"
    ERROR_LOG_FILE="$CAV_MON_HOME/logs/cm_ps_data_dvm_"$MON_TEST_RUN"_"${vector_prefix}"_error.log"
  else
    DEBUG_LOG_FILE="/tmp/cm_ps_data_dvm_"$MON_TEST_RUN"_"${vector_prefix}"_debug.log"
    ERROR_LOG_FILE="/tmp/cm_ps_data_dvm_"$MON_TEST_RUN"_"${vector_prefix}"_error.log"
   debug_log "CAV_MON_HOME is not exported, putting logs to /tmp/."
  fi
}

calc_final_ps_data()
{
  index=$1
  CPU_TIME_PER=0 #initialize

  debug_log "calc_final_ps_data function is called."

  #if [ "XX${PREV_CPU_TIME[$index]}" = "XX" ]; then
  #  PREV_CPU_TIME[$index]=0
  #fi  

  PREV_CPU_TIME[$index]=${PREV_CPU_TIME[$index]:=0}

  set $CMD_OUTPUT
  Elapsed_Time="$1"
  Time="$2"
  VIRTUAL_PROCESS_SIZE="$3"
  RESIDENT_SET_SIZE="$4"
  ELAPSED_TIME=`get_time_in_sec_with_days $Elapsed_Time`
  TIME=`get_time_in_sec_with_days $Time`

  if [ $BC_AVAILABLE -eq 1 ]; then
    MEMORY_USED=`echo " scale=3; $RESIDENT_SET_SIZE * 100 / $TOTAL_MEM" | bc `
  else
    MEMORY_USED=`$AWK_CMD -v "var1=$RESIDENT_SET_SIZE" -v "var2=$TOTAL_MEM" 'BEGIN{printf "%.3f", (var1 * 100 / var2)}'`
  fi

  #If process restart by any reason then we will get current cpu time less than previous cpu time
  debug_log "Current cpu time = $TIME, previous cpu time = ${PREV_CPU_TIME[$index]}"
  if [ $BC_AVAILABLE -eq 1 ]; then
    RET=$(echo "$TIME <  ${PREV_CPU_TIME[$index]}" | bc -l)    
  else
    RET=$($AWK_CMD -v "var1=$TIME" -v "var2=${PREV_CPU_TIME[$index]}" 'BEGIN{flag=var1<var2; printf "%d", flag}')
  fi
  if (( $RET )); then
    PREV_CPU_TIME[$index]=$TIME
  else
    if [ ${PREV_CPU_TIME[$index]} -eq 0 ]; then	
      PREV_CPU_TIME[$index]=$TIME 
      CPU_TIME_PER=0
      return
    fi
    CPU_TIME_DIFF=`expr $TIME - ${PREV_CPU_TIME[$index]}`
    if [ $BC_AVAILABLE -eq 1 ]; then
      CPU_DIFF=`echo " scale = 2; $CPU_TIME_DIFF * 100" | bc`
    else
      CPU_DIFF=`$AWK_CMD -v "var1=$CPU_TIME_DIFF" 'BEGIN{printf "%.2f", (var1 * 100)}'`
    fi
    if [ $BC_AVAILABLE -eq 1 ]; then
      CPU_TIME_PER=`echo " scale=2; $CPU_DIFF / $INTERVAL_SECS " | bc`
    else
      CPU_TIME_PER=`$AWK_CMD -v "var1=$CPU_DIFF" -v "var2=$INTERVAL_SECS" 'BEGIN{printf "%.2f", (var1/var2)}'`
    fi
    PREV_CPU_TIME[$index]=$TIME 
  fi

}

show_ps_data()
{
   index=$1
   if [ "XX$VECTOR_NAME_FORMAT" = "XXpid" ]; then
    if [ "XX$vector_prefix" != "XX" ]; then
      if [ "X${IS_CHILD[$PROCESS_ID]}" = "X1" ]; then
        displayName="${vector_prefix}_child_$PROCESS_ID"
      else
        displayName="${vector_prefix}_$PROCESS_ID"
      fi
    else
      if [ "X${IS_CHILD[$PROCESS_ID]}" = "X1" ]; then
        displayName="child_$PROCESS_ID"
      else
        displayName="$PROCESS_ID"
      fi
    fi

    echo ${id_arr[${PROCESS_ID}]}:$displayName'|'$ELAPSED_TIME $TIME $VIRTUAL_PROCESS_SIZE $RESIDENT_SET_SIZE $CPU_TIME_PER $MEMORY_USED $NUMBER_OF_THREADS ${Open_files_limit[0]} ${Open_files_limit[1]} $Open_files $Percentage_open_files_with_soft_limit

    debug_log "cm_ps_data o/p = '${vector_prefix}_$PROCESS_ID'|'$ELAPSED_TIME $TIME $VIRTUAL_PROCESS_SIZE $RESIDENT_SET_SIZE' & index = $index"
  fi

}

get_search_pattern_list()
{
  echo ${SEARCH_PATTERN_ARR[0]} 
}

ps_not_running_error()
{
  #Issue: Multiple process data monitors are running for sear pattern which are not running
  #Reason:
  #In this case monitor keeps running but there is no data exchange on socket, means connection remains idle.
  #And firewall inactivates these idle connections, due to which connection remains active from one side but inactive from another side,
  #that's why after sending partition switch on these inactive connections, it generates read event, after receiving read event NS go to read data from socket but because cmon does not sends anything so NS got error on read, due to which it closes the connection & add these monitor for recovery.
  #Connection got close here but process keep running.
  #Due to this process data monitors where below event is coming gets started after every partition switch. 
  #Fix: Now taking timestamp, after every 5 minute, cmon will send this event to NS just to keep connection active
  BEFORE_WRITE_TIMESTAMP=`date '+%s'`
 
  TIMESTAMP_DIFF=`expr $BEFORE_WRITE_TIMESTAMP - $AFTER_WRITE_TIMESTAMP`
  if [ $TIMESTAMP_DIFF -gt 300 ]; then #greater than 5 minutes  
    write_flag_not_run=0
  fi   

  if [ $write_flag_not_run -eq 0 ]; then
    info_log "No process running with the specified search pattern `get_search_pattern_list`" 
    AFTER_WRITE_TIMESTAMP=`date '+%s'`
    write_flag_not_run=1
  fi
}

if [ -f /etc/lsb-release ]; then
  version=`cat /etc/lsb-release | grep DISTRIB_RELEASE | awk -F'=' '{print $2}' | cut -d'.' -f 1`
else
  version=-1
fi

get_ps_data()
{
  PROCESS_ID=$1

  if [ "X$PROCESS_ID" = "X" ]; then
    return
  fi

  #Why sleep is here???
  #lib_sleep 1      #commenting this sleep as its making monitor to take time

  debug_log "get_ps_data() Called: PROCESS_ID = $PROCESS_ID "
  if [ "X$OS_NAME" = "XAIX" ]; then
    OPTION="'etime time vsz rssize args'"    
  else #Linux, and other?
    OPTION="'etime time vsz rss args'"    
  fi

  PS_CMD="$PS_CMD_FOR_DATA -p $PROCESS_ID -o $OPTION  | grep -v ELAPSED"

  debug_log "get_ps_data(): Command = $PS_CMD"
  CMD_OUTPUT=`eval $PS_CMD 2>/dev/null`
  RET=$?
  debug_log "get_ps_data(): ps o/p = $CMD_OUTPUT"

  if [ "X$RET" != "X0" ]; then
    #TODO : NEED TO ADD TIMESTAMP IF THIS EVENT COMES FREQUENTLY
    info_log "Process id ($PROCESS_ID) specified is not running. Command ouput is [$CMD_OUTPUT] , Command is [$PS_CMD]"
    return 
  fi

  #Total number of kernel threads owned by the process
  #NUMBER_OF_THREADS=`ps -o 'thcount' -p $PROCESS_ID | tail -1`
  #NUMBER_OF_THREADS=`$PS_CMD_FOR_DATA -o 'thcount' -p $PROCESS_ID | tail -1`
  if [ "X$OS_NAME" = "XSunOS" -o "X$version" = "X16" ]; then
    NUMBER_OF_THREADS=`$PS_CMD_FOR_DATA -o 'nlwp' -p $PROCESS_ID | tail -1`
  else
    NUMBER_OF_THREADS=`$PS_CMD_FOR_DATA -o 'thcount' -p $PROCESS_ID | tail -1`
  fi
  declare Open_files_limit
  Open_files_limit=($(cat /proc/$PROCESS_ID/limits | grep "Max open files" | tr -s " " | cut -d" " -f4,5))
  #Open_files_hard_limit=`cat /proc/$PROCESS_ID/limits | grep "Max open files" | tr -s " " | cut -d" " -f5`
  Open_files=`lsof -p $PROCESS_ID 2>/dev/null| wc -l`
  if [ $BC_AVAILABLE -eq 1 ]; then
    Percentage_open_files_with_soft_limit=`echo "scale=3;$Open_files*100/${Open_files_limit[0]}"|bc`
  else
    Percentage_open_files_with_soft_limit=`awk -v "var1=$Open_files" -v "var2=${Open_files_limit[0]}" 'BEGIN{printf "%.3f", ((var1/var2)*100)}'`
  fi

  debug_log "NUMBER_OF_THREADS=$NUMBER_OF_THREADS"
  get_and_show_ps_data $PROCESS_ID
  return 0
}

get_and_show_ps_data()
{
  index=$1
  debug_log "get_and_show_ps_data function called."

  calc_final_ps_data $index
  if [ $? -eq 0 ]; then
    show_ps_data $index
  fi
}

copy_orig_array_into_prev()
{
  #unset prev array
  unset ARRAY_OF_PREV_PID[*] 

  i=0
  for val in `echo ${SORTED_ARRAY_OF_PID[@]}`
  do
    ARRAY_OF_PREV_PID[$i]=${val}
     i=`expr $i + 1`
  done
}

chk_and_del_vectors()
{
  if [ $SEND_DEL_FLAG -eq 1 ]; then
    echo "DELETE_VECTOR|${DELETE_PID}"
    SEND_DEL_FLAG=0
  fi

  DELETE_PID=""
  DEL_FLAG=0
  SEND_DEL_FLAG=0
  SEND_DEL=0

  i=0

  while true
  do
  j=0
  DEL_FLAG=0
    while true
    do 

      if [ ${ARRAY_OF_PREV_PID[$i]} -eq ${SORTED_ARRAY_OF_PID[$j]} ]; then 
        DEL_FLAG=1
        break
      fi   

      j=`expr $j + 1`
      if [ $j -eq ${#SORTED_ARRAY_OF_PID[@]} ]; then
        break
      fi
    done

    vector_id=""
    if [ "X${id_arr[${ARRAY_OF_PREV_PID[$i]}]}" != "X" ]; then
      vector_id="${id_arr[${ARRAY_OF_PREV_PID[$i]}]}:"
    fi

    if [ $DEL_FLAG -eq 0 ]; then
       if [ "XX$vector_prefix" != "XX" ]; then
          if [ "X${IS_CHILD[${ARRAY_OF_PREV_PID[$i]}]}" = "X1" ]; then
            displayName="${vector_prefix}_child_${ARRAY_OF_PREV_PID[$i]}"
            IS_CHILD[${ARRAY_OF_PREV_PID[$i]}]=0
          else
            displayName="${vector_prefix}_${ARRAY_OF_PREV_PID[$i]}"
          fi
        else
          if [ "X${IS_CHILD[${ARRAY_OF_PREV_PID[$i]}]}" = "X1" ]; then
            displayName="child_${ARRAY_OF_PREV_PID[$i]}"
            IS_CHILD[${ARRAY_OF_PREV_PID[$i]}]=0
          else
            displayName="${ARRAY_OF_PREV_PID[$i]}"
          fi
       fi

       echo "$vector_id""$displayName|0 0 0 0 0 0 0 0 0 0 0"

       if [ $SEND_DEL -eq 1 ]; then
         DELETE_PID="$DELETE_PID $vector_id""$displayName"
       else
         DELETE_PID="$vector_id""$displayName"
       fi


      SEND_DEL=1
    fi

    i=`expr $i + 1`
    if [ $i -eq ${#ARRAY_OF_PREV_PID[@]} ]; then
      break
    fi
  done


  if [ $SEND_DEL -eq 1 ]; then
    SEND_DEL_FLAG=1
  fi
}

#function to get and show data for dvm using pid
get_and_show_data_for_dvm_using_pid()
{
  debug_log "get_and_show_data_for_dvm_using_pid function called."
  while true
  do
    #Test is over.So exit with success status.
    isTestOver $MON_TEST_RUN
    if [ $? -eq 1 ]; then
      #dump process ids
      rm $PROCESS_ID_DUMP_FILE 
      exit 0
    fi

    #Check if all the process id's are still running or not. If not, get all process Id's again
    debug_log "Rechecking process id's are still running or not"
    RESET_ARRAY_DONE=0
    is_all_process_ids_running
    if [ $RESET_ARRAY_DONE -eq 0 -o $NUM_OF_PID -eq 0 ]; then 
      create_array_of_pid
    fi
    NUM_OF_PID=${#SORTED_ARRAY_OF_PID[@]}
    #get and show data of processess one by one
    for((i = 0; i < $NUM_OF_PID; i++))
    {
      PROCESS_ID=${SORTED_ARRAY_OF_PID[i]}; #save value of ith index of array in PROCESS_ID variable
      debug_log "PROCESS_ID = SORTED_ARRAY_OF_PID[i] and then calling get_and_show_ps_data for that particular pid."
      get_ps_data $PROCESS_ID
    }

    debug_log "sleeping for $INTERVAL_SECS secs"
    lib_sleep $INTERVAL_SECS

    if [ $NUM_OF_PID -gt 0 -a ${#ARRAY_OF_PREV_PID[@]} -gt 0 ]; then
       chk_and_del_vectors
    fi
    if [ $NUM_OF_PID -gt 0 ]; then
      #update prev array
      copy_orig_array_into_prev
    fi
    > $PROCESS_ID_DUMP_FILE

    if [ ${#SORTED_ARRAY_OF_PID[@]} -gt 0 ]; then
      for((i=0;i<${#SORTED_ARRAY_OF_PID[@]};i++))
      do
        pid=${SORTED_ARRAY_OF_PID[$i]}
        echo "${id_arr[$pid]}:$pid:${IS_CHILD[$pid]}" >> $PROCESS_ID_DUMP_FILE
      done
    fi
   
  done
  debug_log "end of while loop"
}

is_all_process_ids_running()
{
  NUM_OF_PID=${#SORTED_ARRAY_OF_PID[@]}
  for((i = 0; i < $NUM_OF_PID; i++))
  {
    PROCESS_ID=${SORTED_ARRAY_OF_PID[i]}; #save value of ith index of array in PROCESS_ID variable
    ps -p $PROCESS_ID >/dev/null 2>&1
    if [ $? -ne 0 ]; then
      debug_log "process $PROCESS_ID is not running"
      get_ps_id 0
      unset PREV_CPU_TIME[*]
      RESET_ARRAY_DONE=1
      return #once obtained all the process id's then no need to continue the loop, as now array will have all the current process ids.
    fi
  }
}

show_vector()
{
  if [ "XX$VECTOR_NAME_FORMAT" = "XXpid" ]; then
    get_vectors_using_pid 
  fi 
}

show_data()
{
  if [ "XX$VECTOR_NAME_FORMAT" = "XXpid" ]; then
    get_and_show_data_for_dvm_using_pid
  #elif [ "XX$VECTOR_NAME_FORMAT" == "XXpattern"] ; then
  #  get_and_show_data_for_dvm_using_sp // NOT DONE
  #elif [ "XX$VECTOR_NAME_FORMAT" == "XXsequence"]; then
  #  get_and_show_data_for_dvm_using_seqno // NOT DONE
  fi
}

###########################################################################################################################################

if [ $# -eq 0 ]; then
 display_help_and_exit
fi

#Must set debug log file in the beginning
set_debug_log_file

# Set the COMMAND variable (Must be done before parsing options)
set_ps_cmd
init_search_data

#while getopts s:f:X:L:i:D? arg
while getopts s:X:L:i:cD? arg     # Commented option -f as it is not used
do
  case $arg in
    s) SEARCH_PATTERN_ARR[search_count]="$OPTARG"
       search_count=`expr $search_count + 1`;;
#    f) VECTOR_NAME_FORMAT="$OPTARG";;                #Format of vector name i.e pid, sequence no, process (default is "pid")
    X) vector_prefix="$OPTARG";;
    L) if [ "X$OPTARG" = "Xheader" -o "X$OPTARG" = "XHEADER" ]; then     #Fetch the value of Header or Data
         VECTOR_FLAG="1"                                                #By default VECTOR_FLAG is 0
       fi
       ;;
    i) INTERVAL_SECS="$OPTARG";;                 
    D) DEBUG=1;;
    c) monitor_childs=1;;
    ?) display_help_and_exit ;;
  esac
done

if [ "XX$vector_prefix" = "XXnoprefix" -o "XXvector_prefix" = "XXNOPREFIX" -o "XXvector_prefix" = "XXNoPrefix" -o "XXvector_prefix" = "XXNoprefix" ]; then
  vector_prefix=""
fi 

if [ $VECTOR_FLAG -eq  1 ]; then #show vector
  echo "Warning: No vectors."
  exit 0
fi

PROCESS_ID_DUMP_FILE="$CAV_MON_HOME/logs/.cm_ps_data_dvm_${MON_TEST_RUN}_${vector_prefix}_processIds.dat"
#>$PROCESS_ID_DUMP_FILE

if [ $search_count -eq 0 ]; then
  echo "search pattern is mandatory arguement."
  display_help_and_exit
  exit 1
fi

if [ "XX$VECTOR_NAME_FORMAT" != "XXpid" -a  "XX$VECTOR_NAME_FORMAT" != "XXseqno" -a "XX$VECTOR_NAME_FORMAT" != "XXprocess" ]; then
  echo "Vector name format can only be pid, seqno or process"
  exit 1
fi
get_ps_id 1
show_data
exit 0
