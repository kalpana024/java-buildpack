# Name    : nsi_get_tcp_dump
# Purpose : To take tcp dump
#
# Modification: 
#
#

WAIT_TIME=300
DEBUG=0
FORCE_FLAG=0
CHECK_TIME=2

#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d $HOME/cavisson/monitors ];then
    CAV_MON_HOME=$HOME/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

export CAV_MON_HOME

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

debug_log()
{
  if [ $DEBUG -eq 1 ];then
    echo "`date +'%F %X'`|$*" >> $DEBUG_LOG_FILE
  fi
}

trace_log()
{
  if [ $DEBUG -eq 1 ];then
    echo "`date +'%F %X'`|$*" >> $TRACE_LOG_FILE
  fi
}

error_log()
{
  ns_log_event "Major" "$*"
  echo "`date +'%F %X'`|$*" >> $ERROR_LOG_FILE
}

error_log_and_exit()
{
  ns_log_event "Major" "$*"
  echo "`date +'%F %X'`|$*" >> $ERROR_LOG_FILE
  exit -1
}

error_log_and_console_exit()
{
  echo "Error in getting thread dump due to following error:"
  echo "$*"
  exit -1
  #error_log "$*"
}

error_log_and_console()
{
  echo "Error in getting thread dump due to following error:"
  echo "$*"
}

set_debug_log_file()
{
  if [ "XX$CAV_MON_HOME" != "XX" ];then
    DEBUG_LOG_FILE="$CAV_MON_HOME/logs/nsi_get_springboot_thread_dump_debug.log"
    ERROR_LOG_FILE="$CAV_MON_HOME/logs/nsi_get_springboot_thread_dump_error.log"
    TRACE_LOG_FILE="$CAV_MON_HOME/logs/nsi_get_springboot_thread_dump_trace.log"
  else
    DEBUG_LOG_FILE="/tmp/nsi_get_springboot_thread_dump_debug.log"
    ERROR_LOG_FILE="/tmp/nsi_get_springboot_thread_dump_error.log"
    TRACE_LOG_FILE="/tmp/nsi_get_springboot_thread_dump_trace.log"
    debug_log "CAV_MON_HOME is not exported, putting logs to /tmp/."
  fi
}

display_help_and_exit()
{
  error_log_and_console "Incorrect usage. $*. Usage: nsi_get_springboot_thread_dump -C <command> -w <wait time in secs> [-D ]"

  echo "  -w: option to specify wait time in secs for tcp dump. Default is 5 minutes."
  echo "  -D: option is to enable debug."
  echo "  -C: option for command to take thread dump of springboot process"
  exit 1
}

take_thread_dump()
{
  trace_log "Getting Thread Dump for springboot process using eval nohup"
  FORCE_COMMAND="$COMMAND"
 
  `$FORCE_COMMAND` 2>>$ERROR_LOG_FILE 
  

 # lib_run_command_for_heap_tcp_with_wait "$COMMAND" "$FORCE_COMMAND" "$OUTPUT_FILE" "$WAIT_TIME" "$CHECK_TIME" 2>>$ERROR_LOG_FILE
}


#######################################################################################################

if [ $# -eq 0 ];then
 display_help_and_exit "Mandatory arguments are missing"
fi


#Must set debug log file in the beginning
set_debug_log_file

IFLAG=0
WFLAG=0
DEBUG=0
flag=0

while getopts C:D? arg
do
  case $arg in
    C) COMMAND="$OPTARG";;
    D) DEBUG=1;;
    ?) display_help_and_exit "Invalid argument passed" ;;
  esac
done

#if [ "X$WFLAG" = "X0" ]; then
#   display_help_and_exit "nsi_get_tcp_dump: -w is mandatory option"
#fi

echo "$COMMAND" | grep "\-o" >/dev/null 2>&1
STATUS=$?

if [ "X$STATUS" = "X0" ]; then
  OUTPUT_FILE=`echo "$COMMAND" | awk 'BEGIN {FS="-o"} {print $2}' | cut -d ' ' -f2`
  debug_log "thread dump temporary stored in file $OUTPUT_FILE in server"
else
  error_log_and_console "-o arguement has not been passed to tcpdump"
  exit 1
fi

take_thread_dump

exit 0
