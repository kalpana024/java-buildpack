# Name    : nsi_flight_recorder_int
# Purpose : To take java FlightRecorder
#
# Modification: 
#
#

WAIT_TIME_FOR_FLIGHT_RECORDER=300
DEBUG=0
PREV_LAST_FLIGHT_RECORDER_START_LINE=" "
LAST_FLIGHT_RECORDER_START_LINE=" "
LAST_FLIGHT_RECORDER_START_LINE_NUM=0
OS_NAME=`uname`
USERNAME=NA
CHECK_TIME=2
RUN_CMD_FROM_SU=0

#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d $HOME/cavisson/monitors ];then
    CAV_MON_HOME=$HOME/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

export CAV_MON_HOME

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh
              
CMD_OUT_FILE="$CAV_MON_TMP_DIR/nsi_fligt_Recorder.$$"
FLIGHT_RECORD_CHECK_OUT_FILE_TMP="$CAV_MON_TMP_DIR/file_without_pid.$$"

debug_log()
{
  if [ $DEBUG -eq 1 ];then
    echo "`date +'%F %X'`|$*" >>$DEBUG_LOG_FILE
  fi
}

error_log()
{
  ns_log_event "Major" "$*"
  echo "`date +'%F %X'`|$*" >>$ERROR_LOG_FILE
}

error_log_and_console_exit()
{
  echo "Error in starting Flight Recorder:"
  echo "$*"
  exit -1
}

error_log_and_console()
{
  echo "$*"
}

set_debug_log_file()
{
  if [ "XX$CAV_MON_HOME" != "XX" ];then
    DEBUG_LOG_FILE="$CAV_MON_HOME/logs/nsi_fligt_Recorder_debug.log"
    ERROR_LOG_FILE="$CAV_MON_HOME/logs/nsi_fligt_Recorder_error.log"
  else
    DEBUG_LOG_FILE="$CAV_MON_TMP_DIR/nsi_fligt_Recorder_debug.log"
    ERROR_LOG_FILE="$CAV_MON_TMP_DIR/nsi_fligt_Recorder_error.log"
    debug_log "CAV_MON_HOME is not exported, putting logs to /tmp/."
  fi
}

display_help_and_exit()
{
  echo "Incorrect usage. $*"
  echo "  Usage: nsi_flight_Recorder_int -o <operation> -p <pid> [-u <username>] -r <recording id> -d <duration time>"
  echo "  -S <Flight Recording file size> -l <log file name>[-D]"
  echo "  -o  option to specify the operation(start, stop, show, remove, stop_remove)to be performed for Flight recording."
  echo "  -o  start       - to start the Flight recording."
  echo "  -o  stop        - to stop the Flight recording for a specified recording id."
  echo "  -o  show        - to show the status of available Flight recordings."
  echo "  -o  remove      - to remove the specified Flight recording file."
  echo "  -o  stop_remove - to stop the Flight recording and delete the Flight recording file."
  echo "  -r option to specify the recording id. This option is mandatory for stop operation."
  echo "  -d option to specify flight recording duration time in s/m/h. This option is mandartory for start operation."
  echo "  -S option to specify the expected size of the Flight recording in (K/M/G) units."
  echo "  -p option to specify the pid of the process."
  echo "  -u option to specify the user name.(optional)"
  echo "  -l option to specify the file name with absolute path where Flight recording file  will be created."
  echo "      For example /tmp/myrecording.jfr"
  echo "  -O  1 overwrites the existing Flight Recording file."
  echo "  -O  0 prevents the overwritting of existing Flight Recording file."
  echo "  -D option is to enable debug."
  exit 1
}

start_flight_recording()
{
      rm -f $FLIGHT_RECORDER_LOG_FILE
      #Run command to start the flight recorder and redirect the output to $CMD_OUT_FILE
      if [ "X$TEMP_RECORDING_FILE" != "X" ]; then
        lib_run_command_with_wait "$JRCMD_START repository=$TEMP_RECORDING_FILE" $CMD_OUT_FILE $WAIT_TIME_FOR_FLIGHT_RECORDER $CHECK_TIME 
      else
        lib_run_command_with_wait "$JRCMD_START" $CMD_OUT_FILE $WAIT_TIME_FOR_FLIGHT_RECORDER $CHECK_TIME 
      fi
      #Currently this return value commented since, in both cases (success/failure), it is returning value 0
     # if [ $? != 0 ]; then
     #   error_log_and_console "Error in running $JRCMD $PROCESS_ID start_flightrecording duration=$DURATION_TIME filename=$FLIGHT_RECORDER_LOG_FILE"
     #   cat $CMD_OUT_FILE
     #   cleanup
     #   exit 1
     # fi
      lib_sleep 5
      grep "Started recording" $CMD_OUT_FILE 1>/dev/null
      if [ $? != 0 ]; then
        error_log_and_console "Error in running $JRCMD_START"
        cat $CMD_OUT_FILE
        cleanup
        exit 1
      fi
      cleanup
}


remove_flight_recording()
{
    if [ -f  $FLIGHT_RECORDER_LOG_FILE ]; then
      rm -f $FLIGHT_RECORDER_LOG_FILE 
      if  [ $? != 0 ]; then
        error_log_and_console "Error in removing $FLIGHT_RECORDER_LOG_FILE"
        cleanup
	exit 1
      fi
    else
      error_log_and_console "$FLIGHT_RECORDER_LOG_FILE  file not found"
      cleanup
      exit 1
    fi
    
}

stop_flight_recording()
{
     lib_run_command_with_wait "$JRCMD_STOP" $CMD_OUT_FILE $WAIT_TIME_FOR_FLIGHT_RECORDER $CHECK_TIME 
   #  if [ $? != 0 ]; then
    #   error_log_and_console "Error in stopping $JRCMD $PROCESS_ID stop_flightrecording recording=$RECORD_ID."
    #   cleanup
    #   exit 1
    # fi
     egrep 'Error when stopping recording|Unable to open socket file|No such process' $CMD_OUT_FILE 1>/dev/null
     if [ $? = 0 ]; then
        error_log_and_console "Error in stopping $JRCMD $PROCESS_ID,as recording id is already stopped or wrong pid/recording id has given"
       cat $CMD_OUT_FILE
       cleanup     
       exit 1
     fi
     cleanup
}

show_flight_recording()
{
  lib_run_command_with_wait "$JRCMD_SHOW" $CMD_OUT_FILE $WAIT_TIME_FOR_FLIGHT_RECORDER $CHECK_TIME 

 # if [ $? != 0 ]; then
 #   error_log_and_console "Error in executing $JRCMD $PROCESS_ID check_flightrecording."
 #   cat $CMD_OUT_FILE
 #   cleanup     
 #   exit 1
 # fi
  grep "Unable to open socket file" $CMD_OUT_FILE 1>/dev/null 
  if [ $? = 0 ]; then
     error_log_and_console "Error in executing $JRCMD $PROCESS_ID check_flightrecording"
     cat $CMD_OUT_FILE
     cleanup     
     exit 1
  fi
  grep "Recording" $CMD_OUT_FILE > $FLIGHT_RECORD_CHECK_OUT_FILE_TMP

  echo "RecordingId|RecordingName|Status|Duration|RecordingFileName|FileSize|FileLastModificationTime|Compression"

  cat $FLIGHT_RECORD_CHECK_OUT_FILE_TMP | while read LINE
  do
    rid=`echo $LINE | cut -d "=" -f2 | cut -d " " -f1`
    recordingName=`echo $LINE | cut -d "=" -f3 | cut -d " " -f1|  cut -d "\"" -f2`
    duration=`echo  $LINE| cut -d "=" -f4 | cut -d " " -f1`
    filename=`echo $LINE | cut -d "=" -f5 | cut -d " " -f1 |  cut -d "\"" -f2`
    status=`echo $LINE | cut -d "(" -f2 | cut -d ")" -f1`
    if [ "X$filename" != "X" ]; then
    compression=`echo $LINE | cut -d "=" -f6 | cut -d " " -f1`
    if [ -f $filename ]; then
      size=`ls -ltrh $filename  | cut -d " " -f5`
      date=`ls -ls --time-style="+%d/%m/%Y %T" $filename  | cut -d " " -f7-8`
      echo "$rid|$recordingName|$status|$duration|$filename|$size|$date|$compression" 
    else
      echo "$rid|$recordingName|$status|$duration|$filename| NA | NA |$compression" 
    fi 
    else
      echo "$rid|$recordingName|$status|$duration| NA | NA | NA | NA" 
    fi
  done 
  cleanup
}

set_ps_cmd()
{
  debug_log "set_ps_cmd() Called"
  if [ "X$OS_NAME" = "XSunOS" ]; then
    PS_CMD_FOR_DATA="/usr/bin/ps"
  else #Linux,AIX,HP-UX
    PS_CMD_FOR_DATA="ps"
  fi
}

#This function will return 1 on failure and last character on success
check_last_char()
{
  given_value=$1

  debug_log "check_last_char() Method Called, given_value = [$given_value]"

  if [ "X$given_value" = "X" ];then
    echo "NULL" 
    return 1 
  fi

  num_char=`echo "$given_value" | wc -c`
  num_char=`expr $num_char - 1`

  debug_log "num_char = $num_char"
  echo "`echo "$given_value" | cut -c $num_char`"
}

#This function will convet given data into MB or return 1 on failure
convert_into_GB()
{
  in_val=$1
  debug_log "convert_into_GB() Method Called, in_val = [$in_val]"

  last_char=`check_last_char $in_val`
  debug_log "Last char: last_char = $last_char"
  if [ "X$last_char" = "XNULL" ];then
    return 1 
  fi

  if [ "X$last_char" = "XG" -o "X$last_char" = "Xg" ];then
    in_val_without_MKG_suffix=`echo "${in_val%?}"`
    out_val=$in_val_without_MKG_suffix
  elif [ "X$last_char" = "XM" -o "X$last_char" = "Xm" ];then
    in_val_without_MKG_suffix=`echo "${in_val%?}"`
    if [ $BC_AVAILABLE -eq 1 ];then 
      out_val=`echo "scale=4; $in_val_without_MKG_suffix / 1024" |bc`      #1MB = 1/1024 GB
    else
      out_val=`awk -v "var1=$in_val_without_MKG_suffix" 'BEGIN{printf "%.4f", (var1 / 1024)}'`
    fi
  elif [ "X$last_char" = "XK" -o "X$last_char" = "Xk" ];then
    in_val_without_MKG_suffix=`echo "${in_val%?}"`
    if [ $BC_AVAILABLE -eq 1 ];then
      out_val=`echo "scale=4; $in_val_without_MKG_suffix / 1048576" |bc`   #1KB = 1/(1024 * 1024) GB
    else
      out_val=`awk -v "var1=$in_val_without_MKG_suffix" 'BEGIN{printf "%.4f", (var1 / 1048576)}'`
    fi
  else #if in byte
    if [ $BC_AVAILABLE -eq 1 ];then
      out_val=`echo "scale=4; $in_val / 1073741824" |bc`                      #1byte = 1/(1024 * 1024 *1024)
    else
      out_val=`awk -v "var1=$in_val" 'BEGIN{printf "%.4f", (var1 / 1073741824)}'`
    fi
  fi
 
  echo $out_val
}

get_used_fligtRecorder_size()
{
  debug_log "used_fligtRecorder() Called." 
  debug_log "PS_CMD_FOR_DATA = $PS_CMD_FOR_DATA, PROCESS_ID = $PROCESS_ID"
  USED_FLIGHT_RECORDER_SIZE=`$PS_CMD_FOR_DATA -p $PROCESS_ID -o 'args' | grep -v COMMAND | awk -F'-Xmx' '{print $2}' | cut -d ' ' -f 1`

  first_char=`echo $USED_FLIGHT_RECORDER_SIZE | cut -c 1`
  if [ "X$first_char" = "X=" ];then
    USED_FLIGHT_RECORDER_SIZE=`echo $USED_FLIGHT_RECORDER_SIZE | awk -F'=' '{print $2}'` 
  fi

  if [ "X$USED_FLIGHT_RECORDER_SIZE" = "X" ];then 
    USED_FLIGHT_RECORDER_SIZE=4 #DISK_SPACE_NEEDED=4
    return
  fi

  debug_log "Before convert into GB, Heap Size= [$USED_FLIGHT_RECORDER_SIZE]"
  tmp_value=$USED_FLIGHT_RECORDER_SIZE
  USED_FLIGHT_RECORDER_SIZE=`convert_into_GB $tmp_value`
  debug_log "After convert into GB, Heap Size = [$USED_FLIGHT_RECORDER_SIZE]"
}

#This method will do the task of cleaning the code.

cleanup()
{
  rm -f $CMD_OUT_FILE
  rm -f $FLIGHT_RECORD_CHECK_OUT_FILE_TMP
}

check_and_kill_prev_hanging_cmd()
{
  lib_kill_ps_tree_by_pattern "nsi_flight_recorder_int" "nsi_flight_recorder_int" "\"\-u $USERNAME\"" "\"\-p $PROCESS_ID\""
}


#This will execute JRockit jrcmd.
#Assumption is that application and cmon are using JRockit JVM
fligtRecording_operation()
{
  operation=$1
  record_num=$2

  debug_log "Getting flight Recorder using $JRCMD $PROCESS_ID hprofdump filename=$FLIGHT_RECORDER_LOG_FILE temporary path to store recorded data $CMD_OUT_FILE"

  case $operation in
    start)
      check_and_kill_prev_hanging_cmd
      start_flight_recording
      ;;
    stop)
      stop_flight_recording
      show_flight_recording
      ;;
    show)
      show_flight_recording
      ;;
    remove)
      remove_flight_recording
      show_flight_recording
      ;;
    stop_remove)
      stop_flight_recording
      remove_flight_recording
      show_flight_recording
      ;;
    ?)
      echo "Invalid option: -$operation" >&2
      ;;
  esac

}


get_user_and_owner()
{
  if [ "X$OS_NAME" = "XSunOS" ]; then
    PS_OUT=`ps -p $PROCESS_ID -o 'user stime time' | sed 's/  */ /g' | tail -1`
    USER=`/usr/xpg4/bin/id -un`
  elif [ "X$OS_NAME" = "XAIX" ]; then
    PS_OUT=`ps -p $PROCESS_ID -o 'uname starttime time' | sed 's/  */ /g' | tail -1`
    USER=`id -un`
  else
    PS_OUT=`ps -p $PROCESS_ID -o 'uname stime time' | sed 's/  */ /g' | tail -1`
    USER=`id -un`
  fi

  OWNER=`echo $PS_OUT | cut -d ' ' -f 1`
}

run_cmd_frm_su_or_not()
{
  if [ "X$OWNER" != "X$USER" -a "X$USER" = "Xroot" ]; then
    RUN_CMD_FROM_SU=1
  fi
}


###########################################################################################################################################

if [ $# -eq 0 ];then
 display_help_and_exit "Mandatory arguments are missing"
fi


#Must set debug log file in the beginning
set_debug_log_file


#TODO; Add more options like cm_ps_data
while getopts p:l:o:O:S:r:u:d:w:T:D? arg
do
  case $arg in
    p) PROCESS_ID=$OPTARG;;
    o) OPERATION=$OPTARG;;
    O) OVERWRITE=$OPTARG;;
    S) RECORDING_SIZE_REQD=$OPTARG;;
    u) USERNAME=$OPTARG;;
    r) RECORD_ID=$OPTARG;;
    w) WAIT_TIME_FOR_FLIGHT_RECORDER="$OPTARG";;  #Wait time in secs for Flight Recorder to be ready
    l) FLIGHT_RECORDER_LOG_FILE="$OPTARG";;      #where Flight Recording file will be stored
    d) DURATION_TIME="$OPTARG";; #Duartion time for flight recording
    T) TEMP_RECORDING_FILE="$OPTARG";; #Path of temporary file for flight recording
    D) DEBUG=1;;
    ?) display_help_and_exit "Invalid argument passed" ;;
  esac
done

if [ -f $JAVA_HOME/bin/jrcmd ]; then
  JRCMD=$JAVA_HOME/bin/jrcmd
  JRCMD_START="$JRCMD $PROCESS_ID start_flightrecording duration=$DURATION_TIME filename=$FLIGHT_RECORDER_LOG_FILE"
  JRCMD_STOP="$JRCMD $PROCESS_ID stop_flightrecording recording=$RECORD_ID"
  JRCMD_SHOW="$JRCMD $PROCESS_ID check_flightrecording"
elif [ -f $JAVA_HOME/bin/jcmd ]; then
  #Checking Java process user as per guidelines from https://docs.oracle.com/javacomponents/jmc-5-4/jfr-runtime-guide/run.htm 
  get_user_and_owner
  run_cmd_frm_su_or_not
  JRCMD=$JAVA_HOME/bin/jcmd
  if [ $RUN_CMD_FROM_SU -eq 1 ];then
    JRCMD_START="su - $OWNER  -c \"$JRCMD $PROCESS_ID JFR.start duration=$DURATION_TIME filename=$FLIGHT_RECORDER_LOG_FILE settings=profile\""
    JRCMD_STOP="su - $OWNER  -c \"$JRCMD $PROCESS_ID JFR.stop recording=$RECORD_ID\""
    JRCMD_SHOW="su - $OWNER  -c \"$JRCMD $PROCESS_ID JFR.check\""
  else
    JRCMD_START="$JRCMD $PROCESS_ID JFR.start duration=$DURATION_TIME filename=$FLIGHT_RECORDER_LOG_FILE settings=profile"
    JRCMD_STOP="$JRCMD $PROCESS_ID JFR.stop recording=$RECORD_ID"
    JRCMD_SHOW="$JRCMD $PROCESS_ID JFR.check"
  fi
else
  echo "jrcmd/jcmd  not found. Hence exiting."
  exit -1
fi

if [ "X$OPERATION" = "X" ]; then
  OPERATION="show"
fi

if [ "X$PROCESS_ID" = "X" ]; then
  if [ "X$OPERATION" != "Xremove" ]; then 
    display_help_and_exit "Mandatory argument process id is missing"
  fi
fi

if [ "X$OPERATION" = "Xstop" -a "X$RECORD_ID" = "X" ]; then
    display_help_and_exit "Recording ID must be given for stop operation"
fi

if [ "X$OPERATION" = "Xstop_remove" ]; then
   if [ "X$RECORD_ID" = "X" -o "X$FLIGHT_RECORDER_LOG_FILE" = "X" ]; then
      display_help_and_exit "Both Recording ID and Flight recording file are mandatory to execute stop and remove operation"
   fi
fi

if [ "X$OPERATION" = "Xremove" -a "X$FLIGHT_RECORDER_LOG_FILE" = "X" ]; then
    display_help_and_exit "Flight recording log file must be given for remove operation"
fi

if [ "X$OPERATION" = "Xstart" ] && [ "X$DURATION_TIME" = "X" -o "X$FLIGHT_RECORDER_LOG_FILE" = "X" ]; then
  display_help_and_exit "Mandatory argument Duration time/Flight recording file is missing for start operation"
fi



if [  "X$RECORDING_SIZE_REQD" != "X"  ]; then
   if [ "X$OPERATION" = "Xstart" ]; then 
      FLIGHT_RECORDER_DIR=`dirname $FLIGHT_RECORDER_LOG_FILE`
      mkdir -p $FLIGHT_RECORDER_DIR
      if [ ! -d $FLIGHT_RECORDER_DIR ]; then
         display_help_and_exit "$FLIGHT_RECORDER_DIR does not exist."
      fi
      AVAILABLE_DISK_SPACE=`df -hP $FLIGHT_RECORDER_DIR | tail -1 | awk '{print $4}'`
      debug_log "Before convert into GB, AVAILABLE_DISK_SPACE= [$AVAILABLE_DISK_SPACE]"
      tmp_value=$AVAILABLE_DISK_SPACE
      AVAILABLE_DISK_SPACE=`convert_into_GB $tmp_value`
      tmp_value1=$RECORDING_SIZE_REQD
      RECORDING_SIZE_REQD=`convert_into_GB $tmp_value1`
      if [ $BC_AVAILABLE -eq 1 ];then
         RET=$(echo "$RECORDING_SIZE_REQD > $AVAILABLE_DISK_SPACE" | bc -l)
      else
         RET=`awk -v "var1=$RECORDING_SIZE_REQD" -v "var2=$AVAILABLE_DISK_SPACE" 'BEGIN{ret=var1>var2;printf "%d", ret}'`
      fi

      if (( $RET ));then
         #error_log_and_console_exit "Disk space available $AVAILABLE_DISK_SPACE is less than space needed $RECORDING_SIZE_REQD for starting flight recorder"
         error_log_and_console_exit "Disk space available $tmp_value is less than space needed $tmp_value1 for starting flight recorder"
      fi

   fi
fi
if [ "X$OPERATION" = "Xstart" ] && [ "X$OVERWRITE" != "X" ]; then
   if [ $OVERWRITE -eq 0 ]; then
     if [ -f $FLIGHT_RECORDER_LOG_FILE ]; then
       echo "$FLIGHT_RECORDER_LOG_FILE file already exists"
       cleanup
       exit  1
     fi
   fi
fi

if [ -f $JRCMD ]; then
  fligtRecording_operation $OPERATION $RECORD_ID
else
  error_log_and_console_exit "No java command available in $JAVA_HOME for FlightRecorder operations."
fi

#rm -rf $CMD_OUT_FILE

exit 0
