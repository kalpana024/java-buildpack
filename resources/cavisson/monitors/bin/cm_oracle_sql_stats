#
#Name : cm_oracle_sql_stats
#Purpose : To display oracle database health stats
#Owner   : Krishna Tayal
#
#
#
#==================Query to execute==================
# select SUM(EXECUTIONS), SUM(ELAPSED_TIME) from v\$sql;
#
#
#
#==================Query Output================================
#SQL*Plus: Release 11.2.0.1.0 Production on Fri Feb 6 11:04:32 2015
#
#Copyright (c) 1982, 2009, Oracle.  All rights reserved.
#
#
#Connected to:
#Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
#With the Partitioning, OLAP, Data Mining and Real Application Testing options
#
#SQL> SQL> SQL>
#SUM(EXECUTIONS) SUM(ELAPSED_TIME)
#--------------- -----------------
#        2988188         839809837
#
#1 row selected.
#
#SQL>   1* select SUM(EXECUTIONS), SUM(ELAPSED_TIME) from v$sql
#SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
#With the Partitioning, OLAP, Data Mining and Real Application Testing options
#
#================================================================================

#Entry to be done in standard_monitor.dat
#OracleSqlStats|cm_oracle_sql_stats.gdf|2|cm_oracle_sql_stats|shell|NA|Linux,LinuxEx|CM|Oracle sql stats monitor.It monitors number of queries executed.


#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

#export LD_LIBRARY_PATH
export  LD_LIBRARY_PATH=/usr/lib/oracle/11.2/client64/lib


 
trace_log()
{
  TRACE_LEVEL=$1

  if [ $TRACE -lt $TRACE_LEVEL ]; then
    return
  else
    echo `date +'%F %X'`"|" "$2" >>$TRACE_LOG_FILE

    #file rollback
    TL_FILE_SIZE=`ls -l $TRACE_LOG_FILE  | awk -F' ' '{print $5}'`
    if [ $TL_FILE_SIZE -gt 104857600 ]; then  #100 MB
      mv $TRACE_LOG_FILE ${TRACE_LOG_FILE}.prev
    fi
  fi

  if [ "X$3" != "X" ]; then
    $3 >>$TRACE_LOG_FILE
  fi
}

error_log()
{
  ns_log_event "Major" "$*"
  echo `date +'%F %X'`"|" "$*" >> $ERROR_LOG_FILE
}

set_error_and_trace_log_file()
{
  QUERY_ERR_FILE="$CAV_MON_TMP_DIR/cm_oracle_sql_stats.err.$$"
  ERROR_LOG_FILE="$CAV_MON_TMP_DIR/cm_oracle_sql_stats__"$MON_TEST_RUN"_"$VECTOR_NAME"_error.log"
  TRACE_LOG_FILE="$CAV_MON_TMP_DIR/cm_oracle_sql_stats__"$MON_TEST_RUN"_"$VECTOR_NAME"_trace.log"
}

Usage()
{
  error_log "$*"
  error_log "Usage: cm_oracle_sql_stats -U <USER> -K <KEY/PASSWORD> -O <ORACLE_HOME>  -H <HOST/IP> -P <PORT> -S <SID> -I <Instance-Name> -i <interval in secs> -t <Trace Level"
  exit -1
}

make_and_run_query_oracle2()
{
trace_log 1 "Query to execute = '$QUERY_FOR_STATE'"
QUERY_START_TIMESTAMP_IN_MSECS=`echo $(($(date +%s%N)/1000000))`

#Make connections and run query
QUERY_OUT=$(sqlplus / as sysdba 2>>$QUERY_ERR_FILE <<+
$QUERY_SET_PAGESIZE
$QUERY_SET_FEEDBACK
$QUERY_FOR_STATE
;
+
)

#Log query execution time
QUERY_END_TIMESTAMP_IN_MSECS=`echo $(($(date +%s%N)/1000000))`
TIMESTAMP_DIFF_IN_MSECS=`expr $QUERY_END_TIMESTAMP_IN_MSECS - $QUERY_START_TIMESTAMP_IN_MSECS`
TIMESTAMP_DIFF_IN_SEC=`expr $TIMESTAMP_DIFF_IN_MSECS / 1000`

trace_log 1 "Time taken by query in msecs :  $TIMESTAMP_DIFF_IN_MSECS , in secs : $TIMESTAMP_DIFF_IN_SEC"
trace_log 2 "Query output = $QUERY_OUT"
}


make_and_run_query_oracle()
{
trace_log 1 "Query to execute = '$QUERY_FOR_STATE'"
QUERY_START_TIMESTAMP_IN_MSECS=`echo $(($(date +%s%N)/1000000))`

#Make connections and run query
QUERY_OUT=$($SQL_PLUS_BIN $USER/$PASSWORD@"(description=(address=(host=$HOST)(protocol=tcp)(port=$PORT))(connect_data=(sid=$SID)(instancename=$Instance-Name)))" 2>>$QUERY_ERR_FILE <<+
$QUERY_SET_PAGESIZE
$QUERY_SET_FEEDBACK
$QUERY_FOR_STATE
;
+
)

#Log query execution time
QUERY_END_TIMESTAMP_IN_MSECS=`echo $(($(date +%s%N)/1000000))`
TIMESTAMP_DIFF_IN_MSECS=`expr $QUERY_END_TIMESTAMP_IN_MSECS - $QUERY_START_TIMESTAMP_IN_MSECS`
TIMESTAMP_DIFF_IN_SEC=`expr $TIMESTAMP_DIFF_IN_MSECS / 1000`

trace_log 1 "Time taken by query in msecs :  $TIMESTAMP_DIFF_IN_MSECS , in secs : $TIMESTAMP_DIFF_IN_SEC"
trace_log 2 "Query output = $QUERY_OUT"
}

check_error_file()
{
  ERR_FILE_SIZE=`ls -l $QUERY_ERR_FILE 2>/dev/null| awk '{print $5}'`

  if [ "X$ERR_FILE_SIZE" = "X" ]; then
    return
  elif [ "X$ERR_FILE_SIZE" = "X0" ]; then
    rm -f $QUERY_ERR_FILE
    return
  fi

  ERR_MSG=`cat $QUERY_ERR_FILE`
  error_log "$ERR_MSG"
  ERROR_FOUND=1
  rm -f $QUERY_ERR_FILE

  RETRY_COUNT=`expr $RETRY_COUNT + 1`
  if [ $RETRY_COUNT -ge 5 ]; then
    error_log "Error occured in executing queries 5 times, Exiting ......." 
    exit 1
  fi
}

#==================Query Output================================
#SQL*Plus: Release 11.2.0.1.0 Production on Fri Feb 6 11:04:32 2015
#
#Copyright (c) 1982, 2009, Oracle.  All rights reserved.
#
#
#Connected to:
#Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
#With the Partitioning, OLAP, Data Mining and Real Application Testing options
#
#SQL> SQL> SQL>
#SUM(EXECUTIONS) SUM(ELAPSED_TIME)
#--------------- -----------------
#        2988188         839809837
#
#1 row selected.
#
#SQL>   1* select SUM(EXECUTIONS), SUM(ELAPSED_TIME) from v$sql
#SQL> Disconnected from Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production
#With the Partitioning, OLAP, Data Mining and Real Application Testing options
#
#================================================================================

process_data()
{
  DATA=`echo "$QUERY_OUT" | grep -i -m1 -A2 "SUM(EXECUTIONS)" | tail -1`
  trace_log 2 "DATA='$DATA'"

  #TOTAL_ELAPSED_TIME is in microseconds
  TOTAL_EXECUTIONS=`echo "$DATA" | awk '{print $1}'`
  TOTAL_ELAPSED_TIME=`echo "$DATA" | awk '{print $2}'`
  trace_log 2 "TOTAL_EXECUTIONS=$TOTAL_EXECUTIONS, TOTAL_ELAPSED_TIME=$TOTAL_ELAPSED_TIME"

  #Function is called first time
  if [ "X$PREV_TOTAL_EXECUTIONS" = "X" ]; then
    PREV_TOTAL_EXECUTIONS=$TOTAL_EXECUTIONS
    PREV_TOTAL_ELAPSED_TIME=$TOTAL_ELAPSED_TIME
  fi

  #EXECUTIONS_PER_SEC = ( TOTAL_EXECUTIONS - PREV_TOTAL_EXECUTIONS ) / INTERVAL
  EXECUTIONS_PER_SEC=`awk -v "var1=$TOTAL_EXECUTIONS" -v "var2=$PREV_TOTAL_EXECUTIONS" -v "var3=$INTERVAL" 'BEGIN{printf "%f", ((float)var1 - var2) / var3}'`

    
  #There might be a case when TOTAL_EXECUTIONS remains same in two samples.
  #We might end up diving by 0 in that case.
  if [ "X$TOTAL_EXECUTIONS" = "X$PREV_TOTAL_EXECUTIONS" ]; then
    TIME_ELAPSED_PER_EXECUTION=0
  else
    #TIME_ELAPSED_PER_EXECUTION = (TOTAL_ELAPSED_TIME - PREV_TOTAL_ELAPSED_TIME) / ( TOTAL_EXECUTIONS - PREV_TOTAL_EXECUTIONS )
    #Converting #TIME_ELAPSED_PER_EXECUTION to milliseconds from microsecond
    TIME_ELAPSED_PER_EXECUTION=`awk -v "var1=$TOTAL_EXECUTIONS" -v "var2=$PREV_TOTAL_EXECUTIONS" -v "var3=$TOTAL_ELAPSED_TIME" -v "var4=$PREV_TOTAL_ELAPSED_TIME" 'BEGIN{printf "%f", ((float)var3 - var4) / ((float)var1 - var2) / 1000}'`
  fi

  echo "$TOTAL_EXECUTIONS $EXECUTIONS_PER_SEC $TIME_ELAPSED_PER_EXECUTION"

  trace_log 2 "TOTAL_EXECUTIONS=$TOTAL_EXECUTIONS, EXECUTIONS_PER_SEC=$EXECUTIONS_PER_SEC, TIME_ELAPSED_PER_EXECUTION=$TIME_ELAPSED_PER_EXECUTION, TOTAL_ELAPSED_TIME=$TOTAL_ELAPSED_TIME, PREV_TOTAL_EXECUTIONS=$PREV_TOTAL_EXECUTIONS, PREV_TOTAL_ELAPSED_TIME=$PREV_TOTAL_ELAPSED_TIME"

  PREV_TOTAL_EXECUTIONS=$TOTAL_EXECUTIONS 
  PREV_TOTAL_ELAPSED_TIME=$TOTAL_ELAPSED_TIME
}

calculate_sleep_interval()
{
  #calculate time in seconds till midnight
  current=$(date '+%s')
  till_midnight=$(date -d 'tomorrow 00:00:00' '+%s')

  CURRENT_MIDNIGHT_DIFF=`expr $till_midnight - $current`
  SLEEP_INTERVAL=`expr $CURRENT_MIDNIGHT_DIFF % $INTERVAL`
  if [ $SLEEP_INTERVAL -eq 0 ]; then
    SLEEP_INTERVAL=$INTERVAL
  fi
  trace_log 1 "Sleeping for '$SLEEP_INTERVAL' seconds"
}

check_mandatory_options()
{

  if [ "X$USER" = "X" ];then
    Usage "USER name is mandatory"
  fi

  if [ "X$PASSWORD" = "X" ];then
    Usage "PASSWORD is mandatory"
  fi

  if [ "X$ORACLE_HOME" = "X" ];then
    Usage "ORACLE_HOME is mandatory"
  fi

  if [ "X$HOST" = "X" ];then
    Usage "HOST name is mandatory"
  fi

  if [ "X$PORT" = "X" ];then
    Usage "port is mandatory"
  fi

  if [ "X$SID" = "X" ];then
    Usage "SID is mandatory"
  fi

  if [ "X$INSTANCE" = "X" ];then
    Usage "INSTANCE is mandatory"
  fi
}

INTERVAL=300
TRACE=4
RETRY_COUNT=0
ERROR_FOUND=0

while getopts U:K:O:H:P:S:I:i:t: c  2>/dev/null
do
  case $c in
    U) USER=$OPTARG ;;
    K) PASSWORD=$OPTARG ;;
    O) ORACLE_HOME=$OPTARG ;;
    H) HOST=$OPTARG ;;
    P) PORT=$OPTARG ;;
    S) SID=$OPTARG ;;
    I) INSTANCE=$OPTARG ;;
    i) INTERVAL=$OPTARG;;    #has default 10 sec
    t) TRACE=$OPTARG;;
    ?) Usage "Invalid arguments";;
    *) Usage "Invalid arguments";;
  esac
done

#Check for mandatory options
check_mandatory_options

#Set log file names
set_error_and_trace_log_file

#Initialize oracle home and sql bin
export ORACLE_HOME=$ORACLE_HOME
SQL_PLUS_BIN=$ORACLE_HOME/sqlplus

trace_log 1 "USER=$USER, PASSWORD=$PASSWORD, ORACLE_HOME=$ORACLE_HOME, HOST=$HOST, PORT=$PORT, SID=$SID, INSTANCE=$INSTANCE, INTERVAL=$INTERVAL, TRACE_LEVEL=$TRACE, SQL_PLUS_BIN=$SQL_PLUS_BIN"

#Intialize queries
QUERY_FOR_STATE=""
QUERY_SET_PAGESIZE=" set pagesize 50;"
QUERY_SET_FEEDBACK=" set feedback on;"

while true
do
  isTestOver $MON_TEST_RUN
  if [ $? = 1 ]; then
    check_error_file
    trace_log 1 "Test $MON_TEST_RUN is over, now exiting....."
    exit 0
  fi

  QUERY_FOR_STATE="select SUM(EXECUTIONS), SUM(ELAPSED_TIME) from v\$sql;"
  make_and_run_query_oracle
  check_error_file
  if [ $ERROR_FOUND -eq 0 ]; then 
    process_data
    ERROR_FOUND=0
  fi
  calculate_sleep_interval
  lib_sleep $SLEEP_INTERVAL
done
