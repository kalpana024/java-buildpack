
##########################
# Name  : cm_f5_snmp_sys_stats
# Usage :
# Purpose: 
# Output : 
#          
# Initial version : Friday, May 11 2012
# Modification    : 
# Author Name     : Prachi Kumari
##########################

PROTOCOL_VERSION=1 #version 1/2c
COMMUNITY_NAME="public"
DEBUG_LEVEL=0

#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh 
INTERVAL_SECS=$MON_FREQUENCY

set_error_log_file()
{
  if [ "XX$CAV_MON_HOME" != "XX" ];then
    DEBUG_LOG_FILE="$CAV_MON_HOME/logs/cm_f5_snmp_sys_stats_"$MON_TEST_RUN"_"$VECTOR_NAME"_debug.log"
    ERROR_LOG_FILE="$CAV_MON_HOME/logs/cm_f5_snmp_sys_stats_"$MON_TEST_RUN"_"$VECTOR_NAME"_error.log"
  else
    DEBUG_LOG_FILE="/tmp/cm_f5_snmp_sys_stats_"$MON_TEST_RUN"_"$VECTOR_NAME"_debug.log"
    ERROR_LOG_FILE="/tmp/cm_f5_snmp_sys_stats_"$MON_TEST_RUN"_"$VECTOR_NAME"_error.log"
    error_log "CAV_MON_HOME is not exported, putting logs to /tmp/."
  fi
}

set_error_log_file

error_log()
{
  ns_log_event "Major" "$*"
  echo "`date +'%F %X'`|$*" >> $ERROR_LOG_FILE
}

error_log_and_exit()
{
  error_log "$*"
  exit -1
}

if [ "X$MON_NS_WDIR" = "X" ]; then
  error_log_and_exit "MON_NS_WDIR is not set"
fi

MIB_INP_FILE="$MON_NS_WDIR/snmp/inp/f5_sys_stats.inp"

export SNMP_MONITOR="cm_snmp_mib" 



debug_log()
{
  if [ "X$DEBUG_LEVEL" = "X0" ]; then
    return
  else
  echo "`date +'%F %X'`|$*" >> $DEBUG_LOG_FILE
  fi
}


Usage()
{
  error_log "$*"

  error_log "Usage: cm_f5_snmp_sys_stats -s <hostname/ip> -v <protocol version>[version 1 or 2c(default 1)] -c <community_name(default public)> -i <interval>(default 10 sec) -D <debug_log 0/1>"

  exit -1
}


# Here we are calling cm_snmp_mib to execute snmpget command and generate result.
start_monitor()
{
  $SNMP_MONITOR -s $HOSTNAME_OR_IP -v $PROTOCOL_VERSION -c $COMMUNITY_NAME -i $INTERVAL_SECS -f $MIB_INP_FILE -D $DEBUG_LEVEL
}



#######################################################################################


while getopts s:v:c:i:D:? c  2>/dev/null
do
  case $c in
    s) HOSTNAME_OR_IP=$OPTARG;;   
    v) PROTOCOL_VERSION=$OPTARG;;  #has default version 1
    c) COMMUNITY_NAME=$OPTARG;;    #has default community public
    i) INTERVAL_SECS=$OPTARG;;          #has default interval 10 sec
    D) DEBUG_LEVEL=$OPTARG;;         #has default debug_level 0
    ?) Usage "Invalid arguments";;
    *) Usage "Invalid arguments";;
  esac
done

if [ "X$HOSTNAME_OR_IP" = "X" ]; then
  error_log_and_exit "Mandatory argument -s <HOSTNAME_OR_IP> is missing"
fi

if [ "X$PROTOCOL_VERSION" != "X1" -a "X$PROTOCOL_VERSION" != "X2c" ];then
  error_log_and_exit "Error : Invalid Protocol version $PROTOCOL_VERSION"  
fi

debug_log "monitor starts"

start_monitor

debug_log "monitor stops"

exit 0
