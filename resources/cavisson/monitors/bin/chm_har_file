#####################################################################################################################################
#Purpose of shell-: Move the HAR files to TestRun/harp_files Directory and Append text at the start and end of the every Har file.
#Author-: Ankit Yadav/Neeraj Jain
#Date--: 04-May-2012
# See Usage for details
#
# How to use in mprof
# To start before test to delete har files, add following in mprof
#CHECK_MONITOR USNS14 HAR_Archive 1 NA 2 NA NA NA chm_har_file -o delete
# To move har files to TR after test is over, add following in mprof
#CHECK_MONITOR USNS14 HAR_Move_To_TR 90 NA 2 NA NA NA chm_har_file -o moveToTRAsHarp
#
#####################################################################################################################################

###export the Cavisson monitor Home directory#########
if [ "X$CAV_MON_HOME" == "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

####Export the check monitor Function#####################
. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

if [ "X$HOME" == "X" ];then
	export HOME="/home/netstorm"
fi

HAR_PATH="${HOME}/.mozilla/firefox/logs"
HAR_LOG_DIR=""
HAR_ARCHIVE="archive"
PAGE_SCREEN_SHOTS="screen_shot"
CLIPS="clips"
DEBUG_LOG_FILE="/tmp/chm_har_file_$$.log"
BROWSER_HOME="${HOME}/.mozilla/firefox"

DEBUG=0

debug_log()
{
  if [ $DEBUG -eq 0 ]; then
    return;
  fi

  echo $* >> $DEBUG_LOG_FILE
  #echo "`date +\'%D %T\'`|$*" >>$DEBUG_LOG_FILE
}

log_event_and_exit()
{
  ns_log_event "Critical"  "$*"
  ns_check_mon_fail_and_exit
}

del_harf()
{
  rm -f *.har >/dev/null 2>&1
  if  [ $? != 0 ]; then
    log_event_and_exit "Error: in deleting har files from path $HAR_PATH/${HAR_LOG_DIR_LIST[$i]}. Check path is correct and have permisson"
  fi
}

#Note - Since CavMonAgent reads only stdout of the program, we are redirectting all stderr to stdout
delete_har_files()
{
  debug_log "Method delete_har_files() called, num_har_dir = $num_har_dir"

  for((i = 1; i <= $num_har_dir; i++ ))
  do
    cd ${HAR_PATH}/${HAR_LOG_DIR_LIST[$i]} >/dev/null 2>&1
    debug_log "Deleting HAR files in path $HAR_PATH/${HAR_LOG_DIR_LIST[$i]}"
    del_harf
  done

  debug_log "HAR files from directories ${HAR_LOG_DIR_LIST[@]} deleted succefully."
  debug_log "Method delete_har_files() end."
}

# BugId:6433 This is used for validating the profiles. For validating ,Firstly it will check the entry of profile in profiles.ini, if # it exists then it will check in profiles directory, if exists then it will do entry in logs otherwise it exit from the shell
validate_profile()
{
  debug_log "Method validate_profile() called, PROFILE_NAME = $PROFILE_NAME"
  egrep -q "^Name=$PROFILE_NAME" ${BROWSER_HOME}/profiles.ini
  if [ $? -eq 0 ];then
    debug_log "Profile '$PROFILE_NAME' exist in ${BROWSER_HOME}/profiles.ini"
    if [ -d ${BROWSER_HOME}/profiles/${PROFILE_NAME} ];then
      debug_log "Profile '$PROFILE_NAME' directory exist on path ${BROWSER_HOME}/profiles/${PROFILE_NAME}"
    else
      debug_log "Error: Profile '$PROFILE_NAME' directory does not exist on path ${BROWSER_HOME}/profiles/${PROFILE_NAME}"
      exit 1
    fi
  else
    debug_log "Error: Profile '$PROFILE_NAME' does exist in ${BROWSER_HOME}/profiles.ini"
    exit 1
  fi
}

make_dir()
{
  DIR_PATH=$1
  DIR_NAME=$2
  
  debug_log "Making dir '$DIR_NAME' on path '$DIR_PATH'"
  mkdir -p $DIR_PATH/$DIR_NAME 2>&1
  if  [ $? != 0 ]; then
    log_event_and_exit "Error: in making directory $DIR_PATH/$DIR_NAME"
  fi

  chmod -R 777 $DIR_PATH/$DIR_NAME 2>&1 
  if  [ $? != 0 ]; then
    log_event_and_exit "Error: in changing permission to 777 of '$DIR_PATH/$DIR_NAME'"
  fi
}

make_link_flag=0
# This function will do -
# (1) Make archive dir on path /home/<user>/<browser_dir>/logs/<prof_name>/
# (2) Make .TRxxx dir on path /home/<user>/<browser_dir>/logs/<prof_name>/
# (3) Make screen_shot dir on path /home/<user>/<browser_dir>/rbu_logs/<prof_name>/
# (4) Make clips dir on path /home/<user>/<browser_dir>/rbu_logs/<prof_name>/
archive_har_files()
{
  debug_log "Method archive_har_files() called, num_har_dir = $num_har_dir"

  for((i = 1; i <= $num_har_dir; i++ ))
  do
    # Validate profile is exist or not?
    validate_profile

    # Make archive dir 
    make_dir "${HAR_PATH}/${HAR_LOG_DIR_LIST[$i]}" "${HAR_ARCHIVE}"

    # Make hidden .TRxx dir 
    make_dir "${HAR_PATH}/${HAR_LOG_DIR_LIST[$i]}" ".TR${MON_TEST_RUN}"

    # Make screen_shot dir 
    if [ "X$app" = "X.chrome" -o "X$app" = "X.mozilla" ];then
      make_dir "${HAR_PATH}/${HAR_LOG_DIR_LIST[$i]}" "$PAGE_SCREEN_SHOTS" 

      #Check snap_shots link is already exist for that particular test
      if [ -L ${HAR_PATH}/${HAR_LOG_DIR_LIST[$i]}/clips ];then
        debug_log "clip link is already exist."
        # snap_shot link is for current test run or not if not then remove and made new
        ls -ltr ${HAR_PATH}/${HAR_LOG_DIR_LIST[$i]}/clips | grep TR${MON_TEST_RUN} 
        if [ $? -ne 0 ];then
          debug_log "clip link is exist not with current test run ${MON_TEST_RUN}, Removing old and making new one"
          rm -f ${HAR_PATH}/${HAR_LOG_DIR_LIST[$i]}/clips
          make_link_flag=1
        fi
      else
        debug_log "clip link is not exist."
        make_link_flag=1
      fi

      debug_log "make_link_flag = $make_link_flag"
      debug_log "HAR_TR_CC_PATH = ${HAR_TR_CC_PATH} , clips = ${HAR_PATH}/${HAR_LOG_DIR_LIST[$i]}/clips"
      if [ $make_link_flag -eq 1 -a -d $HAR_TR_CC_PATH ];then
        ln -s ${HAR_TR_CC_PATH} ${HAR_PATH}/${HAR_LOG_DIR_LIST[$i]}/clips
        if [ $? -ne 0 ];then 
          debug_log "Error: failed to make link from ${HAR_TR_CC_PATH} to clips"
        fi
      fi
    fi

    debug_log "Moving old har files from path $HAR_PATH/${HAR_LOG_DIR_LIST[$i]} to archive"
    mv ${HAR_PATH}/${HAR_LOG_DIR_LIST[$i]}/*.* ${HAR_PATH}/${HAR_LOG_DIR_LIST[$i]}/${HAR_ARCHIVE} >/dev/null 2>&1
  done

  debug_log "Method archive_har_files() end, HAR files form directories - ${HAR_LOG_DIR_LIST[@]} moved To their respective Archive Folder"
}

make_and_move_harp_files()
{
  debug_log "Method make_and_move_harp_files() Called. PWD = `pwd`"

  # Note - If there are large number of file, then ls * may fail. To be taken care later
  ### We dont need harp files.
  #for HAR_NAME in `ls P_*.har`    
  #do
  #  echo "onInputData(" >>${HAR_NAME}p 2>&1
  #  cat $HAR_NAME >>${HAR_NAME}p 2>&1
  #  echo ");" >>${HAR_NAME}p 2>&1
  #done 

  debug_log "`date`| Moving har and harp files into Test Run directory ${HAR_TR_PATH}"

  #Also moving har files as it is needed by parser
  mv P_*.har ${HAR_TR_PATH} 2>&1    #BUG ID:11322 :SHIKHA: Extra HAR will not be copied to TR directory
  #mv P_*.harp ${HAR_TR_PATH} 2>&1

  debug_log "HAR files moved to TestRun dir ${HAR_TR_PATH}"
  #chown -R netstorm.netstorm ${HAR_TR_PATH} 2>&1
  #if  [ $? != 0 ]; then
  #  log_event_and_exit "Error in changing ownership of path ${HAR_TR_PATH} to netstorm"
  #fi

  debug_log "Method make_and_move_harp_files() End."
}

move_har_files_to_tr_as_harp()
{
  debug_log "Method move_har_files_to_tr_as_harp() Called."

  # Make harp_files directory in /home/<user>/<controller_name>/logs/TRxxx/rbu_logs/harp_files
  mkdir -p ${HAR_TR_PATH} 2>&1
  if  [ $? != 0 ]; then
    log_event_and_exit "Error: in making directory ${HAR_TR_PATH}"
  fi
  #Handled in c code Atul Sh.
  #mkdir -p ${HAR_TR_SS_PATH} 2>&1
  #if  [ $? != 0 ]; then
  #  log_event_and_exit "Error: in making directory ${HAR_TR_SS_PATH}"
  #fi

  debug_log "num_har_dir = $num_har_dir"
  for((i = 1; i <= $num_har_dir; i++ ))
  do
    debug_log "Moving HAR files from path $HAR_PATH/${HAR_LOG_DIR_LIST[$i]} to TR path ${HAR_TR_PATH}"
    cd ${HAR_PATH}/${HAR_LOG_DIR_LIST[$i]}/.TR${MON_TEST_RUN} 2>&1
    if  [ $? != 0 ]; then
      log_event_and_exit "Error: in changing directory to $HAR_PATH/${HAR_LOG_DIR_LIST[$i]}. Check path is correct and have permisson"
    fi

    # Manish: Since sometime renaming of har file  is not correct due to har file first creation or some other reason 
    # So we have to recheck renaming and if renaming is worng or not renamed then rename it correctly.
    debug_log "HAR_RENAME_INFO_FILE = $HAR_RENAME_INFO_FILE"
    #if Har rename info file is given then only goto double_check_har_file_renaming
    #File existence check is inside the function
    if [ "X$HAR_RENAME_INFO_FILE" != "X" ];then
      double_check_har_file_renaming
    fi

    make_and_move_harp_files 
    debug_log "Renaming for directory ${HAR_LOG_DIR_LIST[$i]} done. !!"
    #first check screen_shot directory is exist or not ATUL SH.:
    if [ -d ${HAR_TR_SS_PATH} ];then 
      if [ "X$app" = "X.chrome" ];then
        debug_log "Move screen shots from ${HAR_PATH}/${HAR_LOG_DIR_LIST[$i]}/screen_shot to ${HAR_TR_SS_PATH}"
        mv ${HAR_PATH}/${HAR_LOG_DIR_LIST[$i]}/screen_shot/* ${HAR_TR_SS_PATH} 2>&1
      fi
    fi
    # Clean Har log directory for next iteration - (1) Remove all hidden temp .TRxxx and (2) Remove all left har files
    debug_log "Changing directory ${HAR_PATH}/${HAR_LOG_DIR_LIST[$i]}"
    cd ${HAR_PATH}/${HAR_LOG_DIR_LIST[$i]} >/dev/null 2>&1
    if [ $? -eq 0 ];then 
      debug_log "Removing all old .TRxx from path ${HAR_PATH}/${HAR_LOG_DIR_LIST[$i]}"
      rm -rf .TR* 2>&1
      rm -rf screen_shot >/dev/null 2>&1
      rm -rf clips >/dev/null 2>&1
    fi
    del_harf
  done

  #delete_har_files

  debug_log "HAR file moved to TestRun"
}

rename_har_file()
{
  debug_log "Renaming HAR files in path $HAR_PATH"

  num=${#HAR_LOG_DIR_LIST[*]}
  debug_log "num = $num"

  for((i = 1; i <= $num; i++ ))
  do
    cd ${HAR_PATH}/${HAR_LOG_DIR_LIST[$i]} 2>&1
    if  [ $? != 0 ]; then
      log_event_and_exit "Error in changing directory to $HAR_PATH/${HAR_LOG_DIR_LIST[$i]}. Check path $HAR_PATH/${HAR_LOG_DIR_LIST[$i]} is correct and have permisson"
    fi

    #OLD_HAR_FILE=`ls -ltr | tail -1 | grep -v ^d| grep ".har" | awk -F' ' '{print $9}'`
    OLD_HAR_FILE=`ls  *.har 2>/dev/null | tail -1`
    debug_log "OLD_HAR_FILE = $OLD_HAR_FILE"

    is_already_renamed=`echo $OLD_HAR_FILE | awk -F'_' '{print $1}'`
    if [ "X$is_already_renamed" != "XP" ];then
      mv $OLD_HAR_FILE P_$PAGE_NAME+${HAR_LOG_DIR_LIST[$i]}+$OLD_HAR_FILE
      #Narendra: seperating page name and prof name with +(following firebug convention)
      debug_log "HAR file $OLD_HAR_FILE renamed into P_$PAGE_NAME+${HAR_LOG_DIR_LIST[$i]}+$OLD_HAR_FILE"
    fi 
  done
}

NUM_URL_FILTERED_HAR_FILES=0
NUM_TITLE_FILTERED_HAR_FILES=0
filter_har_files_and_rename()
{
  debug_log "Method filter_har_files_and_rename() called, Pattern.... - URL = [$URL]"
  
  #If rename file not exist then should fail
  debug_log "Checking rename file $HAR_RENAME_INFO_FILE exist or not?"
  if [ ! -f $HAR_RENAME_INFO_FILE ];then
    ns_check_mon_fail_and_exit 
  fi
 
  debug_log "########### PWD = `pwd`" 
  URL_FILTERED_HAR_FILES=`grep -l -w "\"url\":.*\"$URL\"" *.har | grep -v "$HAR_RENAME_INFO_FILE" | awk -F"\n" '{printf $1" "}'` 
  debug_log "List of Har Files filtered by url $URL - [$URL_FILTERED_HAR_FILES]"

  NUM_URL_FILTERED_HAR_FILES=`echo $URL_FILTERED_HAR_FILES | awk -F' ' '{print NF}'`
  debug_log "NUM_HAR_FILE=$NUM_URL_FILTERED_HAR_FILES"

  if [ "X$NUM_URL_FILTERED_HAR_FILES" = "X" -o "X$NUM_URL_FILTERED_HAR_FILES" = "X0" ];then
    debug_log "Info: There is no url filtered har files so ignoring this pattern " 
    return
  fi

  debug_log "Pattern.... - PageTitle  = [$PageTitle]"

  TITLE_FILTERED_HAR_FILES=`grep -l -w "\"title\":.*\"$PageTitle\"" $URL_FILTERED_HAR_FILES | awk -F"\n" '{printf $1" "}'` 

  debug_log "List of Har Files filtered by page title $URL - [$TITLE_FILTERED_HAR_FILES]"

  NUM_TITLE_FILTERED_HAR_FILES=`echo $TITLE_FILTERED_HAR_FILES | awk -F' ' '{print NF}'`
  debug_log "#### Before - NUM_TITLE_FILTERED_HAR_FILES = $NUM_TITLE_FILTERED_HAR_FILES"
  if [ "X$NUM_TITLE_FILTERED_HAR_FILES" = "X" -o "X$NUM_TITLE_FILTERED_HAR_FILES" = "X0" ];then
    debug_log "Info: There is no page title filtered har files so ignoring this pattern " 
    return
  fi

  debug_log "After - NUM_TITLE_FILTERED_HAR_FILES = $NUM_TITLE_FILTERED_HAR_FILES"
  for ((j = 1; j <= $NUM_TITLE_FILTERED_HAR_FILES; j++))
  do
    HAR_FILE=`echo $TITLE_FILTERED_HAR_FILES | awk -F' ' -v idx=$j '{print $idx}'`
    is_already_renamed=`echo $HAR_FILE | awk -F'_' '{print $1}'`

    debug_log "Renaming HAR_FILE => $HAR_FILE,  is_already_renamed = $is_already_renamed"
    if [ "X$is_already_renamed" != "XP" ];then
      mv $HAR_FILE P_$PageName+${HAR_LOG_DIR_LIST[$i]}+$HAR_FILE
    elif [ "X$is_already_renamed" == "XP" ];then
      debug_log "Har files alredy renamed. So verifying renaming is correct or not"
      PageName_from_Har=`echo $HAR_FILE | awk -F'+' '{print $1}'`
      debug_log "Comparing: PageName_from_Har=$PageName_from_Har, PageName = P_$PageName"
      if [ "X$PageName_from_Har" != "XP_$PageName" ];then
        debug_log "Since Renaming is wrong so Again renaming it"
        R_HAR_FILE=`echo $HAR_FILE | sed "s/$PageName_from_Har/P_$PageName+${HAR_LOG_DIR_LIST[$i]}/g"`
        mv $HAR_FILE $R_HAR_FILE
        debug_log "After correction: HAR_FILE = $R_HAR_FILE"
      else
        debug_log "Renaming is correct."
      fi
    fi
  done
}

double_check_har_file_renaming()
{
  debug_log "Method double_check_har_file_renaming() Called"

  if [ ! -f $HAR_RENAME_INFO_FILE ];then
    ns_log_event "Warning: provided har renaming file $HAR_RENAME_INFO_FILE does not exist." 
    return
  fi

  while read line
  do
    #Ignore commented line
    echo $line | grep "^#" >/dev/null 2>&1 
    if [ $? -eq 0 ];then
      debug_log "Ignoring Line = $line"
      continue
    fi

    #Ignore blank line
    echo $line | grep "^$" >/dev/null 2>&1 
    if [ $? -eq 0 ];then
      debug_log "Ignoring Line = $line"
      continue
    fi

    debug_log "Processing line = $line"
    PageName=`echo $line | awk -F"_CAV_" '{print $1}'`
    PageTitle=`echo $line | awk -F"_CAV_" '{print $2}'`
    URL=`echo $line | awk -F"_CAV_" '{print $3}'`
    debug_log "PageName=[$PageName], PageTitle = [$PageTitle], URL=[$URL]"

    if [ "XX$PageName" = "XX" -o "XX$PageTitle" = "XX" -o "XX$URL" = "XX" ];then
      continue 
    fi

    filter_har_files_and_rename
  done < $HAR_RENAME_INFO_FILE
}

# This function will be called from netstorm 
# Return - size_of_har_file|har_file_name
#          Where-
#          size_of_har_file
#           -1      - if any error occured
#            0      - if desred har file not found
#            size   - if desird har file found
# Note - (1) done use any unnessary echo here as it used form Netstorm api
#        (2) In this function there is no debug because it called so many times from netstorm so there is al 
get_har_stats()
{
  # check har directory is made or not 
  mkdir -p ${HAR_PATH}/${HAR_LOG_DIR_LIST[1]}/.TR${MON_TEST_RUN} 2>/dev/null
  if  [ $? != 0 ]; then
    echo -n "-1|Error: in making directory ${HAR_PATH}/${HAR_LOG_DIR_LIST[$i]}/TR${MON_TEST_RUN}"
  fi

  #chmod 777 ${HAR_PATH}/${HAR_LOG_DIR_LIST[1]}/.TR${MON_TEST_RUN}
  #if [ $? != 0 ];then
  #  printf "-1|Error: command - chmod 777 ${HAR_PATH}/${HAR_LOG_DIR_LIST[1]}/.TR${MON_TEST_RUN} failed." 
  #fi

  cd ${HAR_PATH}/${HAR_LOG_DIR_LIST[1]} 2>/dev/null
  if [ $? != 0 ];then
    echo -n "-1|Error: command - cd ${HAR_PATH}/${HAR_LOG_DIR_LIST[1]} failed." 
  fi

  har_file=`ls  *.har 2>/dev/null | tail -1`
  if [ "XX$har_file" = "XX" ];then
    echo -n "0|not found"
    return
  fi


  #har_file_size=`stat --format=%s $har_file 2>/dev/null`
  har_file_size=`ls -l $har_file |cut -d ' ' -f5` 
  #if [ $? != 0 ];then
  if [ "X$har_file_size" = "X" ]; then
    #echo "Error: cmd - stat --format=%s $har_file failed."
    echo -n "-1|Error: command - ls -l $har_file failed."
    return
  fi

  echo -n "$har_file_size|$har_file"
}

page_id_first_har=""
onContentLoad_first_har=""
onLoad_first_har=""

page_id_second_har=""
onContentLoad_second_har=""
onLoad_second_har=""

st_ln=""
end_ln=""

first_har_file=""
second_har_file=""

inserted_file="inserted_har_data.dat"

get_start_and_end_line_num()
{
  file=$1
  
  debug_log "Setting start and end line for file $file"
  tot_ln=`grep -c . $file`

  st_ln=`grep -m 1 -n '"entries": \[' $file |cut -d':' -f1`
  st_ln=`expr $st_ln + 1`

  tmp_ln=`tail -10 $file | grep -n ']' |tail -1 |cut -d':' -f1`

  tmp_ln=`expr 11 - $tmp_ln`

  end_ln=`expr $tot_ln - $tmp_ln`
}
#If first file is empty then we will replace second har file from first one.
merge_get_har_stats()
{
  debug_log "merg_har_files(): Method called, File List - $1"
  

  first_har_file=`echo $1 | cut -d ',' -f1`
  second_har_file=`echo $1 | cut -d ',' -f2`


  # check har directory is made or not 
  mkdir -p ${HAR_PATH}/${HAR_LOG_DIR_LIST[1]}/.TR${MON_TEST_RUN} 2>/dev/null
  if  [ $? != 0 ]; then
    printf "-1|Error: in making directory ${HAR_PATH}/${HAR_LOG_DIR_LIST[$i]}/TR${MON_TEST_RUN}"
  fi

  cd ${HAR_PATH}/${HAR_LOG_DIR_LIST[1]} 2>/dev/null
  if [ $? != 0 ];then
    printf "-1|Error: command - cd ${HAR_PATH}/${HAR_LOG_DIR_LIST[1]} failed." 
  fi

  cp $first_har_file archive/$first_har_file.$PAGE_NAME 
  cp $second_har_file archive/$second_har_file.$PAGE_NAME 

  #check name of HAR file.
  host_name1=`echo $first_har_file | cut -d'+' -f1`
  host_name2=`echo $second_har_file | cut -d'+' -f1`

  debug_log "host_name1 = $host_name1, host_name2 = $host_name2"

  if [ "X$host_name1" != "X" -a "X$host_name2" != "X" ];then
    Hname=""
  elif [ "X$host_name1" != "X" ];then
    Hname=$host_name1
  elif [ "X$host_name2" != "X" ];then
    Hname=$host_name2
  else
    #In this case we found both har file hostname null hence setting default hostname
    Hname="www.default.com"
  fi

  debug_log "first_har_file = $first_har_file, second_har_file = $second_har_file, Hname = $Hname" 
  #check if pages not found or pages array is empty then in that case copy second file as first one.
  grep "\"pages\":\s*\[\s*$" $first_har_file >/dev/null 2>&1
  if [ $? -ne 0 ];then
    #just replace second har file with first one.
    if [ "X$Hname" = "X" ];then
      mv $second_har_file "$first_har_file"
      debug_log "Move second_har_file [$second_har_file] into [$first_har_file] and returning."
    else
      mv $second_har_file "$Hname$first_har_file"
      rm $first_har_file
      debug_log "Move second_har_file [$second_har_file] into [$Hname$first_har_file], remove first_har_file [$first_har_file] and returning."
    fi
    return
  fi

  
  #Get data required data form both files
  page_id_first_har=`grep '"id":' $first_har_file| cut -d '"' -f4`
  onContentLoad_first_har=`grep '"onContentLoad":' $first_har_file | awk -F": " '{print $2}' |cut -d ',' -f1`
  onLoad_first_har=`grep '"onLoad":' $first_har_file | awk -F": " '{print $2}' |cut -d ',' -f1`
  startRender_first_har=`grep '"_cav_startRender":' $first_har_file | awk -F": " '{print $2}' |cut -d ',' -f1`
  endRender_first_har=`grep '"_cav_endRender":' $first_har_file | awk -F": " '{print $2}' |cut -d ',' -f1`

  debug_log "Har: $first_har_file - page_id_first_har = [$page_id_first_har], onContentLoad_first_har = [$onContentLoad_first_har], onLoad_first_har = [$onLoad_first_har], startRender_first_har = [$startRender_first_har], endRender_first_har= [$endRender_first_har]"

  page_id_second_har=`grep '"id":' $second_har_file| cut -d '"' -f4`
  onContentLoad_second_har=`grep '"onContentLoad":' $second_har_file | awk -F": " '{print $2}' |cut -d ',' -f1`
  onLoad_second_har=`grep '"onLoad":' $second_har_file | awk -F": " '{print $2}' |cut -d ',' -f1`
  startRender_second_har=`grep '"_cav_startRender":' $second_har_file | awk -F": " '{print $2}' |cut -d ',' -f1`
  endRender_second_har=`grep '"_cav_endRender":' $second_har_file | awk -F": " '{print $2}' |cut -d ',' -f1`

  debug_log "Har: $second_har_file - page_id_second_har = [$page_id_second_har], onContentLoad_second_har = [$onContentLoad_second_har], onLoad_second_har = [$onLoad_second_har], startRender_second_har = [$startRender_second_har], endRender_second_har = [$endRender_second_har]" 

  if [ $onLoad_first_har -eq -1 ];then
    onLoad_first_har_lol=0
  else
    onLoad_first_har_lol=$onLoad_first_har
  fi

  if [ $onLoad_second_har -eq -1 ];then
    onLoad_second_har_lol=0
  else
    onLoad_second_har_lol=$onLoad_second_har
  fi

  #onContentLoad=`expr $onContentLoad_first_har + $onContentLoad_second_har`
  #onLoad=`expr $onLoad_first_har_lol + $onLoad_second_har_lol`
  #onLoad=$onLoad_second_har
  #Atul Bug :- 23768 
  if [ $onContentLoad_first_har -ge $onContentLoad_second_har  ];then
    onContentLoad=$onContentLoad_first_har
  else
    onContentLoad=$onContentLoad_second_har
  fi

  if [ $onLoad_first_har_lol -ge $onLoad_second_har_lol ];then
    onLoad=$onLoad_first_har_lol
  else
    onLoad=$onLoad_second_har_lol
  fi

  if [ $startRender_first_har -eq -1 ];then
    startRender=$startRender_second_har
  else
    startRender=$startRender_first_har
  fi

  if [ $endRender_first_har -eq -1 ];then
    endRender=$endRender_second_har
  else
    #we need end render id second har file in all case
    endRender=$startRender_second_har
  fi


  debug_log "Final - onContentLoad = [$onContentLoad], onLoad = [$onLoad], startRender = [$startRender], endRender = [$endRender]"

  debug_log "Replcing page id in second_har_file.............."
  sed -i "s/$page_id_second_har/$page_id_first_har/g" $second_har_file >/dev/null 2>&1

  get_start_and_end_line_num $second_har_file
  debug_log "Second Har File: start_line_num = [$st_ln], end_line_num = [$end_ln]"

  sed -n -e "$st_ln,$end_ln p" $second_har_file >$inserted_file
 
  get_start_and_end_line_num $first_har_file
  debug_log "First Har File: start_line_num = [$st_ln], end_line_num = [$end_ln]"

  debug_log "Replcing onContentLoad in first_har_file..............."
  sed -i "s/\"onContentLoad\": $onContentLoad_first_har/\"onContentLoad\": $onContentLoad/g" $first_har_file >/dev/null 2>&1

  debug_log "Replcing onLoad in first_har_file................."
  sed -i "s/\"onLoad\": $onLoad_first_har/\"onLoad\": $onLoad/g" $first_har_file >/dev/null 2>&1

  debug_log "Replcing startRender in first_har_file................."
  sed -i "s/\"_cav_startRender\": $startRender_first_har/\"_cav_startRender\": $startRender/g" $first_har_file >/dev/null 2>&1

  debug_log "Replcing endRender in first_har_file................."
  sed -i "s/\"_cav_endRender\": $endRender_first_har/\"_cav_endRender\": $endRender/g" $first_har_file >/dev/null 2>&1

  #now check if entries array is empty then just add second har files entries.
  #if st_ln is greate then end_ln that means 
  if [ $st_ln -gt $end_ln ];then
    #first replace "entries": [] --> "entries": [
    #and put ] to next line.
    sed -i 's/\"entries\":\s*\[\]/\"entries\": \[\n    ]/' $first_har_file >/dev/null 2>&1
    #increment end_ln by 1
    end_ln=$((end_ln + 1))
  else
    debug_log "Inserting }, in first at end"
    sed -i -e "$end_ln s/}/},/" $first_har_file >/dev/null 2>&1
  fi

  debug_log "Inserting data from second_har_file............"
  sed "$end_ln r $inserted_file" $first_har_file >mearged.har 2>/dev/null 
  
  debug_log "moving merged.har to first_har_file with Hname = [$Hname$first_har_file] and removing inserted_file =  [$inserted_file] and second_har_file = [$second_har_file]"
  if [ "X$Hname" = "X" ];then
    mv mearged.har $first_har_file >/dev/null 2>&1
    if [ $? -ne 0 ];then
      debug_log "Unable to Move mearged.har [$Hname$first_har_file]."
    else
      debug_log "Successfully Moved mearged.har to first_har_file with Hname = [$Hname$first_har_file]."
    fi
    rm $inserted_file $second_har_file
  else 
    mv mearged.har $Hname$first_har_file >/dev/null 2>&1
    if [ $? -ne 0 ];then
      debug_log "Unable to Move mearged.har [$Hname$first_har_file]."
    else
      debug_log "Successfully Moved mearged.har to first_har_file with Hname = [$Hname$first_har_file]."
    fi
    rm $inserted_file $second_har_file $first_har_file >/dev/null 2>&1
    if [ $? -ne 0 ];then
      debug_log "Unable to Remove inserted_file = [$inserted_file],second_har_file =[$second_har_file],first_har_file = [$first_har_file]"
    else
      debug_log "Successfully Removed inserted_file = [$inserted_file],second_har_file =[$second_har_file],first_har_file = [$first_har_file] and returning"
    fi
  fi
}

Usage()
{
  echo "$*"
  ns_log_event "Critical"  "Usage: chm_har_file  -o <operation> [-p <path>] [-D <debug levele>]"
  echo "Where:"
  echo "  -o: Operation to be done. Following operations are supported:"
  echo "      delete - Delete HAR files present in the specified path"
  echo "      moveToArchive - Move HAR files present in the specified path to archive path"
  echo "      moveToTRAsHarp - Move HAR files to harp_files directory in test run directory in HARP format"
  echo "  -p: Path of har files. Default is /home/netstorm/.mozilla/firefox/f9wetxpt.default/firebug/netexport/logs"
  echo "  -P: Page or Transaction name ex: HOME, Search etc.."
  echo "  -l: Log directory name where har files are accumulated by the browser"
  echo "  -f: Provide Har renaming information file, with absolute path"
  echo "  -D: option is to enable debug."
  ns_check_mon_fail_and_exit
}

set_env_var()
{
  debug_log "Method set_env_var() called"
  if [ "X$MON_NS_WDIR" == "X" ]; then
    ns_log_event "Critical" "MON_NS_WDIR is not set"
    ns_check_mon_fail_and_exit
  fi

  if [ "X$MON_TEST_RUN" == "X" ]; then
    ns_log_event "Critical" "MON_TEST_RUN is not set"
    ns_check_mon_fail_and_exit
  fi

# HAR_TR_PATH="${MON_NS_WDIR}/logs/TR${MON_TEST_RUN}/harp_files"
  if [ "X$PARTITION_ID" > "X0" ];then
    HAR_TR_PATH="${MON_NS_WDIR}/logs/TR${MON_TEST_RUN}/${PARTITION_ID}/rbu_logs/harp_files"
    HAR_TR_SS_PATH="${MON_NS_WDIR}/logs/TR${MON_TEST_RUN}/${PARTITION_ID}/rbu_logs/screen_shot"
    HAR_TR_CC_PATH="${MON_NS_WDIR}/logs/TR${MON_TEST_RUN}/${PARTITION_ID}/rbu_logs/snap_shots"
  else    
    HAR_TR_PATH="${MON_NS_WDIR}/logs/TR${MON_TEST_RUN}/rbu_logs/harp_files"
    HAR_TR_SS_PATH="${MON_NS_WDIR}/logs/TR${MON_TEST_RUN}/rbu_logs/screen_shot"
    HAR_TR_CC_PATH="${MON_NS_WDIR}/logs/TR${MON_TEST_RUN}/rbu_logs/snap_shots"
  fi
}

check_opt()
{
  #At least one operation must be exist
  if [ "X$OPERATION" = "X" ];then
    Usage "Operation i.e. -o option is manadatory." 
  fi
}

############################################################################################################
#                              -----: Function Calling :-----                                              #
############################################################################################################
if [ $# -eq 0 ];then
  Usage "Mandatory options missing."
fi

STANDALONE_MODE=0

while getopts o:p:D:P:l:f:t:sF:i:? arg
do
    case $arg in
        o) OPERATION=$OPTARG;;
        p) HAR_PATH=$OPTARG;;
        D) DEBUG=1;;
        P) PAGE_NAME=$OPTARG;;
        l) HAR_LOG_DIR=$OPTARG;;
        f) HAR_RENAME_INFO_FILE=$OPTARG;;
        t) MON_TEST_RUN=$OPTARG;;   #this option is only for netstorm because MON_TEST_RUN not set when called form netstorm
        s) STANDALONE_MODE=1;;
        F) MERGE_FILE_LIST=$OPTARG;;  #File list should be comma seperated (Assumption)
        i) PARTITION_ID=$OPTARG;;     #Partition id
        ?) Usage ;;
    esac
done

# Here We are taking  HAR_LOG_DIR and PROFILE_NAME same ,for validating the profile.
PROFILE_NAME=${HAR_LOG_DIR}
BROWSER_HOME=`dirname $HAR_PATH`

if [ "X$MON_TEST_RUN" != "X" ];then
  DEBUG_LOG_FILE="/tmp/chm_har_file_$MON_TEST_RUN.log"
fi

if [ "X$MON_NS_WDIR" == "X" ];then
  MON_NS_WDIR=$NS_WDIR
fi

debug_log "Monitor chm_har_file called: OPERATION = $OPERATION, HAR_PATH = $HAR_PATH, DEBUG = $DEBUG, PAGE_NAME = $PAGE_NAME, HAR_LOG_DIR = $HAR_LOG_DIR, MON_TEST_RUN = $MON_TEST_RUN"

#Check mandatory options
check_opt

app=`echo $HAR_PATH | cut -d'/' -f4`
debug_log "app=$app"

if [ "X$PARTITION_ID" == "X0" ];then
  PARTITION_ID=""
fi

debug_log "{PARTITION_ID}=${PARTITION_ID}"

#Must be set here as -p may override path

#Check if HAR_LOG_DIR list not given then we need to calculate it by itself.
if [ "X$HAR_LOG_DIR" == "X" ];then
  debug_log "Get har log dir list as not provided by user"
  #In this case MON_TEST_RUN will be given.
  if [ "X$MON_TEST_RUN" == "" ];then
    Usage "-l (log file directory list)and -t(testrun) both are missing "    
  fi
  #Check for .TR$MON_TEST_RUN dir in each file if found, we got the target.
  HAR_LOG_DIR_LIST_LOC=(`find $HAR_PATH -type d | grep ".TR"$MON_TEST_RUN | awk -F"/" -v "trnum=.TR${MON_TEST_RUN}" '{for(i=NF; i > 2; i--){if($i == trnum) print $(i-1)} }'|sort -u`)
  debug_log "HAR_LOG_DIR_LIST_LOC = [${HAR_LOG_DIR_LIST_LOC}]"
  num_har_dir=${#HAR_LOG_DIR_LIST_LOC[*]}
  debug_log "num_har_dir=$num_har_dir"
  for((i = 1; i <= $num_har_dir; i++))
  do
    HAR_LOG_DIR_LIST[$i]=${HAR_LOG_DIR_LIST_LOC[`expr $i - 1`]}
    debug_log "i = $i, HAR_LOG_DIR_LIST[$i] = ${HAR_LOG_DIR_LIST[$i]}"
  done

  if [ "X$PARTITION_ID" > "X0" ];then
    HAR_TR_PATH="${MON_NS_WDIR}/logs/TR${MON_TEST_RUN}/${PARTITION_ID}/rbu_logs/harp_files"
    HAR_TR_SS_PATH="${MON_NS_WDIR}/logs/TR${MON_TEST_RUN}/${PARTITION_ID}/rbu_logs/screen_shot"
    HAR_TR_CC_PATH="${MON_NS_WDIR}/logs/TR${MON_TEST_RUN}/${PARTITION_ID}/rbu_logs/snap_shots"
  else  
    HAR_TR_PATH="${NS_WDIR}/logs/TR${MON_TEST_RUN}/rbu_logs/harp_files"
    HAR_TR_SS_PATH="${NS_WDIR}/logs/TR${MON_TEST_RUN}/rbu_logs/screen_shot" 
    HAR_TR_CC_PATH="${NS_WDIR}/logs/TR${MON_TEST_RUN}/rbu_logs/snap_shots"   #for capture_clips
  fi

else
  num_har_dir=`echo $HAR_LOG_DIR | awk -F',' '{print NF}'`
  debug_log "num_har_dir=$num_har_dir"
  for((i = 1; i <= $num_har_dir; i++))
  do
    HAR_LOG_DIR_LIST[$i]=`echo $HAR_LOG_DIR | awk -F',' -v j=$i '{print $j}'`
    debug_log "i = $i, HAR_LOG_DIR_LIST[$i] = ${HAR_LOG_DIR_LIST[$i]}"
  done
fi

#Since this shell is called for both monitor and in c api ns_exbrowser_url and in c api we don't need to set MON_NS_WDIR and MON_TEST_RUN
if [ "X$OPERATION" != "XrenameHarFile" -a "X$OPERATION" != "XgetHarstats" -a "X$OPERATION" != "XmergeGetHarstats" -a "X$HAR_LOG_DIR" != "X" ];then
  set_env_var  
fi

debug_log "HAR_TR_PATH = $HAR_TR_PATH , HAR_TR_SS_PATH = $HAR_TR_SS_PATH , HAR_TR_CC_PATH = $HAR_TR_CC_PATH"

if [ "X$OPERATION" == "Xdelete" ]; then
  delete_har_files
elif [ "X$OPERATION" == "XmoveToArchive" ]; then
  archive_har_files
elif [ "X$OPERATION" == "XmoveToTRAsHarp" ]; then
  move_har_files_to_tr_as_harp
elif [ "X$OPERATION" == "XrenameHarFile" ]; then
  rename_har_file 
elif [ "X$OPERATION" == "XgetHarstats" ]; then
  get_har_stats 
elif [ "X$OPERATION" == "XmergeGetHarstats" ]; then
  merge_get_har_stats $MERGE_FILE_LIST
else
  Usage
fi

#Since this shell is called for both monitor and in c api ns_exbrowser_url and in c api we don't need use this function
if [ "X$OPERATION" != "XrenameHarFile" -a "X$OPERATION" != "XgetHarstats" -a "X$OPERATION" != "XmergeGetHarstats" -a "X$HAR_LOG_DIR" != "X" -a $STANDALONE_MODE -eq 0 ];then
  ns_check_mon_pass_and_exit
else
  exit 0
fi
