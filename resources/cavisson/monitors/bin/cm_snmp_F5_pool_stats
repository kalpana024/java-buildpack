#!/bin/bash
#Set CAV_MON_HOME, if not set
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi


#including this shell for the use of various global variables
. /opt/cavisson/monitors/bin/ns_check_monitor_func.sh


#Variable declaration
VECTOR_FLAG=0
VECTOR_PREFIX=""
INTERVAL_SECS=$MON_FREQUENCY
FILE_PATH=""
REM_URL=""
FILE_EXIST=0
BC_AVAILABLE=1
grep_pattern="prod"
pool_member_oid=".1.3.6.1.4.1.3375.2.2.5.3.2.1.19"
pool_member_verification_oid=".1.3.6.1.4.1.3375.2.2.5.3.2.1.1."
declare general_array
declare pool_member_array
declare pool_member_array_with_instance_final
declare pool_member_oid_array
declare -A pool_preserve_array
declare pool_member_array_curr
declare pool_member_array_with_instance_final_curr
declare pool_member_oid_array_curr
declare -A pool_preserve_array_curr
declare -A total_connection_basevalue
declare -A final_oid

declare data
declare stats_oid
stats_oid[0]=".1.3.6.1.4.1.3375.2.2.5.4.3.1.5."
stats_oid[1]=".1.3.6.1.4.1.3375.2.2.5.4.3.1.6."
stats_oid[2]=".1.3.6.1.4.1.3375.2.2.5.4.3.1.7."
stats_oid[3]=".1.3.6.1.4.1.3375.2.2.5.4.3.1.8."
stats_oid[4]=".1.3.6.1.4.1.3375.2.2.5.4.3.1.9."
stats_oid[5]=".1.3.6.1.4.1.3375.2.2.5.4.3.1.10."
stats_oid[6]=".1.3.6.1.4.1.3375.2.2.5.4.3.1.11."
stats_oid[7]=".1.3.6.1.4.1.3375.2.2.5.4.3.1.19."
stats_oid[8]=".1.3.6.1.4.1.3375.2.2.5.6.2.1.5."

index_of_total_connection_graph=5
OID_check_time_in_sec=1800

if [ "X$INTERVAL_SECS" = "X" ];then
  INTERVAL_SECS=10
fi
vector_prefix="noprefix"
community="klsnetd1agnost1cs"
version="2c"

generate_oids()
{
  index=0
  #Forming complete OID by parsing server oid and appending server OID to every stat OID and forming one final OID corresponding to one particular server. Each element of final_oid contains space seprated complete OID of every stat for particular server
  for ((i=0;i<${#pool_preserve_array_curr[@]};i++))
  do
    server_oid=`echo ${pool_preserve_array_curr[${pool_member_array_with_instance_final_curr[$i]}]}|cut -d'.' -f$no_of_given_fields-`
    for ((j=0;j<${#stats_oid[@]};j++))
    do
    final_oid[${pool_member_array_with_instance_final_curr[$i]}]=${final_oid[${pool_member_array_with_instance_final_curr[$i]}]}" "${stats_oid[$j]}$server_oid
    done
  done
}

show_data()
{
    index=0
    #Running snmpget fpor every member of final OID and parsing output to show it in standard format
    for ((i=0;i<${#pool_preserve_array_curr[@]};i++))
    do
     data[0]=""
      data=($(snmpget -Os -Ot -OQ -Oe -v $version -c $community $F5_server_ip ${final_oid[${pool_member_array_with_instance_final_curr[$i]}]} 2>/dev/null|cut -d'=' -f2| tr -d ' ' |tr '\n' ' '|sed 's/NoSuchObjectavailableonthisagentatthisOID/0/g'))
      if [ "X${data[0]}" == "X" ];then
        for ((j=0;j<${#stats_oid[@]};j++))
        do
          data[j]=0
        done
      else
        if [ "X${total_connection_basevalue[${pool_member_array_with_instance_final_curr[$i]}]}" == "X" ];then
          total_connection_basevalue[${pool_member_array_with_instance_final_curr[$i]}]=${data[$index_of_total_connection_graph]}
          continue
        fi
        data[$index_of_total_connection_graph]=`expr ${data[$index_of_total_connection_graph]} - ${total_connection_basevalue[${pool_member_array_with_instance_final_curr[$i]}]} `
      fi
      #echo "$i:${pool_member_array_with_instance_final_curr[$i]}|${data[@]}"
      echo "${pool_member_array_with_instance_final_curr[$i]}|${data[@]}"
    done
}
#Run snmpwalk for fething OID, extract server name 
fetch_oids()
{
  #Run snmpbulkwalk for fetching OID and corresponding server names. Create array to store
  #index - breadcrumb mapping & breadcrumb- oid mapping array.
  general_array=($(snmpbulkwalk $F5_server_ip -c $community -v $version $pool_member_oid 2>/dev/null|grep -i "$grep_pattern"| sort -k 3|sed 's/ \+/|/g'))
  #parsing OID from output of snmpbulkwalk
  pool_member_oid_array=($(printf "%s\n" "${general_array[@]}"| tr '|' ' '|cut -d'=' -f1))
  #parsing server name from output of snmpbulkwalk
  pool_member_array=($(printf "%s\n" "${general_array[@]}"| tr '|' ' '|cut -d':' -f2| tr -d '"'))

  index=0
  if [ "X$vector_prefix" == "Xnoprefix" -o "X$vector_prefix" == "X" ];then
    for ((i=0;i<${#pool_member_array[@]};i++))
    do
      pool_member_name=`basename ${pool_member_array[$i]}`
      pool_tier=`echo $pool_member_name | cut -d '_' -f1-2 `
      pool_server=`echo $pool_member_name | cut -d '_' -f3`
      port=`echo ${pool_member_oid_array[$i]##*.}`
      pool_member_array_with_instance="$pool_tier${MON_VECTOR_SEPARATOR}$pool_server${MON_VECTOR_SEPARATOR}$port"
      if [ "X${pool_preserve_array[$pool_member_array_with_instance]}" != "X" ];then
        server_oid=`echo ${pool_preserve_array[$pool_member_array_with_instance]} |cut -d'.' -f$no_of_given_fields-`
        cmd="snmpget -Os -Ot -OQ -Oe -v $version -c $community $F5_server_ip $pool_member_verification_oid$server_oid"
        $cmd 2>/dev/null | grep "test" >/dev/null 2>&1
        if [ $? -eq 0 ];then 
          pool_preserve_array[$pool_member_array_with_instance]=${pool_member_oid_array[$i]}
        fi
        continue
      fi
      pool_member_array_with_instance_final[$index]=$pool_member_array_with_instance
      pool_preserve_array[${pool_member_array_with_instance_final[$index]}]=${pool_member_oid_array[$i]}
      index=`expr $index + 1`
    done
  else
    for ((i=0;i<${#pool_member_array[@]};i++))
    do
      pool_member_name=`basename ${pool_member_array[$i]}`
      pool_tier=`echo $pool_member_name | cut -d '_' -f1-2 `
      pool_server=`echo $pool_member_name | cut -d '_' -f3`
      port=`echo ${pool_member_oid_array[$i]##*.}`
      pool_member_array_with_instance="$vector_prefix${MON_VECTOR_SEPARATOR}$pool_tier${MON_VECTOR_SEPARATOR}$pool_server${MON_VECTOR_SEPARATOR}$port"
      if [ "X${pool_preserve_array[$pool_member_array_with_instance]}" != "X" ];then
        server_oid=`echo ${pool_preserve_array[$pool_member_array_with_instance]} |cut -d'.' -f$no_of_given_fields-`
        cmd="snmpget -Os -Ot -OQ -Oe -v $version -c $community $F5_server_ip $pool_member_verification_oid$server_oid"
        $cmd 2>/dev/null | grep "test" >/dev/null 2>&1
        if [ $? -eq 0 ];then
          pool_preserve_array[$pool_member_array_with_instance]=${pool_member_oid_array[$i]}
        fi
        continue
      fi
      pool_member_array_with_instance_final[$index]=$pool_member_array_with_instance
      pool_preserve_array[${pool_member_array_with_instance_final[$index]}]=${pool_member_oid_array[$i]}
      index=`expr $index + 1`
    done
  fi
}

compare_oids()
{
  #Comparing OID to check whether there is a case of OID chage to avoid the lose of data
  for ((i=0;i<${#pool_member_array_with_instance_final[@]};i++))
  do
    #if OIDs change copy the curring OIDs to fetch the data from new OIDs
    if [ ${pool_preserve_array[${pool_member_array_with_instance_final[$i]}]} != ${pool_preserve_array_curr[${pool_member_array_with_instance_final[$i]}]} ];then
      #echo "snmp_req_cmd=snmp_monitor_request"
      copy_arrays
      generate_oids
      break
    fi
  done
}

#Copy pool_preserve array to pool_preserver_array_curr. Current array is the latest OID fetched. Current array
#will be compared with previos array for change in OID.
copy_arrays()
{
  #copying new array to working array
  pool_member_array_with_instance_final_curr=($(echo ${pool_member_array_with_instance_final[@]}))
  pool_member_oid_array_curr=($(echo ${pool_member_oid_array[@]}))
  for ((i=0;i<${#pool_member_array_with_instance_final_curr[@]};i++))
  do
    pool_preserve_array_curr[${pool_member_array_with_instance_final_curr[$i]}]=${pool_preserve_array[${pool_member_array_with_instance_final_curr[$i]}]}
  done
}

while getopts v:p:L:X:c:s:V:t:? arg
do
  case $arg in
  v) VECTOR_FLAG=1
     vector_prefix=$OPTARG
	;;
  s) F5_server_ip=$OPTARG
	;;
  L) if [ "X$OPTARG" = "Xheader" -o "X$OPTARG" = "XHEADER" ];then
         VECTOR_FLAG="1"
     fi
        ;;
  X) vector_prefix=$OPTARG
        ;;
  c) community=$OPTARG
	;;
  V) version=$OPTARG
	;;
  t) OID_check_time_in_sec=$OPTARG
	;;
  p) grep_pattern=$OPTARG
	;;
  *) echo "Invalid arguments";;
  ?) echo "Invalid arguments";;
  esac
done

if [ "X$F5_server_ip" = "X" ];then
  echo "-s is mandatory arguments"
  exit -1
fi

no_of_given_fields=`echo $pool_member_oid |awk -F'.' '{print NF}'`
fetch_oids
copy_arrays

if [ $VECTOR_FLAG -eq 1 ];then
  #show vector list
  #for ((i=0;i<${#pool_member_array_with_instance_final_curr[@]};i++))
  #do
  #  echo -n "$i:${pool_member_array_with_instance_final_curr[$i]} "
  #done
  echo ${pool_member_array_with_instance_final_curr[@]}
  #echo ""
else
  #show_data
  #initialize basevalue array to empty "". This will be used to calulate totalconnection. Total connection value
  # is very high value. First sample will be taken as base value.
  for ((i=0;i<${#pool_member_array_with_instance_final_curr[@]};i++))
  do
    total_connection_basevalue[${pool_member_array_with_instance_final_curr[$i]}]=""
  done
  oid_check_interval=`expr $OID_check_time_in_sec / $INTERVAL_SECS `
  check_count=0
  generate_oids
  while :
  do
    START=`date +%s.%3N`
    show_data
    check_count=`expr $check_count + 1`
    if [ $check_count -ge $oid_check_interval ];then
      fetch_oids
      compare_oids
      check_count=0
    fi
    END=`date +%s.%3N`
    #if time diff is less than the time interval then sleep for the remaining time
    if [ $BC_AVAILABLE -eq 1 ];then
	TIME_DIFF=`echo "$END - $START"|bc`
	if [[ $(echo $TIME_DIFF '<' $INTERVAL_SECS | bc -l) -eq 1 ]];then
	  SLEEP_TIME=`echo "$INTERVAL_SECS - $TIME_DIFF" |bc`
	  sleep $SLEEP_TIME
	fi
    else
	TIME_DIFF=`awk -v "var1=$END" -v "var2=$START" 'BEGIN{printf "%.3f", (var1-var2)}'`
        TIME_FLAG=`echo |awk -v n1=$TIME_DIFF -v n2=$INTERVAL_SECS  '{if (n1<n2) printf("1"); else printf("0");}'`
        if [ $TIME_FLAG -eq 1 ]; then
          SLEEP_TIME=`awk -v "var1=$INTERVAL_SECS" -v "var2=$TIME_DIFF" 'BEGIN{printf "%.3f", (var1-var2)}'`
          sleep $SLEEP_TIME
        fi
    fi
  done
fi
