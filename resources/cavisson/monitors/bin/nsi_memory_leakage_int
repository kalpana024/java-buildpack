#!  /bin/sh
# Name    : nsi_memory_leakage_int
# Purpose : To print object summary of jrcmd command
#
# Return  : On success  - 0
#           On failure  - 1(exit 1 is supported in all the machines.)
# 
# Modification: 
#
# 
DEBUG=0
JRCMD=$JAVA_HOME/bin/jmap
OS_NAME=`uname`
TRNUM=NA		   ## Default Value of Test Run Number = NA.
USERNAME=NA		   ## Default Value of Username = NA.
INSTANCE=NA		   ## Default Value of Instance = NA.
WAIT=300                   ## Default value of Wait time = 300 seconds.
CHECK_TIME=2  		   ## Default Value of Check wait time = 2 seconds.
HEAP_FILTER_PERCENT=0.1    ## Default Value of Heap Percentage.
#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d $HOME/cavisson/monitors ];then
    CAV_MON_HOME=$HOME/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit 1
  fi
fi

export CAV_MON_HOME

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh
#. $CAV_MON_HOME/bin/func.sh

MEMLEAK_TEMP_FILENAME="$CAV_MON_HOME/logs/nsi_memory_leakage_int.out.$$"	##Temporary file to store the command output.
              
cleanup()
{
  rm -f $MEMLEAK_TEMP_FILENAME
}

debug_log()
{
  if [ $DEBUG -ne 0 ]; then
    echo "`date +'%F %X'`|$*" >>$DEBUG_LOG_FILE
  fi
}

error_log()
{
  ns_log_event "Major" "$*"
  echo "`date +'%F %X'`|$*" >>$ERROR_LOG_FILE
}

error_log_and_console_exit()
{
  echo "Error in getting Memory Usage Information due to following error:"
  echo "$*"
  cleanup
  exit 1
}

error_log_and_console()
{
  echo "$*"
}

set_debug_log_file()
{
  if [ "XX$CAV_MON_HOME" != "XX" ];then
    DEBUG_LOG_FILE="$CAV_MON_HOME/logs/nsi_memory_leakage_int_debug.log"
    ERROR_LOG_FILE="$CAV_MON_HOME/logs/nsi_memory_leakage_int_error.log"
  else
    DEBUG_LOG_FILE="$CAV_MON_TMP_DIR/nsi_memory_leakage_int_debug.log"
    ERROR_LOG_FILE="$CAV_MON_TMP_DIR/nsi_memory_leakage_int_error.log"
    debug_log "CAV_MON_HOME is not exported, putting logs to /tmp/."
  fi
}

display_help_and_exit()
{
  echo "Incorrect usage. $*"
  error_log_and_console "Usage: nsi_memory_leakage -p <pid> [-t <test run number> -u <username> -i <instance> -f <integer value to filter heap %> -D ] "
  
  error_log_and_console "  -t: option to specify the test run number."
  error_log_and_console "  -p: option to specify the pid of the process."
  error_log_and_console "  -u: option to specify the username."
  error_log_and_console "  -i: option to specify the instance."
  error_log_and_console "  -f: option to specify the integer value to filter heap percent."
  error_log_and_console "  -w: option to specify wait time in secs. Default is 300 seconds." 
  error_log_and_console "  -D: option is to enable debug."

  cleanup

  exit 1

}
memory_run_command_with_wait()
{
  LOC_RUN_CMD=$1
  LOC_CMD_OUT_FILE=$2
  LOC_WAIT_TIME=$3
  LOC_CHECK_TIME=$4

  debug_log "Running command $LOC_RUN_CMD. Output file = $LOC_CMD_OUT_FILE, Wait Time = $LOC_WAIT_TIME, Check Time = $LOC_CHECK_TIME"

  nohup $LOC_RUN_CMD > $LOC_CMD_OUT_FILE 2>&1 &
  #Save exit status
  EXIT_STATUS=$?

  #Get pid of the command
  CMD_PID=$!

  #Note - nohup exit status is baed on whether is was able to run the command or not. Command exit status is not returned
  if [ $EXIT_STATUS != 0 ]; then
    error_log_and_console "Error in running command $LOC_RUN_CMD. Exit status = $EXIT_STATUS"
    rm -f $LOC_CMD_OUT_FILE
    exit $EXIT_STATUS
  fi

  LOC_TOTAL_TIME=0
  debug_log "Command started OK. Going to wait for the command to complete with wait time of $LOC_WAIT_TIME seconds"
  while [ $LOC_TOTAL_TIME -lt $LOC_WAIT_TIME ];
  do
    ps -p $CMD_PID >/dev/null 2>&1
    if [ $? != 0 ]; then
      #Wait is used to get the exit status of the command as nohup does not give this
      wait $CMD_PID
      EXIT_STATUS=$?
      if [ $EXIT_STATUS != 0 ]; then
        error_log_and_console "Error in running command $LOC_RUN_CMD. Exit status = $EXIT_STATUS"
        cat $LOC_CMD_OUT_FILE
        rm -f $LOC_CMD_OUT_FILE
        exit $EXIT_STATUS
      fi
      debug_log "Command is over with success status"
      cat $LOC_CMD_OUT_FILE
      break
    fi
    LOC_TOTAL_TIME=`expr $LOC_TOTAL_TIME + 1`
    debug_log "Command is still running with PID $CMD_PID. Sleeping for $LOC_CHECK_TIME seconds. Total wait time so far is $LOC_TOTAL_TIME"
    sleep $LOC_CHECK_TIME
  done

  if [ $LOC_TOTAL_TIME -ge $LOC_WAIT_TIME ]; then
    #Killing hanging command
    kill -9 $CMD_PID
    error_log_and_console_exit "Error in getting output of command in maximum wait time of $LOC_WAIT_TIME seconds"
    rm -f $LOC_CMD_OUT_FILE
  fi

  debug_log "Total time taken by command to execute = $LOC_TOTAL_TIME seconds."
}

memory_leakage()
{
  debug_log "Running command for pid $PROCESS_ID."

  memory_run_command_with_wait "$JRCMD -histo $PROCESS_ID" $MEMLEAK_TEMP_FILENAME $WAIT $CHECK_TIME
 

   ### Get line no of starting line. ###
  #STARTPHRASE=`grep -n "Detailed Heap Statistics:" $MEMLEAK_TEMP_FILENAME | cut -d":" -f1`
  #if [ "XX$STARTPHRASE" = "XX" ]; then
  #  error_log_and_console_exit "Error: Detailed heap statistics are not found." 
  #  cleanup 
  #fi

  #STARTPHRASE=`expr $STARTPHRASE + 1`
  #debug_log "STARTPHRASE is at $STARTPHRASE."


  ### Get the line no of ending line. ###
  #ENDPHRASE=`grep -n "End of Detailed Heap Statistics" $MEMLEAK_TEMP_FILENAME | cut -d":" -f1`
  #if [ "XX$ENDPHRASE" = "XX" ]; then
  #  error_log_and_console_exit "Error: Heap statistics not found."
  #  cleanup
  #fi

  #ENDPHRASE=`expr $ENDPHRASE - 1`
  #debug_log "ENDPHRASE is at $ENDPHRASE."


  ### Extraction of desired data between "Detailed Heap Statistics" and "End of Detailed Heap Statistics". ###
  ### Output will be pipe separated. ###
  # Using sed extract lines neeed,
  # Filter the data using "%" as every required data is having '%'. 
  # Sort using first field as key in numeric 
  # Filter lines with percentage > HEAP using awk
  # Convert the data in columns.
  # Replace the '+' by white space and delete the first 3 lines. 
  #Example of input line
  #0.0% 0k        1     +0k sun/reflect/GeneratedConstructorAccessor14
  #Example of output line of this code
  #0.0%|0k|1|+0k|sun/reflect/GeneratedConstructorAccessor14
  #debug_log "Data extraction started."
  #sed -n "$STARTPHRASE,$ENDPHRASE p" $MEMLEAK_TEMP_FILENAME | sort -k1n | awk -v n=$HEAP_FILTER_PERCENT '$1 >= n' | column -t | sed -e 's/ \+/ /g' -e '/^$/d' -e '1,3 d'| tr ' ' '|'
  
  #if [ $? != 0 ]; then
  #  debug_log "Data extraction failed."
  #  cleanup
  #else
  #  debug_log "Data extracted successfully."
  #fi

}

# this method will take pattern list 
#Pattern: lib_kill_ps_tree_by_pattern <function name> <shell name> <user_name> <process_id>
# Eg :- lib_kill_ps_tree_by_pattern <nsi_memory_leakage_int> <nsi_memory_leakage_int> <root> <1345>

check_and_kill_prev_hanging_cmd()
{
  lib_kill_ps_tree_by_pattern "nsi_memory_leakage_int" "nsi_memory_leakage_int" "\"\-u $USERNAME\"" "\"\-p $PROCESS_ID\""
}

###########################################################################################################################################


while getopts t:p:u:i:f:w:D? arg
do
  case $arg in
    t) TRNUM=$OPTARG;;
    p) PROCESS_ID=$OPTARG;;
    u) USERNAME=$OPTARG;;
    i) INSTANCE=$OPTARG;;
    f) HEAP_FILTER_PERCENT=$OPTARG;;
    w) WAIT=$OPTARG;;
    D) DEBUG=1;;
    ?) display_help_and_exit "Invalid argument passed" ;;
  esac
done
if [ $DEBUG -ne 0 ]; then
  set_debug_log_file
fi


if [ "X$PROCESS_ID" = "X" ];then
 display_help_and_exit "Mandatory argument Process id is missing"
fi


if [ !  -f $JRCMD ]; then
  error_log_and_console_exit "No java command available in $JAVA_HOME for memory leak operations."
fi

check_and_kill_prev_hanging_cmd
memory_leakage

cleanup

exit 0

