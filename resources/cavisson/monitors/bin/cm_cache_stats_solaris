################################################################################
# Name    : cm_cache_stats_solaris  
# Purpose : This is a dynamic monitor to get data from wget command 
#           /usr/sfw/bin/wget --http-user=admin --http-pasword=k0hls123 http://192.168.211.8:15010/dyn/admin/nucleus/atg/registry/ContentRepositories/CustomProductCatalog/
#           It parses output of above command
# Option  : 'Run Once'
# GDF     : cm_cache_stats_solaris.gdf in netstorm machine ($NS_WDIR/sys)
# Keyword :
#           DYNAMIC_VECTOR_MONITOR 192.168.147.171 Orace_cahce_vector cm_cache_stats_solaris.gdf 2 cm_cache_stats_solaris -i 10 -u user_name -p password -h "www.eee.cn/jk-state" -j ALL EOC cm_cache_stats_solaris -u user_name -p password -h "www.eee.cn/jk-state" -v NS_Cache_ 
#                                  OR
#           CUSTOM_MONITOR 192.168.147.171 cm_cache_stats_solaris.gdf Orace_cahce_vector 2 cm_cache_stats_solaris -i 10 -u user_name -p password -h "www.eee.cn/jk-state" -j catalog cache-mode 
#
# Return  : On success  - 0
#           On failure  - 1
# Date    : April 2016 
###############################################################################

if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit 1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

set_mon_shell

PID=$$
RUNTIME_FILE=$CAV_MON_TMP_DIR/cm_cache_stats_solaris_$PID.rt
CACHE_STATUS_OUT_FILE=$CAV_MON_TMP_DIR/cm_cache_stats_solaris_file_$PID.out
DEBUG_LOG_FILE=$CAV_MON_TMP_DIR/cm_cache_stats_solaris_$PID.log
USER_NAME=""
PASSWORD=""
ITEMS="ALL"
NUM_VECTOR="1"
DEBUG=0
INTERVAL_SECS=$MON_FREQUENCY
i=0
instance=""

debug_log()
{
  if [ "X$DEBUG" = "X0" ]; then
    return
  else
    #echo "Debug: $*" 
    #echo "Debug: $*" >> $DEBUG_LOG_FILE
    echo "`date +'%F %X'`|$*" >> $DEBUG_LOG_FILE
  fi
}

calculate_num_vectors()
{
  debug_log "calculate_num_vectors Method Called."

  if [ "X$ITEMS" != "XALL" ];then
    NUM_VECTOR=`echo $ITEMS | $AWK_CMD -F',' '{print NF}'`
    if [ "X$NUM_VECTOR" = "X" ];then
      display_help_and_exit "Please provide at least on item name" 
    fi
  else 
    NUM_VECTOR=`grep "item-descriptor" $CACHE_STATUS_OUT_FILE | wc -l`
  fi

  debug_log "Total NUM_VECTOR = $NUM_VECTOR"

  #If there is no vector available 
  if [ "X$NUM_VECTOR" = "X" ];then
    ns_log_event "Critical" "No vector is found so Exiting!" 
    exit 1
  fi
}

run_cmd()
{
  debug_log "run_cmd Method called."
  #curl http://${URL} >/dev/null 2>&1 >$RUNTIME_FILE

  PROTOCOL_PART=`echo ${URL} | $AWK_CMD -F'://' '{print $1}'` 
  URL_PART=`echo ${URL} | $AWK_CMD -F'://' '{print $2}'` 

  #If protocol not given then default will be http
  if [ "X$PROTOCOL_PART" = "X" ];then
    PROTOCOL_PATR="http"
  fi

  #If url part not found then it given url 
  if [ "X$URL_PART" = "X" ];then
    URL_PATR=$URL
  fi

  debug_log "PROTOCOL_PART = $PROTOCOL_PART, URL_PART = $URL_PART"

  # For testing
  #wget $PROTOCOL_PART://$URL_PART -O $RUNTIME_FILE 2>/dev/null

  /usr/sfw/bin/wget --http-user=$USER_NAME --http-password=$PASSWORD $PROTOCOL_PART://$URL_PART -O $RUNTIME_FILE 2>/dev/null
  if [ $? != 0 ];then
    ns_log_event "Critical" "Running command '/usr/sfw/bin/wget --http-user=$USER_NAME --http-password=$PASSWORD $PROTOCOL_PART://$URL_PART -O $RUNTIME_FILE' failed."
    is_cmd_failed=1  
    return 1
  else
    is_cmd_failed=0 
  fi

  sed -e '/item-descriptor/,/<\/tr>/!d' $RUNTIME_FILE >$CACHE_STATUS_OUT_FILE
}

#Content of file CACHE_STATUS_OUT_FILE...
# 	localEntries 	externEntries 	weakEntries 	localCacheSize 	usedRatio 	totalHits 	totalMisses 	ratio 	localHits 	localMisses 	externalHits 	externalMisses 	weakHits 	weakMisses 	cacheInvalidations 	entryInvalidations 	localCulls 	localItemsCulled 	localMaxCulled 	weakCulls 	weakItemsCulled 	weakMaxCulled
#item-descriptor=catalog cache-mode=simple cache-locality=local
#Items	1 	0 	0 	50 	2.0% 	72367 	2 	100.0% 	72367 	2 	0 	0 	0 	2 	0 	0 	0 	0 	0 	8 	0 	0
#Queries	1 	n/a 	n/a 	50 	2.0% 	0 	1 	n/a 	n/a 	n/a 	n/a 	n/a 	n/a 	0.0% 	0 	0 	n/a 	n/a 	n/a 	n/a 	n/a 	n/a
#item-descriptor=category cache-mode=simple cache-locality=local
#Items	1000 	0 	7 	1000 	100.0% 	3324 	4134 	44.57% 	3309 	4149 	0 	0 	15 	4134 	0 	0 	1082 	1082 	1 	15 	1029 	446
#Queries	0 	n/a 	n/a 	1000 	0.0% 	0 	0 	n/a 	n/a 	n/a 	n/a 	n/a 	n/a 	0.0% 	0 	0 	n/a 	n/a 	n/a 	n/a 	n/a 	n/a
#item-descriptor=category-info cache-mode=simple cache-locality=local
#Items	0 	0 	0 	1000 	0.0% 	0 	0 	0.0% 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	0 	8 	0 	0

load_data()
{
  debug_log "load_data Method Called."

  run_cmd
  
  #Check whether number of vector is less or greater than vector list
  NVector=`grep "item-descriptor" $CACHE_STATUS_OUT_FILE | wc -l`
  if [ $NVector -lt $NUM_VECTOR ];then 
    echo "Warrning: Number of vector is mismatched form vector calulated in operation show vector and show data" 
    exit 1
  fi

  debug_log "##NUM_VECTOR = $NUM_VECTOR"
  for(( i = 1; i <= $NUM_VECTOR; i++))
  do
    debug_log "@@@@@@@ i = $i, j = $j, num_fields = $num_fields"
    debug_log "Loading data for Vector = [${vector_list_array[$i]}]"

    #Making data line
    #We have total 22 fields per items but we are intrested in only 19 fields
    #<th>Items</th>                Fields Header                   
    # 0   <td>1</td>               localEntries
    # 1   <td>0</td>               externEntries          
    # 2   <td>0</td>               weakEntries
    # 3   <td>50</td>              localCacheSize
    # 4   <td>2.0%</td>            usedRatio
    # 5   <td>72367</td>           totalHits
    # 6   <td>2</td>               totalMisses 
    # 7   <td>100.0%</td>          ratio 
    # 8   <td>72367</td>           localHits
    # 9   <td>2</td>               localMisses
    # 10  <td>0</td>               externalHits
    # 11  <td>0</td>               externalMisses
    # 12  <td>0</td>               weakHits
    # 13  <td>2</td>               weakMisses
    # 14  <td>0</td>               cacheInvalidations
    # 15  <td>0</td>               entryInvalidations
    # 16  <td>0</td>               localCulls
    # 17  <td>0</td>               localItemsCulled
    # 18  <td>0</td>               localMaxCulled
    # 19  <td>8</td>               weakCulls
    # 20  <td>0</td>               weakItemsCulled
    # 21  <td>0</td>               weakMaxCulled

    data_line=`sed -e "/item-descriptor=${vector_list_array[$i]} /,/<\/tr>/!d" $CACHE_STATUS_OUT_FILE | tail -23 | $AWK_CMD -F'<td>' '{print $2}' | $AWK_CMD -F'</td>' '{printf $1" "}'`
    #data_line = 1 0 0 50 2.0% 72367 2 100.0% 72367 2 0 0 0 2 0 0 0 0 0 8 0 0 

    #If data is not available for anyy vector then fill 0 for that vector
    if [ "X$data_line" = "X" ];then
      ns_log_event "Major" "Data for vector ${vector_list_array[$i]} is not availabe."
      echo "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
      continue
    fi
  
    #This is new format
    #echo $data_line | $AWK_CMD -F'%' '{printf $1" "$2" "$3" "}' | $AWK_CMD -F' ' -v vct=${vector_list_array[$i]} '{print vct"|"$1" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "10" "13" "14" "15" "16" "17" "18" "19" "20" "$21" "$22}'
    echo -n "${vector_list_array_with_prefix[$i]}|" 
    echo $data_line | $AWK_CMD -F'%' '{printf $1" "$2" "$3" "}' | $AWK_CMD -F' ' '{print $1" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "$10" "$13" "$14" "$15" "$16" "$17" "$18" "$19" "$20" "$21" "$22}'
    
  done 
}

load_vectors()
{
  debug_log "load_vectors Method called."
  
  run_cmd
  calculate_num_vectors

  if [ "X$ITEMS" != "XALL" ];then
    vector_list=$ITEMS 
  else
    #making space seperated vector list like..
    #vector_list=catalog category category-info product product-info sku sku-info genericFolder
    vector_list=`grep "item-descriptor" $CACHE_STATUS_OUT_FILE | $AWK_CMD -F'item-descriptor=' '{print $2}' | $AWK_CMD -F' cache-mode=' '{printf $1","}'`
  fi

  debug_log "Parse vectors of vector list: NUM_VECTOR = $NUM_VECTOR, vector_list = $vector_list" 
  for((i = 1; i <= $NUM_VECTOR; i++))
  do
    vector_list_array[$i]=`echo $vector_list | $AWK_CMD -F',' -v j=$i '{print $j}'`
    vector_list_array_with_prefix[$i]=$i":"$instance$MON_VECTOR_SEPARATOR$i"_"`echo ${vector_list_array[$i]} | sed 's/ /_/g' | sed 's/_-_/_/g'`
    debug_log "vector_list_array[$i] = ${vector_list_array[$i]}" 
    debug_log "vector_list_array_with_prefix[$i] = ${vector_list_array_with_prefix[$i]}" 
  done

  debug_log "Loaded Vectors: without prefix - ${vector_list_array[@]}"
  debug_log "Loaded Vectors: with prefix - ${vector_list_array_with_prefix[@]}"
  
  #Removing CACHE_STATUS_OUT_FILE and RUNTIME_FILE 
  debug_log "Removing files - $CACHE_STATUS_OUT_FILE $RUNTIME_FILE"
  rm -f $CACHE_STATUS_OUT_FILE $RUNTIME_FILE
}

show_vectors()
{
  debug_log "show_vectors Method Called."
  debug_log "Show vectors: ${vector_list_array_with_prefix[@]}"

  echo ${vector_list_array_with_prefix[@]}
}

show_data()
{
  nohup $UNIX_SHELL nsi_kill_child_of_monitors -p $PID -i 10 -f "$CACHE_STATUS_OUT_FILE $RUNTIME_FILE" 2>/dev/null&

  while true
  do
    load_data

    # Test is over. So exit with success status
    isTestOver $MON_TEST_RUN
    if [ $? = 1 ]; then
      exit 0
    fi

    lib_sleep $INTERVAL_SECS
  done
}

check_mandatory_options()
{
  debug_log "Method check_mandatory_options called"
  
  if [ "X$USER_NAME" = "X" ];then
    display_help_and_exit "User Name is mandatory"
  fi

  if [ "X$PASSWORD" = "X" ];then
    display_help_and_exit "Password is mandatory"
  fi

  if [ "X$URL" = "X" ];then
    display_help_and_exit "Url is mandatory"
  fi
 
   if [ "X$instance" = "X" ]; then
     display_help_and_exit "instance field is mandatory"
   fi
}

display_help_and_exit()
{
  echo "Error: $1"
  echo "Incorrect Usage!"
  echo "Usage:"
  echo ""
  echo "cm_cache_stats_solaris -I <comma seperated item list | ALL> -u <user_name> -p <password>  -h <host> [-i <Interval>] -v <vector_prefix> [-D] -n <instance>" 
  echo "Where - "
  echo "-i (optional) : to provide interval (in seconds)."
  echo "-I (mandatory): to provide Iteam list. At least one name or ALL" 
  echo "                  Note - iteam list must be comma seperated and within double quotes"
  echo "                  Eg: -I \"catalog,category,category-info\"" 
  echo "                           Or        "
  echo "                  Eg: -I ALL" 
  echo "-u (mandatory): to provide user name" 
  echo "-p (mandatory): to provide to password" 
  echo "-h (mandatory): to provide to host (with or without protocol)" 
  echo "                  Eg: " 
  echo "                    -h http://192.168.211.8:15010/dyn/admin/nucleus/atg/registry/ContentRepositories/CustomProductCatalog/ " 
  echo "                                       OR                           " 
  echo "                    -h 192.168.211.8:15010/dyn/admin/nucleus/atg/registry/ContentRepositories/CustomProductCatalog/" 
  echo "-v (optional) : to provide vector list, Some arguement is neccessary"
  echo "                The arguement of this field will not be used, as we are using instance field."
  echo "-D (optional) : to run with debug mode, see debug file /tmp/jk_status.debug.<process_id>" 
  echo "-n (mandatory): This arguement is mandatory for bringing data with instance name provided."
  echo "                Eg:  -X instance        Output:  instance>vector_name"
  exit 1
}

while getopts i:I:u:p:v:h:Dn:? arg
do
  case $arg in
    i) INTERVAL_SECS=$OPTARG
       echo $INTERVAL_SECS | grep '^[0-9]*$' >/dev/null 2>&1
       if [ $? != 0 ];then
         display_help_and_exit "Integer expression must required with -i option!"
       fi
       ;;
    I) ITEMS=$OPTARG
       ;;
    u) USER_NAME=$OPTARG
       ;;
    p) PASSWORD=$OPTARG
       ;;
    h) URL=$OPTARG
       ;;
    v) VECTOR_FLAG="1"
       export vector_prefix=$OPTARG
       ;;
    D) DEBUG=1;;
    n) export instance=$OPTARG
       ;;
    *) display_help_and_exit ;;
    ?) display_help_and_exit ;;
  esac
done

debug_log "cm_cache_stats_solaris monitor called, INTERVAL_SECS = [$INTERVAL_SECS], ITEMS = [$ITEMS], USER_NAME = [$USER_NAME], PASSWORD = [$PASSWORD], URL = [$URL], VECTOR_FLAG = [$VECTOR_FLAG], DEBUG = [$DEBUG]"

check_mandatory_options

load_vectors

if [ "X$VECTOR_FLAG" = "X1" ];then  #To get vector list from iostat command
  show_vectors
else #To get data on every specified interval
  show_data
fi

exit 0
