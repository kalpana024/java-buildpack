# Name - cm_sar_hpux (CPU statistics)
# Purpose - This is a sample dynamic custom monitor to get data from sar  command
# It parses output of sar and outputs all data in one line
# Option - 'Run Once'
# GDF - cm_sar_hpux.gdf
# Keyword -
# DYNAMIC_VECTOR_MONITOR ebstfr28.wellsfargo.com SAR28 cm_sar_hpux.gdf 2 cm_sar_hpux -i 10 EOC cm_sar_hpux -v NS
#
#sar command output -
#sar -M -u 1
#HP-UX ebstfr30 B.11.31 U ia64    11/01/12
#22:23:19     cpu    %usr    %sys    %wio   %idle
#22:23:20       0      18       4       6      73
#               2      31       3       0      67
#               4      20       1       6      74
#               6      24       2       8      67
#          system      23       2       5      70

# Custom Monitor Output -

#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh
INTERVAL_SECS=$MON_FREQUENCY

VECTOR_FLAG=""
SAR_CMD_OUT_FILE=$CAV_MON_TMP_DIR/sar_cmd_out.$$
SAR_FINAL_OUT=$CAV_MON_TMP_DIR/sar_final_out.$$
set_flag=0
show_data()
{
  while true
  do
    isTestOver $MON_TEST_RUN
    # Test is over. So exit with success status
    if [ $? = 1 ]; then
      exit 0
    fi
  
    sar -M -u $INTERVAL_SECS > $SAR_CMD_OUT_FILE

    total_lines=`cat $SAR_CMD_OUT_FILE | wc -l`
    tail_val=`expr $total_lines - 4`

    head_val=`tail -$tail_val $SAR_CMD_OUT_FILE | wc -l`
    head_v=`expr $head_val - 1`

    tail -$tail_val $SAR_CMD_OUT_FILE | head -$head_v >> $SAR_FINAL_OUT

    while read inputline
    do
      if [ $set_flag -eq 0 ]; then
        echo $inputline | awk -F' ' '{printf $3" "$4" "$5" "$6"\n"}'  
        set_flag=1
      else
        echo $inputline | awk -F' ' '{printf $2" "$3" "$4" "$5"\n"}'  
      fi
    done < $SAR_FINAL_OUT
   
    set_flag=0
    rm -f $SAR_CMD_OUT_FILE $SAR_FINAL_OUT
    lib_sleep $INTERVAL_SECS
  done
}


#bash-4.2$ sar -M -u 1

#HP-UX ebstfr30 B.11.31 U ia64    11/01/12

#22:23:19     cpu    %usr    %sys    %wio   %idle
#22:23:20       0      18       4       6      73
#               2      31       3       0      67
#               4      20       1       6      74
#               6      24       2       8      67
#          system      23       2       5      70

# This will show all CPU on single line
#CPU0 CPU2 CPU4 CPU6
show_vectors()
{ 
  sar -M -u 1 > $SAR_CMD_OUT_FILE
 
  total_lines=`cat $SAR_CMD_OUT_FILE | wc -l` 
  tail_val=`expr $total_lines - 4`

  head_val=`tail -$tail_val $SAR_CMD_OUT_FILE | wc -l`
  head_v=`expr $head_val - 1`
 
  tail -$tail_val $SAR_CMD_OUT_FILE | head -$head_v >> $SAR_FINAL_OUT

  IDX=0
  while read inputline
  do
    if [ $set_flag -eq 0 ]; then
      verctor_array[$IDX]=`echo $inputline | awk -F' ' '{print $2}'`
      if [ "X$vector_prefix" = "Xnoprefix" ]; then
        CPU_LIST[$IDX]="CPU""${verctor_array[$IDX]}"
      else
        CPU_LIST[$IDX]="$vector_prefix""CPU""${verctor_array[$IDX]}"
      fi
      set_flag=1
    else
      verctor_array[$IDX]=`echo $inputline | awk -F' ' '{print $1}'`
      CPU_LIST[$IDX]="$vector_prefix""CPU""${verctor_array[$IDX]}"
    fi
    IDX=`expr $IDX + 1`
  done < $SAR_FINAL_OUT

  echo ${CPU_LIST[@]}
  rm -f $SAR_CMD_OUT_FILE $SAR_FINAL_OUT
}

display_help_and_exit()
{
  echo "Usage: cm_sar_hpux [-v <vector_prefix> ] or [-i <Interval>]"
  echo "-v: option used to get vector list for Command (sar -M -u 1). Prefix will added before these vector names"
  echo "-i: used for interval (in seconds)"
  exit -1
}


while getopts i:v:? arg
do
  case $arg in
    v) VECTOR_FLAG="1"
       export vector_prefix=$OPTARG
       ;;
    i) INTERVAL_SECS=$OPTARG
       echo $INTERVAL_SECS | grep '^[0-9]*$' 2>&1 >/dev/null
       if [ $? != 0 ];then
         echo "Integer expression must required with -i option!"
         exit -1
       fi
       ;;
    *) display_help_and_exit ;;
    ?) display_help_and_exit ;;
  esac
done

if [ "X$VECTOR_FLAG" = "X1" ];then  #To get vector list from iostat command
  show_vectors
else #To get data on every specified interval
  show_data
fi


exit 0
