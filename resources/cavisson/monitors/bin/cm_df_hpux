# Name    : cm_df_hpux
# Purpose : To get data and vector list of df command
# Usage   :
#   cm_df_hpux [-v] or [-i <Interval>]
#     -v: option used to get vector list of df -P -k
#     -i: option used to get data on every specified interval
# For example:
#   cm_df_hpux -v (To get vector list / /boot /dev/shm )
#   cm_df_hpux -i 1000  (To get data after each interval)
#
# Author: Prachi - 5 Nov 2012
#
#Set CAV_MON_HOME to allow testing from command line

data=""
data1=""
os_type=""

CRITICAL=10
MAJ=20
MIN=30
DF_OUT_FILE=/tmp/df.out$$
IDF_OUT__FILE=/tmp/idf.out$$

DEBUG_LEVEL=0

if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh
INTERVAL_SECS=$MON_FREQUENCY

display_help_and_exit()
{
  echo "Usage: cm_df_hpux [-v <vector_prefix>] or [-i <Interval>]"
  echo "-v: option used to get vector list for Command (df -P). Prefix will added before these vector names"
  echo "-i: option used for interval (in milliseconds)"
  exit -1
}

set_error_log_file()
{
  if [ "XX$CAV_MON_HOME" != "XX" ];then
    DEBUG_LOG_FILE="$CAV_MON_HOME/logs/cm_df_hpux_"$MON_TEST_RUN"_"$VECTOR_NAME"_debug.log"
    ERROR_LOG_FILE="$CAV_MON_HOME/logs/cm_df_hpux_"$MON_TEST_RUN"_"$VECTOR_NAME"_error.log"
  else
    DEBUG_LOG_FILE="/tmp/cm_df_hpux_"$MON_TEST_RUN"_"$VECTOR_NAME"_debug.log"
    ERROR_LOG_FILE="/tmp/cm_df_hpux_"$MON_TEST_RUN"_"$VECTOR_NAME"_error.log"
    error_log "CAV_MON_HOME is not exported, putting logs to /tmp/."
  fi
}

set_error_log_file

debug_log()
{
  if [ "X$DEBUG_LEVEL" = "X0" ]; then
    return
  else
    #echo "Debug: $*"
    echo "`date +'%F %X'`|$*" >> $DEBUG_LOG_FILE
  fi
}

VECTOR_FLAG=""

get_data_in_gb()
{
  count=3
  k=0
  i=0
  j=0
  disk_pct=0
  Filesystem=""
  if [ "X$os_type" = "XHP-UX" ]; then
    #for i in ${#data[@]}
    while true
    do
      Filesystem=`echo ${data[$i]}`
      i=`expr $i + 1`
      DISK_SPACE=""
      idx=0
      #for j in $count
      while true
      do
          #DISK_SPACE="$DISK_SPACE `echo ${data[$i]} | awk '{printf("%0.3f ", ($1)/(1024 * 1024))}'`"
          #echo " scale=3; 10446968 / 1048576" | bc
          if [ $BC_AVAILABLE -eq 1 ];then 
            DISK_SPACE[$idx]=`echo " scale=3; ${data[$i]} / 1048576" | bc`
          else
            DISK_SPACE[$idx]=`awk -v "var1=${data[$i]}" 'BEGIN{printf "%.3f", (var1 / 1048576)}'`
          fi
          i=`expr $i + 1`
          j=`expr $j + 1`
          idx=`expr $idx + 1`
          if [ $idx -eq $count ];then
            break
          fi 
      done
      #disk_pct=`echo ${data[$i]} | awk '{printf("%d", (100 - $1))}'`
      disk_pct=`expr 100 - ${data[$i]}`
      if [ $disk_pct -le $CRITICAL ]; then
        ns_log_event "Critical" "Disk free space ($disk_pct%) in  filesystem '$Filesystem' is less than critical threshold ($CRITICAL%)."
      elif [ $disk_pct -le $MAJ ]; then
        ns_log_event "Major" "Disk free space ($disk_pct%) in filesystem '$Filesystem' is less than major threshold ($MAJ%)."
      elif [ $disk_pct -le $MIN ]; then
        ns_log_event "Minor" "Disk free space ($disk_pct%) in filesystem '$Filesystem' is less than minor threshold ($MIN%)."
      else
        if [ $DEBUG_LEVEL -gt 0 ]; then
          ns_log_event "Info" "Disk free space ($disk_pct%) in filesystem name '$Filesystem' is normal."
        fi
      fi
      i=`expr $i + 1`
      I_NODES=""
      indx=0
      #for j in $count
      while true
      do
          #I_NODES="$I_NODES `echo ${data1[$k]} | awk '{printf("%d", ($1))}'`"
          #DISK_SPACE[$idx]=`echo " scale=3; ${data[$i]} / 1048576" | bc`
          I_NODES[$indx]=`echo ${data1[$k]}`
          k=`expr $k + 1`
          j=`expr $j + 1`
          indx=`expr $indx + 1`
          if [ $indx -eq $count ];then
            break
          fi
      done
      #i_node_pct=`echo ${data1[$k]} | awk '{printf("%d", (100 - $1))}'`
      i_node_pct=`expr 100 - ${data1[$k]}`
      if [ $i_node_pct -le $CRITICAL ]; then
        ns_log_event "Critical" "Disk free inodes ($i_node_pct%) in  filesystem '$Filesystem' is less than critical threshold ($CRITICAL%)."
      elif [ $i_node_pct -le $MAJ ]; then
        ns_log_event "Major" "Disk free inodes ($i_node_pct%) in filesystem '$Filesystem' is less than major threshold ($MAJ%)."
      elif [ $i_node_pct -le $MIN ]; then
        ns_log_event "Minor" "Disk free inodes ($i_node_pct%) in filesystem '$Filesystem' is less than minor threshold ($MIN%)."
      else
        if [ $DEBUG_LEVEL -gt 0 ]; then
          ns_log_event "Info" "Disk free inodes ($i_node_pct%) in filesystem name '$Filesystem' is normal."
        fi
      fi
      k=`expr $k + 1`
      #echo "DISK_SPACE = $DISK_SPACE"
      #echo "disk_pct = $disk_pct"
      #echo "I_NODES = $I_NODES"
      #echo "i_node_pct = $i_node_pct"

      #echo "$DISK_SPACE $disk_pct $I_NODES $i_node_pct"
      echo "${DISK_SPACE[@]} $disk_pct ${I_NODES[@]} $i_node_pct"

      if [ $i -eq ${#data[@]} ];then
        break
      fi
    done
  fi
}
###########################
while getopts i:v:D: arg
do
  case $arg in
    v) VECTOR_FLAG="1"
       export vector_prefix=$OPTARG
       ;;
    i) INTERVAL_SECS=$OPTARG
       echo $INTERVAL_SECS | grep '^[0-9]*$' 2>&1 >/dev/null 
       if [ $? != 0 ];then
         echo "Integer expression must required with -i option!"
         exit -1
       fi
       ;;
    D) DEBUG_LEVEL=$OPTARG ;;         #has default debug_level 0
     
    ?) display_help_and_exit ;;
  esac
done

if [ $INTERVAL_SECS -lt 60 ];then
  INTERVAL_SECS=60
fi

if [ "X$VECTOR_FLAG" = "X1" ];then  #To get vector list from df -P command
  if [ "X$vector_prefix" = "Xnoprefix" ]; then
    FILE_SYS_MOUNTED_ON=`df -P | egrep -v "Mounted" | awk '{print $6}' | awk '{printf $1" "}'`
  else
    FILE_SYS_MOUNTED_ON=`df -P | egrep -v "Mounted" | awk '{print ENVIRON["vector_prefix"]$6}' | awk '{printf $1" "}'`
  fi
  echo $FILE_SYS_MOUNTED_ON
else #To get data on every specified interval
  os_type=`uname`
  while true
  do
    isTestOver $MON_TEST_RUN
    # Test is over. So exit with success status
    if [ $? = 1 ]; then
      exit 0
    fi
    lib_sleep $INTERVAL_SECS
     if [ "X$os_type" = "XHP-UX" ]; then  
       df -P -k | egrep -v "Filesystem" | awk '{print $6" "$2" "$3" "$4" "$5}'|awk -F'%' '{print $1}' > $DF_OUT_FILE
       id=0
       while read inputline
       do
          data[$id]=`echo $inputline | awk '{print $1}'`
          id=`expr $id + 1`
          data[$id]=`echo $inputline | awk '{print $2}'`
          id=`expr $id + 1`
          data[$id]=`echo $inputline | awk '{print $3}'`
          id=`expr $id + 1`
          data[$id]=`echo $inputline | awk '{print $4}'`
          id=`expr $id + 1`
          data[$id]=`echo $inputline | awk '{print $5}'`
          id=`expr $id + 1`
       done < $DF_OUT_FILE

       df -iP > $IDF_OUT__FILE
       idx=0
       while read inputline
       do
         num_field=`echo $inputline | awk -F' ' '{print NF}'`
         if [ $num_field -eq 6 ];then
           arr_val=`echo $inputline | awk -F' ' '{print $4}'`
           data1[$idx]=$arr_val
         else
           arr_val=`echo $inputline | awk -F' ' '{print $1}'`
           data1[$idx]=$arr_val
         fi
         idx=`expr $idx + 1`
       done < $IDF_OUT__FILE
    fi
    get_data_in_gb
    rm -f $DF_OUT_FILE $IDF_OUT__FILE
  done
fi

exit 0
