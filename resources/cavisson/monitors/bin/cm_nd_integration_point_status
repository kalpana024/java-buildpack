##################################################################################################################################  
#                                                                                                                                #
# Name     :-  cm_nd_integration_point_status.sh                                                                                 #
# Purpose  :-  Monitor to check wheather the URL is accessible or not                                                            #
#               0 if Not Accessible                                                                                              #
#               1 if Accessible                                                                                                  #
#              And if accesible then it finds the response time by hitting the URL                                               #
#                                                                                                                                #
#              "-f : Option will specify the file to be passed"                                                                  #
#              "-i : Interval in seconds after which the monitor will produce the result (default progress I sec)"               #
#              "-X : Option will specify about the prefix added with the vector"                                                 #
#              "-L : Option will specify the headers"                                                                            #
#                                                                                                                                #
#              File shold be present in /opt/cavisson/monitors/sys                                                               #
#                                                                                                                                #
# Author   :-  Abhishek Raj                                                                                                      #
# Date     :-  18th sep 2015                                                                                                     #
#                                                                                                                                #
##################################################################################################################################


#Set CAV_MON_HOME, if not set
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi


#including this shell for the use of various global variables
. $CAV_MON_HOME/bin/ns_check_monitor_func.sh


#Variable decleration
VECTOR_FLAG=0
VECTOR_PREFIX=""
INTERVAL_SECS=$MON_FREQUENCY  
FILE_PATH=""
REM_URL=""
FILE_EXIST=0
BC_AVAILABLE=1

set_debug_log_file()
{
  if [ "XX$CAV_MON_HOME" != "XX" ];then
    ERROR_LOG_FILE="$CAV_MON_HOME/logs/cm_nd_integration_point_status_"$MON_TEST_RUN"_"$VECTOR_NAME"_error.log"
  else
    ERROR_LOG_FILE="/tmp/cm_nd_integration_point_status_"$MON_TEST_RUN"_"$VECTOR_NAME"_error.log"
  fi
}

#Processing the data by using curl command on the url
process_data()
{
  i=0
  while [ $i -lt $NUM_OF_VECTOR ]
  do
    if [ "X${USE_PROXY[$i]}" = "Xyes" -o "X${USE_PROXY[$i]}" = "XYES" -o "X${USE_PROXY[$i]}" = "XYes" ]; then
      PROXY_CMD='-x proxy.kohls.com:3128'
    else
      PROXY_CMD=''
    fi
      
    if [ "X${HTTP_METHOD[$i]}" = "XPOST" -o "X${HTTP_METHOD[$i]}" = "Xpost" -o "X${HTTP_METHOD[$i]}" = "XPost" ]; then 
      if [ "X${URL_ARRAY[$i]}" = "Xhttp://xstvsgiga.kohls.com/tvs-app/getPromo" ];then
        data="`curl -o /dev/null -H "X-KOHLS-MessageID: 12" -H "X-KOHLS-SenderName: ESign" -H "X-KOHLS-CorrelationID: 4b460d9a3f53415d9a87467f68db69ca" -H "X-KOHLS-RequestDateTime: 2013-11-11T13:13:13Z" -H "Content-Type: text/xml;charset=UTF-8" -s -k -w %{time_total}:%{http_code} --data @${FILE_FOR_POST[$i]} -X POST -m ${TIMEOUT_ARRAY[$i]} $PROXY_CMD ${URL_ARRAY[$i]}`"
      else 
        data="`curl -o /dev/null -H "Content-Type: text/xml;charset=UTF-8" -s -k -w %{time_total}:%{http_code} --data @${FILE_FOR_POST[$i]} -X POST -m ${TIMEOUT_ARRAY[$i]} $PROXY_CMD ${URL_ARRAY[$i]}`"
      fi
      response_time_in_sec="`echo $data|cut -d':' -f 1`"

      if [ $BC_AVAILABLE -eq 1 ] ; then
        RESPONSE_TIME[$i]=`echo "$response_time_in_sec * 1000" | bc`
      else
        RESPONSE_TIME[$i]=`awk -v "var1=$response_time_in_sec" 'BEGIN{printf "%.3f", (var1*1000)}'`
      fi
 
      HTTP_CODE="`echo $data|cut -d':' -f 2`"

      if [ "X$HTTP_CODE" != "X200" -a "X$HTTP_CODE" != "X500" ] ; then
        ACCESSIBLE[$i]=0
        RESPONSE_TIME[$i]="000.000"
      elif [ "X${RESPONSE_TIME[$i]}" = "X000.000" ]
      then
        ACCESSIBLE[$i]=0
      else
        if [ "X${error[$i]}" = "X1" ]; then
          ACCESSIBLE[$i]=0
          RESPONSE_TIME[$i]="000.000"
        else 
          ACCESSIBLE[$i]=1
        fi
      fi 
    elif [ "X${HTTP_METHOD[$i]}" = "XGET" -o "X${HTTP_METHOD[$i]}" = "XGet" -o "X${HTTP_METHOD[$i]}" = "Xget" ];then
     
      data="`curl -o /dev/null -s -k -w %{time_total}:%{http_code} -G -m ${TIMEOUT_ARRAY[$i]} $PROXY_CMD ${URL_ARRAY[$i]}`"
  
      response_time_in_sec="`echo $data|cut -d':' -f 1`"

      if [ $BC_AVAILABLE -eq 1 ] ; then
        RESPONSE_TIME[$i]=`echo "$response_time_in_sec * 1000" | bc`
      else
        RESPONSE_TIME[$i]=`awk -v "var1=$response_time_in_sec" 'BEGIN{printf "%.3f", (var1*1000)}'`
      fi

      HTTP_CODE="`echo $data|cut -d':' -f 2`"
     
      if [ "X$HTTP_CODE" != "X200" -a "X$HTTP_CODE" != "X500" ] ; then
        ACCESSIBLE[$i]=0
        RESPONSE_TIME[$i]="000.000"
      elif [ "X${RESPONSE_TIME[$i]}" = "X000.000" ]
      then
        ACCESSIBLE[$i]=0
      else
        if [ "X${error[$i]}" = "X1" ]; then
          ACCESSIBLE[$i]=0
          RESPONSE_TIME[$i]="000.000"
        else
          ACCESSIBLE[$i]=1
        fi
      fi
    fi  
    i=$((i+1))
  done
} 


#display the array like :  VECTORS|(ACC/NOT_ACC) RESPONSE_TIME
show_data()
{ 
  i=0
  while [ $i -lt $NUM_OF_VECTOR ]
  do
    echo ${VECTOR_ARRAY[$i]}"|"${ACCESSIBLE[$i]}" "${RESPONSE_TIME[$i]}
    i=`expr $i + 1`
  done
}


#display the vector name 
#Breadcrum will be IntegrationPoint 
show_vectors()
{
  echo ${VECTOR_ARRAY[@]}
}

#FILE FORMAT - URL|DisplayName|Type|Timeout|Http_method|File_to_be_passed_with_post
#Parsing the file into different array necessary
read_file_into_array()   
{
  i=0
  #currently we are assuming type as HTTP. If type is some other protocol
  #not accesible through curl we need to handle this.
  while IFS="|" read url vec type timeout http_method file use_proxy
  do
    echo $url | grep -v "^#" | grep -v -e '^$'> /dev/null
    if [ $? -eq 0 ] ; then 
      URL_ARRAY[$i]=$url
      VECTOR_ARRAY[$i]="$i:$VECTOR_PREFIX$vec"
      TIMEOUT_ARRAY[$i]=$timeout
      HTTP_METHOD[$i]=$http_method
      if [ "X$file" != "X" ];then
        parent_file=`dirname $file`
        if [ "X$parent_file" = "X." ];then
          FILE_FOR_POST[$i]="$var/$file"
        else
          FILE_FOR_POST[$i]=$file
        fi
      fi
      USE_PROXY[$i]=$use_proxy
      ACCESSIBLE[$i]=0
      RESPONSE_TIME[$i]=0.000
      if [ "X$http_method" = "XPOST" -o "X$http_method" = "Xpost" -o "X$http_method" = "XPost" ]; then
        if [ "X$file" = "X" ]; then
           echo "`date +'%F %X'`|File has to be provided with POST Method on line `expr $i + 1`" >> $ERROR_LOG_FILE 
           error[$i]=1
        fi
      fi
      i=`expr $i + 1`
    fi
  done < $FILE_PATH
#  if [ "X$error" = "X1" ]; then
#    exit -1
#  fi
  NUM_OF_VECTOR=${#VECTOR_ARRAY[@]}
}  

Usage()
{
  echo "-f : Option will specify the file to be passed"
  echo "-i : Interval in seconds after which the monitor will show the result (default is progress interval)"
  echo "-X : Option will specify about the prefix added with the vector"
  echo "-L : Option will specify the headers/data" 
  exit -1
}      


#####################################################

set_debug_log_file

while getopts f:L:X:i:? args
do 
  case $args in
    f) FILE_PATH=$OPTARG
       ;;
    L) if [ "X$OPTARG" = "Xheader" -o "X$OPTARG" = "XHEADER" -o "X$OPTARG" = "XHeader" ];then
         VECTOR_FLAG="1"
       fi
       ;;
    X) VECTOR_PREFIX=$OPTARG"_"
       ;;
    i) INTERVAL_SECS=$OPTARG
       echo $INTERVAL_SECS | grep '^[0-9]*$' 2>&1 >/dev/null
       if [ $? != 0 ];then
         echo "Interval is not correct. It should be numeric (> 1 secs)"
         exit -1
       fi
       ;;
    *) Usage ;; 
    ?) Usage
       ;;
  esac
done

#Running the shell without any arguements
if [ $# -eq 0 ] ; then
  Usage  
fi


#checking if the provided FILE_PATH is absolute/relative
var=`dirname $FILE_PATH`
if [ "X$var" = "X." ] ; then
  FILE_PATH="$CAV_MON_HOME/sys/$FILE_PATH"
fi 

#Checking for existense of  the file
if [ -e $FILE_PATH ] ; then
  read_file_into_array 
else
  echo "File Provided Does not Exist"
  exit -1
fi

#To get vector list from the file passed
if [ "X$VECTOR_FLAG" = "X1" ];then  
  show_vectors
else
#To get data on every specified interval
  while :
  do
    START=`date +%s.%3N`
    process_data                        
    END=`date +%s.%3N`

#If time diff is less than Interval then sleep for the remaining time  
    if [ $BC_AVAILABLE -eq 1 ] ; then
      TIME_DIFF=`echo "$END - $START" | bc`
      if [[ $(echo $TIME_DIFF '<' $INTERVAL_SECS | bc -l) -eq 1 ]];then 
        SLEEP_TIME=`echo "$INTERVAL_SECS - $TIME_DIFF" | bc`
        show_data
        sleep $SLEEP_TIME
      else
        show_data
      fi
    else
      TIME_DIFF=`awk -v "var1=$END" -v "var2=$START" 'BEGIN{printf "%.3f", (var1-var2)}'`
      TIME_FLAG=`echo |awk -v n1=$TIME_DIFF -v n2=$INTERVAL_SECS  '{if (n1<n2) printf("1"); else printf("0");}'`
      if [ $TIME_FLAG -eq 1 ]; then
        SLEEP_TIME=`awk -v "var1=$INTERVAL_SECS" -v "var2=$TIME_DIFF" 'BEGIN{printf "%.3f", (var1-var2)}'`
        show_data
        sleep $SLEEP_TIME
      else
        show_data
      fi
    fi
  done
fi   
