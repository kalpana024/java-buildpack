# Name    : get_ps_arg_value
# Purpose : To get argument value of a process using pid 
# Usage   :
#  get_ps_arg_value [-p <pid> or -f <pidfile>] -a <arg> -d <delmiter> -D
#    -p: option will specify the pid of the process.

#    -f: option specifies the filename which contains the pid of the process.
#        read the pid from file specified, as do same as -p option
#    -a: option will specify the arguments of the process whose value is required. E.g. -Xverbosegc.
#    -d: option will specify the delimiter between argument and value. For example ':'.Default is space
#    -D: option is to enable debug.

# For example: run the ps command as follows
#ps -p 1966 -o args
#Output of above command is:
#    COMMAND
#    /usr/bin/vmnet-natd -d /var/run/vmnet-natd-8.pid -m /var/run/vmnet-natd-8.mac -c /etc/vmware/vmnet8/nat/net.conf
# Now run the tool as follows
#   ./get_ps_arg_value -p 1966 -a "-c" -d ' '

#  The Output is: /etc/vmware/vmnet8/nat/nat.conf 
#  Again run using different value of argument[-a "-d"]
# ./get_ps_arg_value -p 1966 -a "-d" -d ' '
#   The Output is: /var/run/vmnet-natd-8.pid

#Reading the process id from the file as follows:
#  ./get_ps_arg_value -f /var/run/vmnet-natd-8.pid -a "-c" -d ' '
#  The Output is: /etc/vmware/vmnet8/nat/nat.conf 


  

debug_log()
{
  if [ $DEBUG = 1 ];then
    #echo "`date +'%F %X'`|$*" >> $DEBUG_LOG_FILE
    echo "`date +'%F %X'`|$*" >>/tmp/get_ps_arg_value.log 
  fi
}

error_log()
{
    echo "Error: $*"
    echo "`date +'%F %X'`|$*" >> $ERROR_LOG_FILE
}

display_help_and_exit()
{
  echo "ERROR: Incorrect usage"
  echo "Usage:"
  echo "get_ps_arg_value [-p <pid> or -f <pidfile>] -a <arg> - d <delmiter> -D"
  echo "  -p: option will specify the pid of the process."
  echo "  -f: option specifies the filename which contains the pid of the process."
  echo "  -s: option specifies the search patterns"
  echo "      Eg: -s cmon -s work" 
  echo "  -O: option specifies the occurence of search patterns"
  echo "  -o: option specifies the operation"
  echo "      operation are -" 
  echo "        1) show-pid" 
  echo "  -a: option will specify the arguments of the process whose value is required. E.g. -Xverbosegc."
  echo "  -d: option will specify the delimiter between argument and value. For example ':'. Default is space." 
  echo "  -D: option is to enable debug."
  exit 1
}

#<<comment
#get_arg()
#{
#   STR=$1
#   echo $STR
#   arg=`echo $STR | awk -F'-' '{ print $2}'`
#   echo $arg
#
#}
#comment

show_pids()
{
  if [ "XX$OPERATION" != "XXshow-pid" ];then
    return
  fi

  if [ $NUM_OF_PID -gt 0 ];then
    echo ${SORTED_ARRAY_OF_PID[@]} 
  else
    echo $PROCESS_ID 
  fi 
  
  exit 0
}

get_ps_arg_value()
{
  debug_log "get_ps_arg_value() Called: PROCESS_ID = $PROCESS_ID "

  #if operation is show-pid then after returing pid exit from here 
  show_pids

  TEMP_FILE=/tmp/tmp.txt
  if [ "X$OS_NAME" = "XSunOS" ]; then
    #PS_CMD="/usr/ucb/ps $PROCESS_ID" 
    PS_CMD="/usr/ucb/ps -auxwww $PROCESS_ID" 
  else
    PS_CMD="ps -p $PROCESS_ID -o args" 
  fi
  debug_log "get_ps_arg_value(): Command = $PS_CMD"
  eval $PS_CMD >$TEMP_FILE 2>/dev/null
  RET=$?
  CMD_OUTPUT=`grep -v "COMMAND" $TEMP_FILE 2>/dev/null`
  #echo "ps output = $CMD_OUTPUT"
  debug_log "get_ps_arg_value(): ps o/p = $CMD_OUTPUT"

  #echo $CMD_OUTPUT | awk -F 'ENVIRON["ARG_NAME"]ENVIRON["DELIMITER"]' '{print $2}' | cut -f1 -d' '
  if [ "X$OS_NAME" = "XSunOS" ]; then
    echo $CMD_OUTPUT | nawk -F"$ARG_NAME""$DELIMITER" '{print $2}' | cut -f1 -d' ' 
  else #Linux,AIX
    echo $CMD_OUTPUT | awk -F"$ARG_NAME$DELIMITER" '{print $2}' | cut -f1 -d' '
  fi

  rm -f $TEMP_FILE
}


chk_process_file()
{
  debug_log "chk_process_file() Called"
  if [ "XX$PROCESS_FILE" != "XX" ];then
    FILE_SIZE=`ls -s $PROCESS_FILE 2>/dev/null` 
    RET=$?

    FILE_SIZE=`echo "$FILE_SIZE" | awk '{print $1}'`
    if [ "X$RET" != "X0" -o "XX$FILE_SIZE" = "XX0" ];then
      error_log "File $PROCESS_FILE is not present or empty"
      exit 1
    fi

    PROCESS_ID=`cat $PROCESS_FILE 2>/dev/null`
    if [ $? != 0 ];then
      error_log "Unable to get pid from $PROCESS_FILE file."
      exit 1
    fi

    debug_log "chk_process_file(): PROCESS_ID = $PROCESS_ID from $PROCESS_FILE file"
 fi
}

init_search_data()
{
  debug_log "Method set_search_arr() called"
  #Intializing the SEARCH_PATTERN_ARR
  unset SEARCH_PATTERN_ARR[*]
  search_count=0
  ORD=0
  NUM_OF_PID=0
}

set_ps_command()
{
  debug_log "Method set_ps_command() called"
  if [ "X$OS_NAME" = "XSunOS" ]; then
    if [ ! -f /usr/ucb/ps ];then
      error_log "ps command not found on path /usr/ucb/ps. Hence standard ps command will be used."
      PS_CMD_FOR_SEARCH="ps -ef" # Do not use ps -lef as need pid at filed 2
    else
      PS_CMD_FOR_SEARCH="/usr/ucb/ps -auxwww"
    fi
    if [ ! -f /usr/xpg4/bin/grep ];then
      error_log "grep command not found on path /usr/xpg4/bin/grep. Hence extended regular expression may not be supported."
      PS_GREP_CMD="/usr/bin/egrep -e"  #Search for a pattern_list(full regular expression that 
                                       #begins with a -).
     else
      PS_GREP_CMD="/usr/xpg4/bin/grep -E"
    fi
  else #Linux,AIX
    PS_CMD_FOR_SEARCH="ps -ef" # Do not use ps -lef as need pid at filed 2
    PS_GREP_CMD="grep -E"      # Fixed bug: 4574
  fi
}

create_pid_list()
{
  debug_log "Method create_pid_list() called."
  i=0
  MULTIPLE_SEARCH_CMD=""
  while [ $i -lt $search_count ]
  do
   #Here we are making and in search pattern by grep 
   #Eg: grep cmon | grep work
   MULTIPLE_SEARCH_CMD=`echo "$MULTIPLE_SEARCH_CMD | $PS_GREP_CMD  \"${SEARCH_PATTERN_ARR[$i]}\" "`
    i=`expr $i + 1`
  done
  
  # We are excluding this argument (nsi_take_java_thread_dump, nsi_get_java_thread_dump) , since we are using it in search pattern list
  MULTIPLE_SEARCH_CMD=`echo "$MULTIPLE_SEARCH_CMD | grep -v get_ps_arg_value | grep -v grep| grep -v nsi_take_java_thread_dump| grep -v nsi_get_java_thread_dump | grep -v nsi_get_java_heap_dump | grep -v nsi_take_java_heap_dump"`
  debug_log "MULTIPLE_SEARCH_CMD = [$MULTIPLE_SEARCH_CMD]"

  #eval is required since we have to run this command later
  COMMAND="eval $PS_CMD_FOR_SEARCH $MULTIPLE_SEARCH_CMD"
  debug_log "COMMAND = [$COMMAND]"
  
  #Creating ARRAY_OF_PID and SORTED_ARRAY_OF_PID using for loop because, AIX ex, AIX and Solaris does not support brackets i.e. ()
  PID_LIST=`$COMMAND | awk -F' ' '{printf $2" "}'`             #PID_LIST contains all the pids from given search pattern

  debug_log "PID_LIST = [$PID_LIST]"

  j=0
  for index in `echo $PID_LIST`
  do
    ARRAY_OF_PID[$j]=$index
    j=`expr $j + 1`
  done

  SORT_PID_LIST=`echo ${ARRAY_OF_PID[@]} | tr " " "\n" | sort`      #SORTE_PID_LIST contains all the sorted pids from given search pattern

  k=0
  for idx in `echo $SORT_PID_LIST`
  do
    SORTED_ARRAY_OF_PID[$k]=$idx
    k=`expr $k + 1`
  done

  NUM_OF_PID=${#SORTED_ARRAY_OF_PID[@]}

  debug_log "SORTED_ARRAY_OF_PID = ${SORTED_ARRAY_OF_PID[@]} and NUM_OF_PID = $NUM_OF_PID"
  
  debug_log "create_array_of_pid end"  
}

validate_occurrence_number()
{
  debug_log "validate_occurrence_number called" 

  if [ $ORD -lt 1 ];then
    error_log "Occurrence number cannot be less than 1. Given occurrence number is: $ORD"
    exit 1
  fi

  debug_log "validate_occurrence_number end"
}

validate_max_occurence_index()
{
  debug_log "validate_max_occurence_index called"
  if [ $ORD -gt $NUM_OF_PID ]; then
    error_log "Given occurrence number $ORD is more than number of processes running $NUM_OF_PID"
    exit 1
  fi
  debug_log "validate_max_occurence_index end"
}

get_ps_arg_value_by_search_pattern()
{
  debug_log "Method get_ps_arg_value_by_search_pattern() called."
  #validate_occurrence_number
  set_ps_command
  create_pid_list 
  validate_max_occurence_index  
  
  # This is used when (-s) search pattern is given with (-O) ORD.
  if [ $ORD -gt 1 ]; then
    SET_ORD=`expr $ORD - 1`                       # -1 because array index starts from zero
    PROCESS_ID=${SORTED_ARRAY_OF_PID[$SET_ORD]}   # PID from SORTED_ARRAY_OF_PID created in function create_array_of_pid()
    debug_log "Generated PID is $PROCESS_ID"
  else
    if [ $NUM_OF_PID -gt 1 -a "XX$OPERATION" != "XXshow-pid" ];then
      debug_log "ORD is not provide but getting multiple pids (= ${SORTED_ARRAY_OF_PID[@]}) for provided patterns"
      error_log "ORD is not provide but getting multiple pids (= ${SORTED_ARRAY_OF_PID[@]}) for provided patterns, Hence exiting.."
      exit 1
    fi 
    PROCESS_ID=${SORTED_ARRAY_OF_PID[0]}
  fi
  
  get_ps_arg_value
}

###########################################################################################################################################

if [ $# -eq 0 ];then
 display_help_and_exit
fi

PROCESS_ID=""
PROCESS_FILE=""
PS_CMD=""
CMD_OUTPUT=""
DEBUG=0
FLAG=0
FLAG_ARGUMENT=0

ARG_NAME=""
DELIMITER=" " # default value is space

OS_NAME=`uname`

declare SEARCH_PATTERN_ARR[] 2>/dev/null

init_search_data

while getopts p:f:c:a:d:Ds:O:o:? arg
do
    case $arg in
        p) PROCESS_ID="$OPTARG"
           FLAG=`expr $FLAG + 1`;;
        f) PROCESS_FILE="$OPTARG"
           FLAG=`expr $FLAG + 1`;;
        a) ARG_NAME="$OPTARG"
           FLAG_ARGUMENT=`expr $FLAG_ARGUMENT + 1`;;
        d) DELIMITER="$OPTARG";;
        s) SEARCH_PATTERN_ARR[search_count]="$OPTARG"
           if [ $search_count = 0 ];then
             FLAG=`expr $FLAG + 1`
           fi
           search_count=`expr $search_count + 1`;;
        O) ORD="$OPTARG"
           validate_occurrence_number;;
        o) OPERATION="$OPTARG";;
        D) DEBUG=1;;
        ?) display_help_and_exit ;;
    esac
done

#echo "ARG_NAME = $ARG_NAME"
#echo "DEL = $DELIMITER"

debug_log "PROCESS_ID = [$PROCESS_ID], PROCESS_FILE = [$PROCESS_FILE], ARG_NAME = [$ARG_NAME], DELIMITER = [$DELIMITER], search_count = [$search_count], ORD = [$ORD=], OPERATION = [$OPERATION=], DEBUG = [$DEBUG]"
if [ $FLAG -gt 1 ];then
  echo "Only one option among -p ,-f or -s can be given at a time !"
  exit 1
fi

if [ $FLAG_ARGUMENT -eq 0 -a "XX$OPERATION" != "XXshow-pid" ];then
  echo "Argument[-a <arg>] field must be given!"
  display_help_and_exit
  exit 1
fi

if [ $ORD -gt 0 ]; then
  if [ "XX$PROCESS_ID" != "XX" -o "XX$PROCESS_FILE" != "XX" ]; then
    echo "-O option is applicable only with -s option"
    exit 1
  fi
fi

if [ "XX$CAV_MON_HOME" != "XX" ];then
  DEBUG_LOG_FILE="$CAV_MON_HOME/logs/get_ps_arg_value_error.log"
  ERROR_LOG_FILE="$CAV_MON_HOME/logs/get_ps_arg_value_error.log"
else
  DEBUG_LOG_FILE="/tmp/get_ps_arg_value_debug.log"
  ERROR_LOG_FILE="/tmp/get_ps_arg_value_error.log"
  debug_log "CAV_MON_HOME is not exported, putting logs to /tmp/."
fi

# put the process -id , process-file , arg-name and delimiter value in debug file
if [ "X$PROCESS_ID" != "X" ]; then
  debug_log "PROCESS_ID = $PROCESS_ID, ARG_NAME = $ARG_NAME, DELIMITER = $DELIMITER"
else  
  debug_log "PROCESS_ID = $PROCESS_ID, ARG_NAME = $ARG_NAME, DELIMITER = $DELIMITER"
fi

if [ "XX$PROCESS_FILE" != "XX" ];then
   chk_process_file
fi

if [ $search_count -eq 0 ];then #find ps argument
  get_ps_arg_value

  if [ "X$RET" != "X0" ];then
    error_log "Process specified by PID ($PROCESS_ID) is not running."
    exit 1
  fi
else #findout only pid
  get_ps_arg_value_by_search_pattern
fi
#set $CMD_OUTPUT
#FIELD_1="$1"
#echo $FIELD_1
#debug_log "FIELD_1=$FIELD_1"

#ARG_VALUE=`get_arg $FIELD_1`
exit 0
