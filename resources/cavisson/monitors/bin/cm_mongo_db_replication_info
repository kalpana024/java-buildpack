
#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

set_mon_shell
INTERVAL_SECS=$MON_FREQUENCY
VECTOR_FLAG="0"



check_mongo_existence()
{
  ps -ef | grep mongodb | grep -v grep   >/dev/null
  if [ $? -ne 0 ]; then
    echo "mongodb is not running on the host. Hence exiting."
    exit -1
  fi
}


check_mandatory_options()
{
#  if [ "X$USERNAME" == "X" ]; then
#    display_help_and_exit "Username is mandatory"
#  fi
  
#  if [ "X$PASSWORD" == "X" ]; then
#    display_help_and_exit "Password is mandatory"
#  fi
  
  if [ "X$PORT" == "X" ]; then
    PORT="27017"
  fi
}


find_time_diff_and_log_size()
{
  arr=(`$MONGO_CMD --eval "db.getReplicationInfo()" --host $host | tr ' ' '|'  2>/dev/null`)
  
  num=0
  while [ $num -lt ${#arr[@]} ]
  do
    echo ${arr[$num]} | grep -w "timeDiff" >/dev/null 2>&1
    if [ $? -eq 0 ]; then
      time_diff=`echo ${arr[$num]} |awk -F'|' '{print $3}' | tr -d ','`
    fi

    echo ${arr[$num]} | grep "logSizeMB" >/dev/null 2>&1
    if [ $? -eq 0 ]; then
      log_size=`echo ${arr[$num]} | awk -F'|' '{print $3}' | tr -d ','`
    fi
  
    num=`expr $num + 1`
  done
}


find_primary_host_for_mongo()
{
  arr=(`$MONGO_CMD --eval "db.isMaster()" 2>/dev/null`)

  echo ${arr[@]} | grep "Error"
  if [ $? -eq 0 ]; then
    ns_log_event "Major" "Error in running command."
    exit -1
  fi

  primary_host=`echo ${arr[@]} | awk -F'primary' '{print $2}' | awk -F'"' '{print $3}'`
}


find_oplog_window()
{
  host=$1
  arr=(`$MONGO_FOR_OPLOG --eval "db.printReplicationInfo()" --host $host 2>/dev/null | tail -n 3`)
   
  echo ${arr[@]} | grep "Error"
  if [ $? -eq 0 ]; then
    ns_log_event "Major" "Error in running command."
    exit -1
  fi

  first_event=`date --date "\`echo ${arr[@]} | awk -F'GMT' '{print $1}' | awk -F':' '{printf "%s:%s:%s", $2,$3,$4}'\`" +%s`
  now=`date --date "\`echo ${arr[@]} | awk -F'now:' '{print $2}' | awk -F'GMT' '{print $1}'\`" +%s`

  expr $now - $first_event
}


process_and_show_data()
{
  i=1

  find_primary_host_for_mongo
 
  primary_host=`echo $primary_host | cut -d':' -f 1`
  primary_oplog_window=`find_oplog_window $primary_host`

  arr=(`$MONGO_CMD --eval "db.printSlaveReplicationInfo()" 2> /dev/null`)

  echo ${arr[@]} | grep "Error"
  if [ $? -eq 0 ]; then
    ns_log_event "Major" "Error in running command."
    exit -1
  fi
 
  while :
  do
#    echo ${arr[@]}
    host_name=`echo ${arr[@]} | awk -v "var=$i" -F'source:' '{print $(var+1)}' | awk '{print $1}'`

    if [ "X$host_name" = "X" ]; then
      break      #no more slave
    fi

    host=`echo $host_name | cut -d':' -f'1'`

    oplog_window=`find_oplog_window $host`

    lag=`echo ${arr[@]} | awk -v "var=$i" -F'source:' '{print $(var+1)}' | awk -F'secs' '{print $1}' |awk -F ')' '{print $2}'`

    headroom=`expr $primary_oplog_window - $lag`
  
    find_time_diff_and_log_size $host

    echo "`expr $i - 1`:$host|$lag $oplog_window $headroom $time_diff $log_size"
    i=`expr $i + 1`
  done
}


process_for_vector_list()
{
  i=1
  arr=(`$MONGO_CMD --eval "db.printSlaveReplicationInfo()" 2> /dev/null`)

  echo ${arr[@]} | grep "Error"
  if [ $? -eq 0 ]; then
    ns_log_event "Major" "Error in running command."
    exit -1
  fi

  while :
  do
#    echo ${arr[@]}
    host_name=`echo ${arr[@]} | awk -v "var=$i" -F'source:' '{print $(var+1)}' | awk '{print $1}'`

    if [ "X$host_name" = "X" ]; then
      break      #no more slave
    fi

    host=`echo $host_name | cut -d':' -f'1'`
    echo -n "`expr $i - 1`:$host "
    i=`expr $i + 1`
  done
}


display_help_and_exit()
{
  echo "$*"
  echo "cm_mongo_db_replication_info -u <username> -p <password>"
  echo "-v: option used to get vector list. Prefix will added before these vector names"
  echo "-i: used for interval (in seconds)"
  echo "-X: used for <vector prefix/noprefix>"
  echo "-L: used for <header/data>"
  echo "-h: Used to pass host name. If need to connect to different host for mongo db data. Default it will connect to local host."
  echo "-P: Port at which mongodb is listening. Default 27017"
  echo "-u: Username. mandatory field"
  echo "-p: Password. Mandatory Field"
  echo "-d: DB name"
  exit -1
}


##########################################################################################

VECTOR_FLAG=0
DBNAME=""

while getopts i:v:X:L:u:p:d:h:P:? arg
do
  case $arg in
    v) VECTOR_FLAG="1"
       export vector_prefix=$OPTARG
       ;;
    X) export vector_prefix=$OPTARG
       ;;
    L) if [ "X$OPTARG" = "Xheader" -o "X$OPTARG" = "XHEADER" ]; then
         VECTOR_FLAG="1"
       fi
       ;;
    i) INTERVAL_SECS=$OPTARG
       freq_option="1"
       echo $INTERVAL_SECS | grep '^[0-9]*$' 2>&1 >/dev/null
       if [ $? != 0 ];then
         echo "Integer expression must required with -i option!"
         exit -1
       fi
       ;;
    h) HOST=$OPTARG ;;
    P) PORT=$OPTARG ;;
    u) USERNAME=$OPTARG ;;
    p) PASSWORD=$OPTARG ;;
    d) DBNAME=$OPTARG ;;
    *) display_help_and_exit ;;
    ?) display_help_and_exit ;;
  esac
done


#check_mongo_existence
check_mandatory_options


MONGO_CMD="mongo $DBNAME"

if [ "X$USERNAME" != "X" ];then
  MONGO_CMD="$MONGO_CMD -u $USERNAME"
fi

if [ "X$PASSWORD" != "X" ]; then
  MONGO_CMD="$MONGO_CMD -p $PASSWORD"
fi

MONGO_FOR_OPLOG="$MONGO_CMD"

if [ "X$HOST" != "X" ]; then
  MONGO_CMD="$MONGO_CMD --host $HOST"
  MONGO_FOR_OPLOG="$MONGO_CMD"
fi

MONGO_CMD="$MONGO_CMD --port $PORT"
MONGO_FOR_OPLOG="$MONGO_FOR_OPLOG --port $PORT"

while :
do
  if [ "X$VECTOR_FLAG" = "X1" ]; then
    process_for_vector_list
    echo ""
    exit 0
  fi

  process_and_show_data

  sleep $INTERVAL_SECS
done
