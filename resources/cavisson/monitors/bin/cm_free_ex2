# Name - cm_free_ex2
# Purpose - This is a sample custom monitor to get data from free_ex2 command
# It parses output of free_ex2 and outputs memory status in one line
# Option - 'Run Every Time'
# GDF - cm_free_ex2.gdf should be in netstorm
#       Copy it to $NS_WDIR/sys to use this GDF file
#
# free command output -
#[netstorm@netstorm1 archana]$ free
#             total       used       free     shared    buffers     cached
#Mem:       1033284     528496     504788          0      42616     247284
#-/+ buffers/cache:     238596     794688
#Swap:      2031608          0    2031608

#We are converting the output which was in KB to MB. It gives all the memory including swap and buffers and cached.
# Custom Monitor Output -
#7935.902 7560.437 61.695 375.464 38.304 611.082 522.527 2141.804 4896.105 3039.796 12117.945 2891.500 23.861 9226.445
#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi


. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

set_mon_shell
INTERVAL_SECS=$MON_FREQUENCY

process_data()
{
  while read line           
  do
    if [[ $line =~ "MemTotal" ]]
    then
      MemTotal=`echo "$line" | tr -d ' ' | tr -d [A-Za-z:]`

    elif [[ $line =~ "MemFree" ]]
    then
      MemFree=`echo "$line" | tr -d ' '| tr -d [A-Za-z:]`

    elif [[ $line =~ "Shmem" ]]
    then
      Shmem=`echo "$line" | tr -d ' '| tr -d [A-Za-z:]`

    elif [[ $line =~ "Buffers" ]]
    then
      Buffers=`echo "$line" | tr -d ' '| tr -d [A-Za-z:]`

    elif [[ $line == "Cached"* ]]
    then
      Cached=`echo "$line" | tr -d ' '| tr -d [A-Za-z:]`

    elif [[ $line =~ "SwapTotal" ]]
    then
      SwapTotal=`echo "$line" | tr -d ' '| tr -d [A-Za-z:]`

    elif [[ $line =~ "SwapFree" ]]
    then
      SwapFree=`echo "$line" | tr -d ' '| tr -d [A-Za-z:]`
    fi

  done </proc/meminfo

  if [ $BC_AVAILABLE -eq 1 ]; then
    MemTotal_MB=`echo "scale=3; $MemTotal / 1024" | bc`
    MemUsed_MB=`echo "scale=3; ($MemTotal - $MemFree) / 1024" | bc`
    MemFree_MB=`echo "scale=3; $MemFree / 1024" | bc`
    MemShared_MB=`echo "scale=3; $Shmem / 1024" | bc`
    Buffers_MB=`echo "scale=3; $Buffers / 1024" | bc`
    Cached_MB=`echo "scale=3; $Cached / 1024" | bc`
    ActualMemUsed_MB=`echo "scale=3; ($MemTotal - ($MemFree + $Buffers + $Cached)) / 1024" | bc`
    ActualMemFree_MB=`echo "scale=3; ($MemFree + $Buffers + $Cached) / 1024" | bc`
    ActualMemUsed_Per=`echo "scale=3; ($ActualMemUsed_MB * 100) / ($MemTotal_MB)" | bc`    
    ActualMemFree_Per=`echo "scale=3; ($ActualMemFree_MB * 100) / ($MemTotal_MB)" | bc`
    SwapTotal_MB=`echo "scale=3; $SwapTotal / 1024" | bc`
    SwapUsed_MB=`echo "scale=3; ($SwapTotal - $SwapFree) / 1024" | bc`
    SwapUsed_Per=`echo "scale=3; ($SwapUsed_MB * 100) / ($SwapTotal_MB)" | bc`
    SwapFree_MB=`echo "scale=3; $SwapFree / 1024" | bc`
  else
     MemTotal_MB=`expr $MemTotal / 1024`
     MemUsed_MB=`expr \( $MemTotal - $MemFree \) / 1024`    
     MemFree_MB=`expr $MemFree / 1024`
     MemShared_MB=`expr $Shmem / 1024`
     Buffers_MB=`expr $Buffers / 1024`
     Cached_MB=`expr $Cached / 1024`
     ActualMemUsed_MB=`expr \( $MemTotal - \( $MemFree + $Buffers + $Cached \) \) / 1024`
     ActualMemFree_MB=`expr \( $MemFree + $Buffers + $Cached \) / 1024`
     ActualMemUsed_Per=`expr \( $ActualMemUsed_MB \* 100 \) / \( $MemTotal_MB \)`
     ActualMemFree_Per=`expr \( $ActualMemFree_MB \* 100 \) / \( $MemTotal_MB \)`
     SwapTotal_MB=`expr $SwapTotal / 1024`
     SwapUsed_MB=`expr \( $SwapTotal - $SwapFree \) / 1024`
     SwapUsed_Per=`expr \( $SwapUsed_MB \* 100 \) / \( $SwapTotal_MB \)`
     SwapFree_MB=`expr $SwapFree / 1024`
  fi

echo "$MemTotal_MB $MemUsed_MB $ActualMemUsed_Per $MemFree_MB $ActualMemFree_Per $MemShared_MB $Buffers_MB $Cached_MB $ActualMemUsed_MB $ActualMemFree_MB $SwapTotal_MB $SwapUsed_MB $SwapUsed_Per $SwapFree_MB"

isTestOver $MON_TEST_RUN
    # Test is over. So exit with success status
    if [ $? = 1 ]; then
      exit 0
    fi

}


if [ "X$MON_OPTION" = "X1" ]; then
  process_data
  exit 0
else
  while :
  do
    process_data
    sleep $INTERVAL_SECS
  done
fi
