################################################################################
## Name    : cm_db_atg_order_stats
## Purpose : This is a cumstom monitor to get number of orders for ATG in each order state. Currently it recognises following states
##            SUBMITTED
##            INCOMPLETE
##            PENDING_SUBMISSION
##            PENDING_FRAUD_CHECK
##            NO_PENDING_ACTION
##            PROCESSING
##            PENDING_PROCESSING
##            FAILED
##            BLOCKED 
##            CANCELLED 
##            REJECTED 
##            IN_FULFILLMENT 
##            FAILED_APPROVAL
##            OTHERS             (If state is found other than above mentioned states it will be taken as OTHERS.)
##            TOTAL              (Number of order in all states)
## Option  : 'Run Once'
## GDF     : cm_db_atg_order_stats.gdf in netstorm machine ($NS_WDIR/sys)
## Keyword :
##           CUSTOM_MONITOR 192.168.147.171 cm_db_atg_order_stats.gdf Orace_order_state_vector 2 cm_db_atg_order_stats -i 10 -U <USER> 
##           -K <KEY/PASSWORD> -O <ORACLE_HOME> -H <HOST/IP> -P <PORT> -S <SID> -I <Instance-Name> -D
##
##           Also this file can be used to generate reports for order submitted between date/time
##           -r option will generate reports for order submitted in previous day.
##           With -r you can also use -s and -e option to specify start date/time  and end date/time
##           Usage:
##           cm_db_atg_order_stats -U <USER> -K <KEY/PASSWORD> -O <ORACLE_HOME> -H <HOST/IP> -P <PORT> -S <SID> -I <Instance-Name>
##           -r -s "04-AUG-2013 02:00:00.000000 AM" -e "04-AUG-2013 04:00:00.000000 AM"
##
## Return  : On success  - 0
##           On failure  - 1
## Date    : thursday, 18 July 2013
################################################################################

#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

 . $CAV_MON_HOME/bin/ns_check_monitor_func.sh

initialize_states()
{
  SUBMITTED=0
  INCOMPLETE=0
  PENDING_SUBMISSION=0
  PENDING_FRAUD_CHECK=0
  NO_PENDING_ACTION=0
  PROCESSING=0
  PENDING_PROCESSING=0
  FAILED=0
  BLOCKED=0 
  CANCELLED=0 
  REJECTED=0 
  IN_FULFILLMENT=0 
  FAILED_APPROVAL=0
  OTHERS=0
  TOTAL=0

}

set_up_env() 
{
  DEBUG=0
  INTERVAL=300   #default will be 5 minute
  HOST=""
  PORT=""
  SID=""
  INSTANCE=""
  USER=""
  PASSWORD=""
  REPORT=0
  START_DT=""
  END_DT=""
  ## CURRENTLY SET TO 5 MIN
  QUERY_START_DT=""
  QUERY_END_DT=""
  ORACLE_START_DT=""
  ORACLE_END_DT=""
  #export ORACLE_HOME=/ora/orasoft/oracle/product/11.2.0/db11.2.0.3
  #export ORACLE_HOME=/u01/app/oracle/product/11.2.0/dbhome_1
  #SQL_PLUS_BIN=$ORACLE_HOME/bin/sqlplus

  QUERY_STATS=""
  QUERY_OUT_FILE="$CAV_MON_TMP_DIR/cm_db_atg_order_stats.out.$$"
  QUERY_OUT_FILE_AWK="$CAV_MON_TMP_DIR/state_test.out.2.$$"
  QUERY_ERR_FILE="$CAV_MON_TMP_DIR/cm_db_atg_order_stats.err.$$"
  REPORT_CSV_FILE="$CAV_MON_TMP_DIR/cm_db_atg_order_stats_$$.csv"
 
  initialize_states
 
}


ns_log_event()
{
  VERSION="1.0"
  SEVERITY="$1"
  EVENT_MSG="$2"
}

set_error_and_debug_log_file()
{
  if [ "XX$CAV_MON_HOME" != "XX" ];then
    DEBUG_LOG_FILE="$CAV_MON_HOME/logs/cm_db_atg_order_stats_"$MON_TEST_RUN"_"$VECTOR_NAME"_debug.log"
    ERROR_LOG_FILE="$CAV_MON_HOME/logs/cm_db_atg_order_stats__"$MON_TEST_RUN"_"$VECTOR_NAME"_error.log"
  else
    DEBUG_LOG_FILE="/tmp/cm_db_atg_order_stats_debug_log.$$"
    ERROR_LOG_FILE="/tmp/cm_db_atg_order_stats_error_log.$$"
    error_log "CAV_MON_HOME is not exported, putting logs to /tmp/."
  fi
}

error_log()
{
  ns_log_event "Major" "$*" 
  echo `date +'%F %X'`"|" $* >> $ERROR_LOG_FILE
}

debug_log()
{
    if [ "X$DEBUG" = "X0" ]; then
      return
    else
      echo `date +'%F %X'`"|" $* >>$DEBUG_LOG_FILE 
    fi
}

#Function to remove output files. 
remove_files()
{
 rm -f $QUERY_ERR_FILE $QUERY_OUT_FILE $QUERY_OUT_FILE_AWK
}

get_start_and_end_date()
{

  QUERY_START_DT="$(date --date "$QUERY_START_DT $INTERVAL sec" +'%d-%b-%Y %r')"
  QUERY_END_DT="$(date --date "$QUERY_END_DT $INTERVAL sec" +'%d-%b-%Y %r')"
}

format_to_oracle()
{

  QUERY_START_DT="$(date --date "$QUERY_START_DT" +'%d-%b-%Y %r' | cut -d ' ' -f -2)"
  START_DT_AM_PM="$(date --date "$QUERY_START_DT" +'%d-%b-%Y %r' | cut -d ' ' -f 3)"
  ORACLE_START_DT="$QUERY_START_DT.000000000 $START_DT_AM_PM"
  ORACLE_START_DT=`echo "$ORACLE_START_DT" | tr ':' '.'`

  QUERY_END_DT="$(date --date "$QUERY_END_DT" +'%d-%b-%Y %r' | cut -d ' ' -f -2)"
  END_DT_AM_PM="$(date --date "$QUERY_END_DT" +'%d-%b-%Y %r' | cut -d ' ' -f 3)"
  ORACLE_END_DT="$QUERY_END_DT.000000000 $END_DT_AM_PM"
  ORACLE_END_DT=`echo "$ORACLE_END_DT" | tr ':' '.'`


}


#Function to run database queries
make_and_run_query_oracle()
{
  debug_log "run_query called."
  #export ORACLE_HOME=$ORACLE_HOME
  #QUERY_FOR_STATE="select upper(state), count(*) from atgprdcore.dcspp_order group by upper(state);"
  #QUERY_SET_PAGESIZE=" set pagesize 50;"
  #TODO TEST IT
  #$SQL_PLUS_BIN ATGTEAM/datar3ad@"(description=(address=(host=database.kohlsll.com)(protocol=tcp)(port=1521))(connect_data=(sid=OT0140)(instancename=OT0140)))" >$QUERY_OUT_FILE 2>$QUERY_ERR_FILE <<+
  $SQL_PLUS_BIN $USER/$PASSWORD@"(description=(address=(host=$HOST)(protocol=tcp)(port=$PORT))(connect_data=(sid=$SID)(instancename=$Instance-Name)))" >>$QUERY_OUT_FILE 2>>$QUERY_ERR_FILE <<+ 
$QUERY_SET_PAGESIZE
$QUERY_SET_FEEDBACK
$QUERY_FOR_STATE
;
+

}

process_data()
{
  ## Select text from sql query output and put in other file
  echo `awk '/-----------------------/ {P=1; next} /rows selected|row selected/ {exit} P' $QUERY_OUT_FILE | awk 'NF'` > $QUERY_OUT_FILE_AWK

  ## Populate array from file created in above step
  OUTPUT=($(< $QUERY_OUT_FILE_AWK))
  total=${#OUTPUT[*]}

  ## Process array to find intrested order state. The states in which we are not intrested is 
  ## denoted as others.
  for (( i=0; i<=$(( $total -1 )); i+=2 ))
    do
      if [ ${OUTPUT[$i]} = "SUBMITTED" ]
      then
        SUBMITTED=${OUTPUT[`expr $i + 1`]}
        TOTAL=`expr $TOTAL + $SUBMITTED`
      elif [ ${OUTPUT[$i]} = "INCOMPLETE" ]
      then
        INCOMPLETE=${OUTPUT[`expr $i + 1`]}
        TOTAL=`expr $TOTAL + $INCOMPLETE`
      elif [ ${OUTPUT[$i]} = "PENDING_SUBMISSION" ]
      then
        PENDING_SUBMISSION=${OUTPUT[`expr $i + 1`]}
        TOTAL=`expr $TOTAL + $PENDING_SUBMISSION`
      elif [ ${OUTPUT[$i]} = "PENDING_FRAUD_CHECK" ]
      then
        PENDING_FRAUD_CHECK=${OUTPUT[`expr $i + 1`]}
        TOTAL=`expr $TOTAL + $PENDING_FRAUD_CHECK`
      elif [ ${OUTPUT[$i]} = "NO_PENDING_ACTION" ]
      then
        NO_PENDING_ACTION=${OUTPUT[`expr $i + 1`]}
        TOTAL=`expr $TOTAL + $NO_PENDING_ACTION`
      elif [ ${OUTPUT[$i]} = "PROCESSING" ]
      then
        PROCESSING=${OUTPUT[`expr $i + 1`]}
        TOTAL=`expr $TOTAL + $PROCESSING`
      elif [ ${OUTPUT[$i]} = "PENDING_PROCESSING" ]
      then
        PENDING_PROCESSING=${OUTPUT[`expr $i + 1`]}
        TOTAL=`expr $TOTAL + $PENDING_PROCESSING`
      elif [ ${OUTPUT[$i]} = "FAILED" ]
      then
        FAILED=${OUTPUT[`expr $i + 1`]}
        TOTAL=`expr $TOTAL + $FAILED`
      elif [ ${OUTPUT[$i]} = "BLOCKED" ]
      then
        BLOCKED=${OUTPUT[`expr $i + 1`]}
        TOTAL=`expr $TOTAL + $BLOCKED`
      elif [ ${OUTPUT[$i]} = "CANCELLED" ]
      then
        CANCELLED=${OUTPUT[`expr $i + 1`]}
        TOTAL=`expr $TOTAL + $CANCELLED`
      elif [ ${OUTPUT[$i]} = "REJECTED" ]
      then
        REJECTED=${OUTPUT[`expr $i + 1`]}
        TOTAL=`expr $TOTAL + $REJECTED`
      elif [ ${OUTPUT[$i]} = "IN_FULFILLMENT" ]
      then
        IN_FULFILLMENT=${OUTPUT[`expr $i + 1`]}
        TOTAL=`expr $TOTAL + $IN_FULFILLMENT`
      elif [ ${OUTPUT[$i]} = "FAILED_APPROVAL" ]
      then
        FAILED_APPROVAL=${OUTPUT[`expr $i + 1`]}
        TOTAL=`expr $TOTAL + $FAILED_APPROVAL`
      else
        TEMP=${OUTPUT[`expr $i + 1`]}
        TOTAL=`expr $TOTAL + $TEMP`
        OTHERS=`expr $TEMP + $OTHERS`
        #OTHERS=`expr $OTHERS + ${OUTPUT[`expr $i + 1`]}`
      fi
  done

  ## Display output
  echo $SUBMITTED $INCOMPLETE $PENDING_SUBMISSION $PENDING_FRAUD_CHECK $NO_PENDING_ACTION $PROCESSING $PENDING_PROCESSING $FAILED $BLOCKED $CANCELLED $REJECTED $IN_FULFILLMENT $FAILED_APPROVAL $OTHERS $TOTAL

  initialize_states
}


get_yesterday_date()
{
  START_DT="$(date --date yesterday +%d-%b-%Y) 12.00.00.000000000 AM"
  END_DT="$(date --date yesterday +%d-%b-%Y) 11.59.59.999999999 PM"
}

check_mandatory_options()
{
  debug_log "Method check_mandatory_options called"
  
  if [ "X$USER" = "X" ];then
    Usage "USER name is mandatory"
  fi

  if [ "X$PASSWORD" = "X" ];then
    Usage "PASSWORD is mandatory"
  fi

  if [ "X$ORACLE_HOME" = "X" ];then
    Usage "ORACLE_HOME is mandatory"
  fi

  if [ "X$HOST" = "X" ];then
    Usage "HOST name is mandatory"
  fi

  if [ "X$PORT" = "X" ];then
    Usage "port is mandatory"
  fi

  if [ "X$SID" = "X" ];then
    Usage "SID is mandatory"
  fi

  if [ "X$INSTANCE" = "X" ];then
    Usage "INSTANCE is mandatory"
  fi
}

Usage()
{
  error_log "$*"
  error_log "Usage: cm_db_atg_order_stats -U <USER> -K <KEY/PASSWORD> -O <ORACLE_HOME>  -H <HOST/IP> -P <PORT> -S <SID> -I <Instance-Name> -i <interval in secs> -D"
  exit -1
}

############# Function Calling ################################

#Must set debug/error log file in the beginning
set_up_env
set_error_and_debug_log_file

while getopts U:K:O:H:P:S:I:i:s:e:r?D? c  2>/dev/null
do
  case $c in
    U) USER=$OPTARG ;;
    K) PASSWORD=$OPTARG ;;
    O) ORACLE_HOME=$OPTARG ;;
    H) HOST=$OPTARG ;;
    P) PORT=$OPTARG ;;
    S) SID=$OPTARG ;;
    I) INSTANCE=$OPTARG ;;
    i) INTERVAL=$OPTARG;;    #has default 10 sec
    s) START_DT=$OPTARG;; 
    e) END_DT=$OPTARG;; 
    r) REPORT=1;;   #default is yesterday
    D) DEBUG=1;;
    ?) Usage "Invalid arguments";;
    *) Usage "Invalid arguments";;
  esac
done
check_mandatory_options

#TO DO: date --date "-$INTERVAL sec" +'%d-%b-%Y %r' doesnt work on solaris.

export ORACLE_HOME=$ORACLE_HOME
SQL_PLUS_BIN=$ORACLE_HOME/bin/sqlplus

QUERY_FOR_STATE=""
QUERY_SET_PAGESIZE=" set pagesize 50;"
QUERY_SET_FEEDBACK=" set feedback on;"
 
if [ "X$REPORT" = "X1" ];then
  ## generate reports
  if [ "X$START_DT" = "X" -o "X$END_DT" = "X" ];then
    get_yesterday_date
  fi
  ##Query to get Reports
  ##order_id > 65000000 signify that these are ATG Orders
  REPORT_SET_PAGESIZE="set echo off colsep , pagesize 5000 linesize 1000;" 
  QUERY_FOR_REPORT="select ORDER_ID,SUBMITTED_DATE,STATE from (SELECT ORDER_ID,SUBMITTED_DATE,STATE  FROM ATGPRDCORE.DCSPP_ORDER WHERE SUBMITTED_DATE >= '$START_DT' AND SUBMITTED_DATE <= '$END_DT' AND order_id > '65000000') sub1 order by 2 asc;"

  echo "Fetching ATG Orders submitted between $START_DT and $END_DT..."
  echo ""
  echo "Output is created in file $REPORT_CSV_FILE"
  $SQL_PLUS_BIN $USER/$PASSWORD@"(description=(address=(host=$HOST)(protocol=tcp)(port=$PORT))(connect_data=(sid=$SID)(instancename=$Instance-Name)))" >>$REPORT_CSV_FILE 2>>$QUERY_ERR_FILE <<+ 
$REPORT_SET_PAGESIZE
$QUERY_FOR_REPORT
;
+
exit 0
fi

QUERY_START_DT="$(date --date "-$INTERVAL sec" +'%d-%b-%Y %r')"
QUERY_END_DT="$(date --date "$QUERY_START_DT $INTERVAL sec" +'%d-%b-%Y %r')"

#### LOOP ###
if [ "X$MON_OPTION" = "X1" ];then
  debug_log "State information Monitor started."
  format_to_oracle
  QUERY_FOR_STATE="select upper(state), count(*) from atgprdcore.dcspp_order where order_id > '65000000' and SUBMITTED_DATE >= '$ORACLE_START_DT' and SUBMITTED_DATE < '$ORACLE_END_DT' group by upper(state);"
  make_and_run_query_oracle
  process_data
  remove_files
else
  while true
    do
      # Test is over. So exit with success status
      isTestOver $MON_TEST_RUN
      if [ $? = 1 ]; then
        exit 0
      fi

      debug_log "State information Monitor started."
      format_to_oracle
      QUERY_FOR_STATE="select upper(state), count(*) from atgprdcore.dcspp_order where order_id > '65000000' and SUBMITTED_DATE >= '$ORACLE_START_DT' and SUBMITTED_DATE < '$ORACLE_END_DT' group by upper(state);"
      make_and_run_query_oracle
      process_data
      get_start_and_end_date
      remove_files
      lib_sleep $INTERVAL
   done
fi

### LOOP END ###
exit 0
