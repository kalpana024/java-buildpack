################################################################################################
# Name  : cm_udp_stats_linux 
# Usage : cm_udp_stats_linux -r(optional) -i <time in sec>
# Purpose: This shell outputs the count of UDP states, run once
# Output : 
# (without -r option)
# 8 0 0 0 0 
# 9 0 0 0 0 
# 11 0 0 3 0
# 13 0 0 5 0
# 18 0 0 9 0
# (with -r option)
# .300 0 0 0 0
# .700 0 0 0 0
# 1.000 0 0 .900 0
# .600 0 0 .400 0
#         
# Initial version : Tuesday, Oct 14 2009 
# Modification    : Thursday, Oct 14 2009 
# Author Name     : Maninder Singh and Abhishek Raj

###############################################################################################
#Assuming all fields has unsigned long value
#ex. init value = 142352345
#    cur value  = 323434    which is lesser then init value
#    now difference will be calculated as MAX_UNSIGNED_LONG_32 -  init value  + cur value

#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

Usage()
{
  echo "$0 [ -i <time in secs> ] [ -r (to display data per sec) ]"
  exit 1
}

#call only at init time
init_netstat_data()
{
  Index=0
  READ=0
  INIT_NUM_VAL=0
  DATA_ARRAY=(0 0 0 0 0)
  DATA=`netstat -su| tr '\n' '|'`
  IFS='|' read -r -a array <<< "$DATA"
  for((i=0;i<=${#array[@]};i++))
  do
    if [ "X${array[$i]}" = "XUdp:" ] ; then
      READ=1
      continue;
    elif [ "X${array[$i]}" = "XUdpLite:" ]; then
      READ=0
      break;
    fi

    if [ $READ = 1 ];then    	
      #echo "Init: Sorting tcp data: index = $Index, data = $i"
      data=`echo "${array[$i]}" | sed 's/^ *//g' | tr -s ' ' | tr ' ' '_'`
      echo $data|grep "packets_received">/dev/null
      if [ $? -eq 0 ];then
        DATA_ARRAY[0]=`echo $data | awk -F'_' '{print$1}'`
      fi
      echo $data|grep "packets_to_unknown_port_received">/dev/null
      if [ $? -eq 0 ];then
        DATA_ARRAY[1]=`echo $data | awk -F'_' '{print$1}'`
      fi
      echo $data|grep "packet_receive_errors">/dev/null
      if [ $? -eq 0 ];then
        DATA_ARRAY[2]=`echo $data | awk -F'_' '{print$1}'`
      fi
      echo $data|grep "packets_sent">/dev/null
      if [ $? -eq 0 ];then     
        DATA_ARRAY[3]=`echo $data | awk -F'_' '{print$1}'`
      fi
      echo $data|grep "RcvbufErrors">/dev/null
      if [ $? -eq 0 ];then
        DATA_ARRAY[4]=`echo $data | awk -F'_' '{print$2}'`
      fi
      INIT_NUM_VAL=$Index
      Index=`expr $Index + 1` 
    fi
  done
}

#UDP:
# 876578 packets received
# 26 packets to unknown port received.
# 14426 packet receive errors
# 715209 packets sent
# RcvbufErrors: 697
  

#called at every interval to get relative data w.r.t data calculated by init_netstat_data
show_relative_netstat_data()
{
  Index=0
  dataIndex=0
  READ=0
  CUR_NUM_VAL=0
  RELATIVE_DATA=(0 0 0 0 0)
  CUR_DATA=`netstat -su | tr '\n' '|'`
  IFS='|' read -r -a cur_array <<< "$CUR_DATA"
  for((i=0;i<=${#cur_array[@]};i++))
  do
     if [ "X${cur_array[$i]}" = "XUdp:" ] ; then
       READ=1
       continue;
     elif [ "X${cur_array[$i]}" = "XUdpLite:" ]; then
       READ=0
       break;
     fi

     if [ $READ = 1 ];then 							      # processing for rate value\
       cur_data=`echo "${cur_array[$i]}" | sed 's/^ *//g' | tr -s ' ' | tr ' ' '_'`   # triming the multiple spaces
       if [ $RATE -eq 1 ];then
         echo $cur_data|grep "packets_received" >/dev/null
         if [ $? -eq 0 ];then
           temp=`echo $cur_data | awk -F'_' '{print$1}'`                              #extracting the values
           rel=`get_relative_value $temp ${DATA_ARRAY[0]} $0 NA`                      #extracting relative value
           if [ $BC_AVAILABLE -eq 1 ]; then
             RELATIVE_DATA[0]=`echo " scale=3; $rel / $INTERVAL_SECS" | bc`             #dividing value with interval second to get value/sec
           else
             RELATIVE_DATA[0]=`awk -v "var1=$rel" -v "var2=$INTERVAL_SECS" 'BEGIN{printf "%.3f", (var1/var2)}'` 
           fi
           DATA_ARRAY[0]=`echo $temp`
         fi
         echo $cur_data|grep "packets_to_unknown_port_received">/dev/null
         if [ $? -eq 0 ];then
           temp=`echo $cur_data | awk -F'_' '{print$1}'`
           rel=`get_relative_value $temp ${DATA_ARRAY[1]} $0 NA`
           if [ $BC_AVAILABLE -eq 1 ]; then
             RELATIVE_DATA[1]=`echo " scale=3; $rel / $INTERVAL_SECS" | bc`
           else
             RELATIVE_DATA[1]=`awk -v "var1=$rel" -v "var2=$INTERVAL_SECS" 'BEGIN{printf "%.3f", (var1/var2)}'`
           fi
           DATA_ARRAY[1]=`echo $temp`
         fi
         echo $cur_data|grep "packet_receive_errors">/dev/null
         if [ $? -eq 0 ];then
           temp=`echo $cur_data | awk -F'_' '{print$1}'`
           rel=`get_relative_value $temp ${DATA_ARRAY[2]} $0 NA`
           if [ $BC_AVAILABLE -eq 1 ]; then
             RELATIVE_DATA[2]=`echo " scale=3; $rel / $INTERVAL_SECS" | bc`
           else
             RELATIVE_DATA[2]=`awk -v "var1=$rel" -v "var2=$INTERVAL_SECS" 'BEGIN{printf "%.3f", (var1/var2)}'`           
           fi
           DATA_ARRAY[2]=`echo $temp`
         fi
         echo $cur_data|grep "packets_sent">/dev/null
         if [ $? -eq 0 ];then
           temp=`echo $cur_data | awk -F'_' '{print$1}'`
           rel=`get_relative_value $temp ${DATA_ARRAY[3]} $0 NA`
           if [ $BC_AVAILABLE -eq 1 ]; then
             RELATIVE_DATA[3]=`echo " scale=3; $rel / $INTERVAL_SECS" | bc`
           else
             RELATIVE_DATA[3]=`awk -v "var1=$rel" -v "var2=$INTERVAL_SECS" 'BEGIN{printf "%.3f", (var1/var2)}'`           
           fi
           DATA_ARRAY[3]=`echo $temp`
         fi
         echo $cur_data|grep "RcvbufErrors">/dev/null
         if [ $? -eq 0 ];then
          temp=`echo $cur_data | awk -F'_' '{print$2}'`
          rel=`get_relative_value $temp ${DATA_ARRAY[4]} $0 NA`
          if [ $BC_AVAILABLE -eq 1 ]; then
            RELATIVE_DATA[4]=`echo " scale=3; $rel / $INTERVAL_SECS" | bc`
          else
            RELATIVE_DATA[4]=`awk -v "var1=$rel" -v "var2=$INTERVAL_SECS" 'BEGIN{printf "%.3f", (var1/var2)}'`           
          fi
          DATA_ARRAY[4]=`echo $temp`
         fi
       else								#when RATE=0 processing for cumulative data
         echo $cur_data|grep "packets_received" >/dev/null
         if [ $? -eq 0 ];then
           temp=`echo $cur_data | awk -F'_' '{print$1}'`
           RELATIVE_DATA[0]=`get_relative_value $temp ${DATA_ARRAY[0]} $0 NA`
         fi
         echo $cur_data|grep "packets_to_unknown_port_received">/dev/null
         if [ $? -eq 0 ];then
           temp=`echo $cur_data | awk -F'_' '{print$1}'`
           RELATIVE_DATA[1]=`get_relative_value $temp ${DATA_ARRAY[1]} $0 NA`
         fi
         echo $cur_data|grep "packet_receive_errors">/dev/null
         if [ $? -eq 0 ];then
           temp=`echo $cur_data | awk -F'_' '{print$1}'`
           RELATIVE_DATA[2]=`get_relative_value $temp ${DATA_ARRAY[2]} $0 NA`
         fi
         echo $cur_data|grep "packets_sent">/dev/null
         if [ $? -eq 0 ];then
           temp=`echo $cur_data | awk -F'_' '{print$1}'`
           RELATIVE_DATA[3]=`get_relative_value $temp ${DATA_ARRAY[3]} $0 NA`
         fi
         echo $cur_data|grep "RcvbufErrors">/dev/null
         if [ $? -eq 0 ];then
           temp=`echo $cur_data | awk -F'_' '{print$2}'`
           RELATIVE_DATA[4]=`get_relative_value $temp ${DATA_ARRAY[4]} $0 NA`
         fi
       fi
       Index=`expr $Index + 1` 
       CUR_NUM_VAL=$dataIndex
       dataIndex=`expr $dataIndex + 1` 
     fi
  done
  if [ $INIT_NUM_VAL != $CUR_NUM_VAL ];then
    echo "Error: Got variable number of fields at init time($INIT_NUM_VAL) w.r.t. current ($CUR_NUM_VAL)."
    return
  fi
  
  echo ${RELATIVE_DATA[@]}
}

convert_interval_into_secs()
{
  #changing into seconds
   if [ "$INTERVAL_SECS" -lt 1000 ];then
      INTERVAL_SECS=`expr $INTERVAL_SECS \* 1000`
   fi

  INTERVAL_SECS=`expr $INTERVAL_SECS / 1000`
}

#############################################################################################

INTERVAL_SECS=$MON_FREQUENCY
RATE=0

while getopts i:r? c
do
  case $c in
    i) INTERVAL_SECS=$OPTARG     #has default 10000 msec
       convert_interval_into_secs;;
    r) RATE=1;;
    ?) Usage ;;
  esac
done

#Save initial data
init_netstat_data

#Calculate OS architecture in order to set value of MAX_UNSIGNED_LONG for 32 bits CPU architecture / 64 bits CPU architecture.
get_os_arch_data_model

while true;
do
    isTestOver $MON_TEST_RUN
    # Test is over. So exit with success status
    if [ $? = 1 ]; then
      exit 0
    fi

  lib_sleep $INTERVAL_SECS 
  show_relative_netstat_data
done
exit 0
