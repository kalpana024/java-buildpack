#!/bin/bash
#
#NAME: cm_docker_memory_stats
#PURPOSE: This is a sample dynamic custom monitor to get data from docker info command
#It parses output of docker info and outputs all data in one line
#Option - 'Run Once'
#GDF - cm_docker_memory_stats.gdf
#Keyword -
# DYNAMIC_VECTOR_MONITOR 192.168.1.66 NS cm_docker_memory_stats.gdf 2 cm_docker_memory_stats -i 10000 EOC cm_docker_memory_stats -v
#Sample Output:    container_name|data
#                   elated_austin|.1250 199.3867 .0312 0 26292 24273 34173 
#             naughty_brahmagupta|.1328 195.5039 .0312 0 28253 26715 35828 
#                    insane_gates|.1523 193.3632 .0312 0 26786 24258 37421 
#                     cocky_hugle|.0234 .4687 0 0 418 292 756
######################################################################################################################

if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh
INTERVAL_SECS=$MON_FREQUENCY
set_mon_shell

display_help_and_exit()
{
  echo "$1"
  echo "Usage: cm_docker_memory_stats [-v <vector_prefix> ] or [-i <Interval>]"
  echo "-v: option used to get vector list for Command (mpstat -P ALL). Prefix will added before these vector names"
  echo "-i: used for interval (in seconds)"
  echo "-X: used for <vector prefix/noprefix>"
  echo "-L: used for <header/data>"
  exit -1
}

#debug_log()
#{
#  echo $1 >>ee
#}

check_last_char()
{
  given_value=$1

  #debug_log "check_last_char Method Called, given_value = [$given_value]"

  if [ "X$given_value" = "X" ];then
    echo "NULL"
    return 1
  fi

  num_char=`echo "$given_value" | wc -c`
  num_char=`expr $num_char - 1`

  #debug_log "num_char = $num_char"
  echo "`echo "$given_value" | cut -c $num_char`"
}


convert_into_MB()
{
  in_val=$1
  #debug_log "convert_into_MB Method Called, in_val = [$in_val]"
  
  if [ "X$1" == "X" ];then
     echo -n "0 "
     return
  fi

  last_char=`check_last_char $in_val`
  #debug_log "Last char: last_char = $last_char"
  if [ "X$last_char" = "XNULL" ];then
    return 1
  fi

  if [ "X$last_char" = "XG" ];then
    in_val_without_MKG_suffix=`echo "${in_val%?}"`
    if [ $BC_AVAILABLE -eq 1 ];then
      out_val=`echo "scale=4; $in_val_without_MKG_suffix * 1024" |bc`
    else
      out_val=`awk -v "var1=$in_val_without_MKG_suffix" 'BEGIN{printf "%.4f", (var1 * 1024)}'`
    fi
  elif [ "X$last_char" = "XM" ];then
    in_val_without_MKG_suffix=`echo "${in_val%?}"`
    out_val=$in_val_without_MKG_suffix
  elif [ "X$last_char" = "XK" ];then
    in_val_without_MKG_suffix=`echo "${in_val%?}"`
    if [ $BC_AVAILABLE -eq 1 ];then
      out_val=`echo "scale=4; $in_val_without_MKG_suffix / 1024" |bc`
    else
      out_val=`awk -v "var1=$in_val_without_MKG_suffix" 'BEGIN{printf "%.4f", (var1 / 1024)}'`
    fi
  else #if in byte
    if [ $BC_AVAILABLE -eq 1 ];then
      out_val=`echo "scale=4; $in_val / 1048576" |bc`
    else
      out_val=`awk -v "var1=$in_val" 'BEGIN{printf "%.4f", (var1 / 1048576)}'`
    fi
  fi

  echo -n "$out_val "
}


SYS_SLICE_FOUND=0

check_for_file()
{
  if [ "X$FILE_PATH" = "X" ]; then
    if [ -e "$stats_path/memory/docker" ];then
      FILE_PATH="$stats_path/memory/docker"
    elif [ -e "$stats_path/memory/system.slice" ];then
      FILE_PATH="$stats_path/memory/system.slice"
      SYS_SLICE_FOUND=1
    fi 
  else
    if [[ "$FILE_PATH" =~ "system.slice" ]] ;then
      SYS_SLICE_FOUND=1
    fi
  fi
}

show_vectors()
{
  for ((i=0;i<${#vector_name_arr[@]};i++))
  do
    echo -n "${vector_id_arr[${vector_name_arr[$i]}]}:$vector_prefix${vector_name_arr[$i]} "
  done
  echo ""
}

declare -A ass_arr

show_data()
{
  for ((i=0;i<${#vector_name_arr[@]};i++))
  do
    if [ "X${vector_id_arr[${vector_name_arr[$i]}]}" = "X" ]; then
      vector_id_arr[${vector_name_arr[$i]}]=$ID
      ID=`expr $ID + 1`
    fi
 
    if [ $SYS_SLICE_FOUND -eq 1 ]; then
      COMPLETE_FILE_PATH="$FILE_PATH/docker-${id_arr[$i]}*.scope"
    else
      COMPLETE_FILE_PATH="$FILE_PATH/${id_arr[$i]}*"
    fi
 
    ls $COMPLETE_FILE_PATH >/dev/null 2>&1
    if [ $? -eq 0 ];then
      echo -n "${vector_id_arr[${vector_name_arr[$i]}]}:$vector_prefix${vector_name_arr[$i]}|"
      while IFS=" " read index value
      do
        ass_arr[$index]=$value
      done<$COMPLETE_FILE_PATH/memory.stat

      convert_into_MB ${ass_arr[total_cache]}
      convert_into_MB ${ass_arr[total_rss]}
      convert_into_MB ${ass_arr[total_mapped_file]}
      convert_into_MB ${ass_arr[total_writeback]}
      if [ "X${ass_arr[total_pgpgin]}" == "X" ];then
        echo -n "0"
      else
        echo -n "${ass_arr[total_pgpgin]} "
      fi
      if [ "X${ass_arr[total_pgpgout]}" == "X" ];then
        echo -n "0"
      else
        echo -n "${ass_arr[total_pgpgout]} "
      fi
      if [ "X${ass_arr[total_pgfault]}" == "X" ];then
        echo -n "0"
      else
        echo -n "${ass_arr[total_pgfault]} "
      fi
      echo ""
    else
      echo "${vector_id_arr[${vector_name_arr[$i]}]}:$vector_prefix${vector_name_arr[$i]}|0 0 0 0 0 0 0"
    fi
  done
}
ls /cgroup >/dev/null 2>&1

if [ $? -eq 0 ];then
  stats_path="/cgroup"
else
  ls /sys/fs/cgroup >/dev/null 2>&1
  if [ $? -eq 0 ];then
    stats_path="/sys/fs/cgroup"
  else
    echo "cgroup directory not found"
    exit -1
  fi
fi

while getopts i:v:X:L:f:? arg
do
  case $arg in
    v) VECTOR_FLAG="1"
       export vector_prefix=$OPTARG
       ;;
    X) export vector_prefix=$OPTARG
       ;;
    L) if [ "X$OPTARG" = "Xheader" -o "X$OPTARG" = "XHEADER" ]; then
         VECTOR_FLAG="1"
       fi
       ;;
    i) INTERVAL_SECS=$OPTARG
       freq_option="1"
       echo $INTERVAL_SECS | grep '^[0-9]*$' 2>&1 >/dev/null
       if [ $? != 0 ];then
         echo "Integer expression must required with -i option!"
         exit -1
       fi
       ;;
    f) FILE_PATH=$OPTARG ;;
    *) display_help_and_exit ;;
    ?) display_help_and_exit ;;
  esac
done

if [ "X$vector_prefix" == "Xnoprefix" ];then
  vector_prefix=""
fi

check_for_file

docker ps >/dev/null 2>&1
if [ $? -ne 0 ];then
  echo "Unable to run docker ps command"
  exit -1
fi

declare -A vector_id_arr

id_arr=($(docker ps | grep -v CONTAINER|awk '{print $1}'))
vector_name_arr=($(docker ps|grep -v CONTAINER|awk '{print $NF}'))

ID=0
while [ $ID -lt ${#vector_name_arr[@]} ]
do
 vector_id_arr[${vector_name_arr[$ID]}]=$ID
 ID=`expr $ID + 1`
done

if [ "X$VECTOR_FLAG" = "X1" ];then  #To get vector list from iostat command
  show_vectors
else #To get data on every specified interval
  while :
  do
    isTestOver $MON_TEST_RUN
    # Test is over. So exit with success status
    if [ $? = 1 ]; then
      exit 0
    fi
    show_data
    prev_id_arr=(${id_arr[@]})
    prev_vector_name_arr=(${vector_name_arr[@]})
    lib_sleep $INTERVAL_SECS
    id_arr=($(docker ps | grep -v CONTAINER|awk '{print $1}'))
    vector_name_arr=($(docker ps|grep -v CONTAINER|awk '{print $NF}'))
    for ((i=0;i<${#prev_id_arr[@]};i++))
    do
      echo ${id_arr[@]}| grep ${prev_id_arr[$i]} >/dev/null 2>&1
      if [ $? -ne 0 ];then
        id_arr[${#id_arr[@]}]=${prev_id_arr[$i]}
        vector_name_arr[${#vector_name_arr[@]}]=${prev_vector_name_arr[$i]}
      fi
    done
  done
fi

exit 0

