# Name - cm_mpstat_dynamic (CPU statistics)
# Purpose - This is a sample dynamic custom monitor to get data from mpstat -P ALL  command
# It parses output of mpstat -P ALL and outputs all data in one line
# Option - 'Run Once'
# GDF - cm_mpstat.gdf 
# Keyword -
# DYNAMIC_VECTOR_MONITOR 192.168.1.66 NS cm_mpstat.gdf 2 cm_mpstat -i 10000 EOC cm_mpstat -v
#
# mpstat command output -
#Linux 2.6.35.12-88.CAV_10.fc14.x86_64 (cavisson-server-ns1)     07/25/2011      _x86_64_        (4 CPU)
#
#11:37:38 AM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest   %idle
#11:37:48 AM  all    0.25    0.00    0.25    0.38    0.00    0.00    0.00    0.00   99.12
#11:37:48 AM    0    0.10    0.00    0.30    1.00    0.00    0.00    0.00    0.00   98.60
#11:37:48 AM    1    0.70    0.00    0.20    0.40    0.00    0.00    0.00    0.00   98.70
#11:37:48 AM    2    0.00    0.00    0.10    0.00    0.00    0.00    0.00    0.00   99.90
#11:37:48 AM    3    0.30    0.00    0.40    0.10    0.00    0.00    0.00    0.00   99.20
#
#11:37:48 AM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest   %idle
#11:37:58 AM  all    6.22    0.00    8.55    0.15    0.00    0.17    0.00    0.00   84.90
#11:37:58 AM    0    4.20    0.00    4.10    0.50    0.00    0.80    0.00    0.00   90.41
#11:37:58 AM    1    9.32    0.00   13.23    0.10    0.00    0.00    0.00    0.00   77.35
#11:37:58 AM    2    5.78    0.00   11.85    0.00    0.00    0.00    0.00    0.00   82.37
#11:37:58 AM    3    5.50    0.00    5.10    0.00    0.00    0.00    0.00    0.00   89.40
#
#
# mpstat command output on some server in Kohl's -
# guest is not there. intr/s is there. 
# We will ignore intr/s and put 0 for guest in this case.
# In future, if needed we can add different GDF
#Linux 2.6.18-308.4.1.el5 (l0905331)     08/13/2012
#
#08:24:35 AM  CPU   %user   %nice    %sys %iowait    %irq   %soft  %steal   %idle    intr/s
#08:24:35 AM  all    5.82    0.00    1.35    0.11    0.01    0.23    0.00   92.48   1363.29
#08:24:35 AM    0    0.74    0.00    0.59    0.04    0.00    0.08    0.00   98.55    326.91
#08:24:35 AM    1    0.99    0.00    0.84    0.63    0.00    0.11    0.00   97.43      3.18
#08:24:35 AM    2    0.69    0.00    0.48    0.04    0.00    0.07    0.00   98.73      0.11
#08:24:35 AM    3    1.20    0.01    0.66    0.07    0.00    0.08    0.00   97.97      0.01
#
# Custom Monitor Output -

#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

set_mon_shell
INTERVAL_SECS=$MON_FREQUENCY
VECTOR_FLAG="0"
SAMPLE_NUMBER=0
E_O_NUM=0

#if [ -f /etc/lsb-release ]; then
#  version=`cat /etc/lsb-release | grep DISTRIB_RELEASE | awk -F'=' '{print $2}' | cut -d'.' -f 1`
#fi

show_data()
{

  #Find the format of mpstat output.   
  intr_field_present=0
  mpstat -P ALL|grep "intr" >/dev/null 
  if [ $? = 0 ]; then
    intr_field_present=1
  fi
   
  #Find no. of cpu
  cpu_num=`mpstat -P ALL|grep "CPU)"|awk '{print $(NF-1)}'|tr -d '('`
  #Counting the number of fields from the average CPU Utilization instead of cumulative, As there are changes in Mpstat command output
  # from version 9.2 
  # NOW 
  #  08:44:50 AM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
  #  08:44:50 AM  all    4.84    0.00    1.27    0.57    0.00    0.01    0.00    0.00    0.00   93.30
  #  08:44:50 AM    0    5.07    0.00    1.33    0.48    0.00    0.01    0.00    0.00    0.00   93.11
  #  08:44:50 AM    1    4.67    0.00    1.21    0.47    0.00    0.01    0.00    0.00    0.00   93.64
  #  08:44:50 AM    2    4.80    0.00    1.27    0.63    0.00    0.01    0.00    0.00    0.00   93.29
  #  08:44:50 AM    3    4.83    0.00    1.28    0.70    0.00    0.00    0.00    0.00    0.00   93.19#    
  # BEFORE
  #  08:24:35 AM  CPU   %user   %nice    %sys %iowait    %irq   %soft  %steal   %idle    intr/s
  #  08:24:35 AM  all    5.82    0.00    1.35    0.11    0.01    0.23    0.00   92.48   1363.29
  #  08:24:35 AM    0    0.74    0.00    0.59    0.04    0.00    0.08    0.00   98.55    326.91
  #  08:24:35 AM    1    0.99    0.00    0.84    0.63    0.00    0.11    0.00   97.43      3.18
  #  08:24:35 AM    2    0.69    0.00    0.48    0.04    0.00    0.07    0.00   98.73      0.11
  #  08:24:35 AM    3    1.20    0.01    0.66    0.07    0.00    0.08    0.00   97.97      0.01

  num_of_field=`mpstat -P ALL 1 1|tail -1| awk '{print NF}'`
  #echo "num_of_field = $num_of_field"

  while true
  do
    isTestOver $MON_TEST_RUN
    # Test is over. So exit with success status
    if [ $? = 1 ]; then
      exit 0
    fi
  
    #tail -$num_lines $MPSTAT_OUT_FILE | awk '{printf("%d %d %d %d %d %d %d %d %d ", $4*100, $5*100, $6*100, $7*100, $8*100, $9*100, $10*100, $11*100, $12*100)}'
    #tail -$num_lines $MPSTAT_OUT_FILE | awk '{printf $4"  "$5"  "$6"  "$7"  "$8"  "$9"  "$10" " $11" "$12"\n"}'
    #when we run actual command from command line then it return 9 field but in scenario it returns 8 field because it terminate AM/PM field 

    #On some server mpstat command gives output in following format:
    #  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest   %idle
    #And on some server in kohl's mpstat command gives output in following format:
    #  CPU   %user   %nice    %sys %iowait    %irq   %soft  %steal   %idle    intr/
    #In order to handle both the above given formats, following check have been applied

    #Only %guest and intr/ are the non common fields in both the outputs

    #One case has not been handled, when data will come with intr/s field in Ubuntu 16.04. We donot know the field where %gnice field will be placed when intr/s comes in picture. So its handling has not been done. With 16.04 version the data line seems like :
    
    # 06:14:52 AM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
    # 06:14:52 AM  all    0.68    0.02    0.66    2.40    0.00    0.02    0.00    0.00    0.00   96.22
    # 06:14:52 AM    0    0.64    0.00    0.63    1.86    0.00    0.02    0.00    0.00    0.00   96.85

    arr=(`mpstat -P ALL $INTERVAL_SECS 1|tail -n $cpu_num|tr -s ' ' '_'`)
    for(( i=0; i<${#arr[@]}; i++ ))
    do 
      if [ $num_of_field -eq 12 ]; then
        if [ "X$vector_prefix" = "Xnoprefix" -o "X$vector_prefix" = "X" ]; then
          if [ $intr_field_present -eq 1 ];then
            # Ignore intr field and put 0 for guest
            echo ${arr[$i]} | awk -F'_' '{printf $2":CPU"$2"|"$3" "$4" "$5" "$6" "$7" "$8" "$9" ""0"" "$10"\n"}'
          else
            echo ${arr[$i]} | awk -F'_' '{printf $2":CPU"$2"|"$3" "$4" "$5" "$6" "$7" "$8" "$9" "$10" "$12"\n"}'
          fi
        else
          if [ $intr_field_present -eq 1 ];then
            # Ignore intr field and put 0 for guest
            echo ${arr[$i]} | awk -F'_' '{printf $2":%sCPU"$2"|"$3" "$4" "$5" "$6" "$7" "$8" "$9" ""0"" "$10"\n",ENVIRON["vector_prefix"]}'
          else
            echo ${arr[$i]} | awk -F'_' '{printf $2":%sCPU"$2"|"$3" "$4" "$5" "$6" "$7" "$8" "$9" "$10" "$12"\n",ENVIRON["vector_prefix"]}'
          fi
        fi
      else
        if [ "X$vector_prefix" = "Xnoprefix" -o "X$vector_prefix" = "X" ]; then
          if [ $intr_field_present -eq 1 ];then
            # Ignore intr field and put 0 for guest
            echo ${arr[$i]} | awk -F'_' '{printf $2":CPU"$2"|"$3" "$4" "$5" "$6" "$7" "$8" "$9" ""0"" "$10"\n"}'
          else
            echo ${arr[$i]} | awk -F'_' '{printf $2":CPU"$2"|"$3" "$4" "$5" "$6" "$7" "$8" "$9" "$10" "$11"\n"}'
          fi
        else
          if [ $intr_field_present -eq 1 ];then
            # Ignore intr field and put 0 for guest
            echo ${arr[$i]} | awk -F'_' '{printf $2":%sCPU"$2"|"$3" "$4" "$5" "$6" "$7" "$8" "$9" ""0"" "$10"\n",ENVIRON["vector_prefix"]}'
          else
            echo ${arr[$i]} | awk -F'_' '{printf $2":%sCPU"$2"|"$3" "$4" "$5" "$6" "$7" "$8" "$9" "$10" "$11"\n",ENVIRON["vector_prefix"]}'
          fi
        fi
      fi 
    done

    SAMPLE_NUMBER=`expr $SAMPLE_NUMBER + 1`
    #sleep $INTERVAL_SECS
    #lib_sleep $INTERVAL_SECS
  done
}


#[root@cavisson-server-ns1 bin]# mpstat -P ALL
#Linux 2.6.35.12-88.CAV_10.fc14.x86_64 (cavisson-server-ns1)     07/25/2011      _x86_64_        (4 CPU)
#
#05:00:19 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest   %idle
#05:00:19 PM  all    1.21    0.00    1.30    0.24    0.00    0.03    0.00    0.00   97.22
#05:00:19 PM    0    1.21    0.00    1.51    0.63    0.00    0.10    0.00    0.00   96.55
#05:00:19 PM    1    1.61    0.00    1.94    0.22    0.00    0.00    0.00    0.00   96.23
#05:00:19 PM    2    1.07    0.00    0.92    0.07    0.00    0.00    0.00    0.00   97.93
#05:00:19 PM    3    0.97    0.00    0.82    0.03    0.00    0.00    0.00    0.00   98.18

# This will show all CPU on single line
#CPU0 CPU1 CPU2 CPU3
show_vectors()
{ 
  data=(`mpstat -P ALL|tail -n +5|tr -s ' ' '_'`)
  for(( i=0; i<${#data[@]}; i++ ))
  do
    if [ "X$vector_prefix" = "Xnoprefix" -o "X$vector_prefix" = "X" ]; then
      CPU_LIST+=`echo ${data[$i]} | awk -F'_' '{printf $2":CPU%s ", $2}'`
    else
      CPU_LIST+=`echo ${data[$i]} | awk -F'_' '{printf $2":%sCPU%s ", ENVIRON["vector_prefix"], $2}'`
    fi
  done
  echo $CPU_LIST
  rm -f $MPSTAT_OUT_FILE
}


display_help_and_exit()
{
  echo "$1"
  echo "Usage: cm_mpstat_dynamic [-v <vector_prefix> ] or [-i <Interval>]"
  echo "-v: option used to get vector list for Command (mpstat -P ALL). Prefix will added before these vector names"
  echo "-i: used for interval (in seconds)"
  echo "-X: used for <vector prefix/noprefix>"
  echo "-L: used for <header/data>"
  exit -1
}


#if [ "X$#" = "X0" ];then
# display_help_and_exit
#  exit -1
#fi

while getopts i:v:X:L:? arg
do
  case $arg in
    v) VECTOR_FLAG="1"
       export vector_prefix=$OPTARG
       ;;
    X) export vector_prefix=$OPTARG
       ;;
    L) if [ "X$OPTARG" = "Xheader" -o "X$OPTARG" = "XHEADER" ]; then
         VECTOR_FLAG="1"
       fi
       ;;
    i) INTERVAL_SECS=$OPTARG
       freq_option="1"
       echo $INTERVAL_SECS | grep '^[0-9]*$' 2>&1 >/dev/null
       if [ $? != 0 ];then
         echo "Integer expression must required with -i option!"
         exit -1
       fi
       ;;
    *) display_help_and_exit ;;
    ?) display_help_and_exit ;;
  esac
done

if [ "X$VECTOR_FLAG" = "X1" ];then  #To get vector list from iostat command
  show_vectors
else #To get data on every specified interval
  show_data
fi

exit 0
