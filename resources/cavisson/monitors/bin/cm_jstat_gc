# Name    : cm_jstat_gc 
# Purpose : To get Java GC Stats for specified application by using lvmid (java virtual machine ID similar to pid) 
# Usage   :
#  cm_jstat_gc  -p <pid> or -f <pidfile> or -c <cmd> or -s <search pattern>, -i <interval in msec> -D 
#    -p: option will specify for the pid of the java process.

#    -f: option specifies the filename which contains the pid of the java process.
#        read the pid from file specified, as do same as -p option

#    -c: option will specify the command (with absolute path) which will return the pid of the java process.
#        At first read already existing "UserName"_"CmdName".pid in /tmp/          
#        Ex: if user is netstorm & command is ps -ef | grep xyz ; then file name will be netstorm_ps.pid
#        Case:1 Empty File --> run command which will create this file.  
#        Case:2 Process in file not running -->run command which will create this file with new pid.
#
#    -s : option will specify the pattern that is used to search and return the pid of the java process.
#    -i : option will specify the interval in milli seconds, default is 10000 ms
#    -D: option is to enable debug.
#
#
#
#

#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi
              
. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

set_mon_shell

debug_log()
{
  if [ $DEBUG = 1 ];then
    echo "`date +'%F %X'`|$*" >> $DEBUG_LOG_FILE
  fi
}

error_log()
{
    echo "Error: $*"
    echo "`date +'%F %X'`|$*" >> $ERROR_LOG_FILE
}

display_help_and_exit()
{
  echo "ERROR: Incorrect usage"
  echo "Usage:"
  echo "cm_jstat_gc  -p <pid> or -f <pidfile> or -c <cmd> or -s <search pattern>, -i <interval in msec> -D"
  echo "  -p: option will specify the pid of the java process."
  echo "  -f: option specifies the filename which contains the pid of the java process."
  echo "  -c: option will specify the command (with absolute path) which will return the pid of the java process."
  echo "  -s: option will specify the search pattern to find the pid of the java process."
  echo "  Only one of options -p, -f , -c and -s can be given at a time !"
  echo "  -i : option will specify the interval in milli seconds, default is 10000 ms."
  echo "  -D: option is to enable debug."
  exit 1
}

PID="$$"
run_jstat()
{
  debug_log "run_jstat() Called: PROCESS_ID = $PROCESS_ID "
  JSTAT_OUT_FILE=/tmp/cm_jstat_gc.out$$

  #Replaced trap with nsi_kill_child_of_monitors because trap is not working on AIX, AIX ex and SunOS.
  #trap 'kill %1; rm -f $JSTAT_OUT_FILE $PROCESS_FILE_BY_COMMAND; exit' 1 2 3 4 5 15
  #nohup $UNIX_SHELL nsi_kill_child_of_monitors -p $PID -i 10 -f $JSTAT_OUT_FILE 1>/dev/null 2>/dev/null&

  #JSTAT_CMD="$JSTAT -gc $PROCESS_ID $INTERVAL_ORG"
  jstat -gc $PROCESS_ID $INTERVAL_ORG > $JSTAT_OUT_FILE &

  nohup $UNIX_SHELL nsi_kill_child_of_monitors -p $PID -i 10 -f $JSTAT_OUT_FILE 2>/dev/null&

  lib_sleep $INTERVAL

  while true
  do
   isTestOver $MON_TEST_RUN
   # Test is over. So exit with success status
    if [ $? = 1 ]; then
      exit 0
    fi

    tail -1 $JSTAT_OUT_FILE
    #RET=$?
    lib_sleep $INTERVAL
  done

  #Header line comes in this format to remove header line we use above code segment 
  #jstat -gc $PROCESS_ID $INTERVAL_ORG
}

create_pid_file_by_cmd()
{
  debug_log "create_pid_file_by_cmd(): Called"
  PROCESS_ID=`cat $PROCESS_FILE 2>/dev/null`
  if [ $? = 0 -a "XX$PROCESS_ID" != "XX" ];then
    debug_log "create_pid_file_by_cmd(): Process id file $PROCESS_FILE already exists with PROCESS_ID = $PROCESS_ID"
    # chk process is already running
    ps -p $PROCESS_ID >/dev/null 2>&1
    if [ $? = 0 ];then
      debug_log "create_pid_file_by_cmd(): Process $PROCESS_ID is already running." 
      return
    fi
  fi
  #get process is by running command
  $COMMAND >$PROCESS_FILE 2>/dev/null
  if [ $? != 0 ];then
    error_log "Error in the execution of the command $COMMAND"
    exit 1
  fi
  #this time have to exit on any error
  chk_process_file
}

get_search_pattern_list()
{
  echo ${SEARCH_PATTERN_ARR[0]}
}

more_than_one_ps()
{
  if [ $search_count -gt 0 ]; then
    error_log "More than one process running with the specified search pattern `get_search_pattern_list`"
  elif [ "XX$COMMAND" != "XX" ]; then
    error_log "More than one process id returned by the specified command '$COMMAND'"
  else
    error_log "More than one process id (`cat $PROCESS_FILE`) in the specified file $PROCESS_FILE is not running."
  fi
  exit 1
}

ps_not_running_error()
{
  if [ $search_count -gt 0 ]; then
    error_log "No process running with the specified search pattern `get_search_pattern_list`"
  elif [ "XX$COMMAND" != "XX" ]; then
    error_log "No process id returned by the specified command '$COMMAND'"
  elif [ "XX$PROCESS_ID_ARG" != "XX" ]; then
    error_log "Process id ($PROCESS_ID_ARG) specified is not running"
  else
    if [ -s $PROCESS_FILE ]; then
      error_log "Process id (`cat $PROCESS_FILE`) in the specified file $PROCESS_FILE is not running."
    elif [ -f $PROCESS_FILE ]; then
      error_log "File $PROCESS_FILE is empty."
    else
      error_log "File $PROCESS_FILE does not exist."
    fi
  fi
  exit 1
}


chk_process_file()
{
  debug_log "chk_process_file() Called"

  if [ ! -f $PROCESS_FILE ]; then
      ps_not_running_error
  fi
  
  if [ "XX$PROCESS_FILE" != "XX" ];then
    FILE_WORD_COUNT=`cat $PROCESS_FILE | wc -w 2>/dev/null`  
    RET=$?
    if [ "X$RET" != "X0" -o "XX$FILE_WORD_COUNT" = "XX0" ];then
      ps_not_running_error
    fi
    # that is bug in AIX machine
    #if [ "XX$FILE_WORD_COUNT" != "XX1" ];then
    #  more_than_one_ps
    #fi

    if [ $FILE_WORD_COUNT != 1 ];then
      more_than_one_ps
    fi
    PROCESS_ID=`cat $PROCESS_FILE 2>/dev/null`
    if [ $? != 0 ];then
      error_log "Unable to get pid from $PROCESS_FILE file."
      exit 1
    fi
  

    debug_log "chk_process_file(): PROCESS_ID = $PROCESS_ID from $PROCESS_FILE file"
 fi
}
###########################################################################################################################################

if [ $# = 0 ];then
 display_help_and_exit
fi

init_search_data()
{
  debug_log "Calling set_search_arr()"
  #Intializing the SEARCH_PATTERN_ARR
  unset SEARCH_PATTERN_ARR[*]
  search_count=0
}

set_ps_file()
{
  debug_log "set_ps_file() Called"

  TEMP="cm_jstat_gc_"$MON_TEST_RUN"_"$VECTOR_NAME""
  PROCESS_FILE_BY_COMMAND="/tmp/$TEMP.pid"
  >$PROCESS_FILE_BY_COMMAND
}


set_ps_cmd()
{
  debug_log "set_ps_cmd() Called"
  OS_NAME=`uname`
  if [ "X$OS_NAME" = "XSunOS" ]; then
    PS_CMD_FOR_DATA="/usr/bin/ps"
    PS_CMD_FOR_SEARCH="/usr/ucb/ps -auxwww"
    PS_GREP_CMD="/usr/bin/egrep -e"  #Search for a pattern_list(full regular expression that
                                     #begins with a -).
  else #Linux,AIX
    PS_CMD_FOR_DATA="ps"
    PS_CMD_FOR_SEARCH="ps -ef" # Do not use ps -lef as need pid at filed 2
    PS_GREP_CMD="grep -e"
  fi
}

set_command_for_search()
{
  debug_log "Calling method set_command_for_search()"
  #Search the pattern and set the COMMAND variable that is used in create_pid_file_by_cmd()
  # Limitation - If two process match, it will give first process id

  # We need to filter all other monitors also as they may be also 
  # searching with same pattern - Changed this on May 18, 2010 by Neeraj
  # Note  - Do not use grep -v "cm_ps_data|cm_jstat_gc|cm_java_gc_ex|grep" as it did not work
  STATIC_COMMAND="grep -v cm_ps_data | grep -v cm_jstat_gc | grep -v cm_java_gc_ex | grep -v cm_ps_thread_stats | grep -v cm_heap_object_stats | grep -v grep | awk '{print \$2}'"
  i=0
  MULTIPLE_SEARCH_CMD=""
  while [ $i -lt $search_count ]
  do
    #MULTIPLE_SEARCH_CMD=`echo "$MULTIPLE_SEARCH_CMD | grep -e \"${SEARCH_PATTERN_ARR[$i]}\" "`
    MULTIPLE_SEARCH_CMD=`echo "$MULTIPLE_SEARCH_CMD | $PS_GREP_CMD  \"${SEARCH_PATTERN_ARR[$i]}\" "`
    i=`expr $i + 1`
  done
  #eval is required since we have to run this command later
  COMMAND="eval $PS_CMD_FOR_SEARCH $MULTIPLE_SEARCH_CMD | $STATIC_COMMAND"
  debug_log "Value of COMMAND in set_command_for_search() method = $COMMAND"
}


set_debug_log_file()
{
if [ "XX$CAV_MON_HOME" != "XX" ];then
  DEBUG_LOG_FILE="$CAV_MON_HOME/logs/cm_jstat_gc_"$MON_TEST_RUN"_"$VECTOR_NAME"_debug.log"
  ERROR_LOG_FILE="$CAV_MON_HOME/logs/cm_jstat_gc_"$MON_TEST_RUN"_"$VECTOR_NAME"_error.log"
else
  DEBUG_LOG_FILE="/tmp/cm_jstat_gc_"$MON_TEST_RUN"_"$VECTOR_NAME"_debug.log"
  ERROR_LOG_FILE="/tmp/cm_jstat_gc_"$MON_TEST_RUN"_"$VECTOR_NAME"_error.log"
  debug_log "CAV_MON_HOME is not exported, putting logs to /tmp/."
fi
}


PROCESS_ID=""
PROCESS_FILE=""
COMMAND=""
CMD_OUTPUT=""
DEBUG=0
FLAG=0
PS_CMD_FOR_DATA=""
SEARCH_PATTERN=""
INTERVAL=""
INTERVAL_ORG=""

#This gives following error in linux. So sending to dev null.
# Not sure if we need this for other OS
# declare: `SEARCH_PATTERN_ARR[]': not a valid identifier
declare SEARCH_PATTERN_ARR[] 2>/dev/null

#Must set debug log file in the beginning
set_debug_log_file

# Set the COMMAND variable (Must be done before parsing options)

set_ps_cmd

init_search_data

while getopts p:f:c:s:i:D? arg
do
    case $arg in
        p) PROCESS_ID_ARG="$OPTARG"
           PROCESS_ID=$PROCESS_ID_ARG
           FLAG=`expr $FLAG + 1`;;
        f) PROCESS_FILE="$OPTARG"
           FLAG=`expr $FLAG + 1`;;
	c) COMMAND="$OPTARG"
           set_ps_file
           FLAG=`expr $FLAG + 1`;;
        s) SEARCH_PATTERN_ARR[search_count]="$OPTARG"
           if [ $search_count = 0 ];then
             FLAG=`expr $FLAG + 1`
           fi
           search_count=`expr $search_count + 1`;;
        i) INTERVAL="$OPTARG"
           INTERVAL_ORG="$INTERVAL";;
        D) DEBUG=1;;
        ?) display_help_and_exit ;;
    esac
done

if [ $FLAG -gt 1 ];then
  echo "Only one of options -p, -f , -c and -s can be given at a time !"
  exit 1
fi

if [ "XX$MON_OPTION" = "XX" ]; then
  MON_OPTION=2
fi

if [ "X$MON_OPTION" != "X2" ]; then
  echo "Invalid monitor option ($MON_OPTION). It should be 2 (RUN_ONLY_ONCE_OPTION)"
  exit 1
fi

if [ $search_count -gt 0 ]; then
  set_command_for_search
  set_ps_file
fi

if [ "XX$PROCESS_FILE" != "XX" ];then
   chk_process_file
fi

if [ "XX$COMMAND" != "XX" ];then
   PROCESS_FILE="$PROCESS_FILE_BY_COMMAND"
   create_pid_file_by_cmd
fi

if [ "XX$INTERVAL" = "XX" ];then
  INTERVAL=10
  INTERVAL_ORG=10000
else

   
  if [ "$INTERVAL" -gt 1000 ];then
    INTERVAL=`expr "$INTERVAL" / 1000`
  fi
fi

run_jstat

exit 0
