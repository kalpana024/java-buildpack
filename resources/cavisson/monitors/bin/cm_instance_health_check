#
#name : cm_instance_health_check
#Purpose : Monitor to check whether url is accessible or not and get the response time
#          0 if not accessible
#          1 if accessible
#          And if accesible then it finds the response time by hitting the URL
#          -u Specify url to be hit
#          -i Interval in seconds after which the monitor will produce the result (default progress I sec)
#Author : Pitphilai Pandey
#Date : 15-Oct-2015
#


#Set CAV_MON_HOME, if not set
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

#including this shell for the use of various global variables
. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

#Variable decleration
INTERVAL_SECS=$MON_FREQUENCY
TIME_OUT=15
PING_URL=""
STATUS_FLAG=1
PORT_STATUS=0
PING_RESPONSE=0.000

set_debug_log_file()
{
  if [ "XX$CAV_MON_HOME" != "XX" ];then
    ERROR_LOG_FILE="$CAV_MON_HOME/logs/cm_instance_health_check_"$MON_TEST_RUN"_"$VECTOR_NAME"_error.log"
  else
    ERROR_LOG_FILE="/tmp/cm_instance_health_check_"$MON_TEST_RUN"_"$VECTOR_NAME"_error.log"
  fi
}

#Bring data by using curl command
bring_data()
{
    PING_RESPONSE=`curl -o /dev/null -s -w %{time_total} -m $TIME_OUT $PING_URL`
    STATUS_FLAG=`echo $?`
    if [ $STATUS_FLAG -eq 0 ] ; then
       if [ "$PING_RESPONSE" = "0.000" ] ; then
         PORT_STATUS=0
       else     
         PORT_STATUS=1
       fi
    else
      PORT_STATUS=0
      PING_RESPONSE=0.000
    fi
     
}

show_data()
{
  echo "$PORT_STATUS $PING_RESPONSE"
}
Usage()
{
  echo "-u : Option will specify the url"
  echo "-i : Interval in seconds after which the monitor will show the result (default is progress interval)"
  exit -1
}

#########################################################################################################################

set_debug_log_file

while getopts u:i: args
do
  case $args in
    u) PING_URL=$OPTARG 
      ;;
    i) INTERVAL_SECS=$OPTARG
      ;;
    ?) Usage ;;

  esac
done

#Running the shell without any arguements
if [ $# -eq 0 ] ; then
  Usage
  exit -1
fi
#echo "$PING_URL"
#echo "$INTERVAL_SECS"
#Check whether url is given or not
if [ "$PING_URL" = "" ] ; then
   echo " -u <ping url> option is mandatory"
   Usage
   exit -1
fi

#
while :
  do
    START=`date +%s.%3N`
    bring_data
    END=`date +%s.%3N`

#If time diff is less than Interval then sleep for the remaining time  
    if [ $BC_AVAILABLE -eq 1 ] ; then
      TIME_DIFF=`echo "$END - $START" | bc`
      if [[ $(echo $TIME_DIFF '<' $INTERVAL_SECS | bc -l) -eq 1 ]];then
        SLEEP_TIME=`echo "$INTERVAL_SECS - $TIME_DIFF" | bc`
        show_data
        sleep $SLEEP_TIME
      else
        show_data
      fi
    else
      TIME_DIFF=`awk -v "var1=$END" -v "var2=$START" 'BEGIN{printf "%.3f", (var1-var2}'`
      TIME_FLAG=`echo |awk -v n1=$TIME_DIFF -v n2=$INTERVAL_SECS  '{if (n1<n2) printf("1"); else printf("0");}'`
      if [ $TIME_FLAG -eq 1 ]; then
        SLEEP_TIME=`awk -v "var1=$INTERVAL_SECS" -v "var2=$TIME_DIFF" 'BEGIN{printf "%.3f", (var1-var2}'`
        show_data
        sleep $SLEEP_TIME
      else
        show_data
      fi
    fi
  done
