################################################################################
# Name    : cm_jk_apache_stats (apache server jk statistics)
# Purpose : This is a sample dynamic monitor to get data from apache server using curl command 
#           It parses output of curl and outputs all data in one line
# Option  : 'Run Once'
# GDF     : cm_jk_apache_stats.gdf in netstorm machine ($NS_WDIR/sys)
# Keyword :
#           DYNAMIC_VECTOR_MONITOR 192.168.147.171 VM_JK_MON cm_jk_apache_stats.gdf 2 cm_jk_apache_stats -i 10 -u "www.eee.cn/jk-state" -j ALL EOC cm_jk_apache_stats -u "www.eee.cn/jk-state" -v JK_
#                                  OR
#           CUSTOM_MONITOR 192.168.147.171 cm_jk_status.gdf VM_JK 2 cm_jk_status -i 10 -u "www.eee.cn/jk-state" -j worker1#
# Date    : Monday, 31 Dec 2012 
###############################################################################

if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

set_mon_shell

JK_INSTANCE_NAME="ALL"
RUNTIME_FILE=$CAV_MON_TMP_DIR/jk_status_runtime.$$
JK_STATUS_OUT_FILE=$CAV_MON_TMP_DIR/jk_status_out_file.$$
JK_HTML_OUT_FILE=$CAV_MON_TMP_DIR/jk_status_html_out_file_$$.html
DEBUG_LOG_FILE=$CAV_MON_TMP_DIR/jk_status.debug.$$

NUM_VECTOR="1"
is_cmd_failed=0
sample_count=1

DEBUG=0
INTERVAL_SECS=$MON_FREQUENCY
i=0

debug_log()
{
  if [ "X$DEBUG" = "X0" ]; then
    return
  else
    #echo "Debug: $*" 
    echo "Debug: $*" >> $DEBUG_LOG_FILE
    #echo "`date +'%F %X'`|$*" >> $DEBUG_LOG_FILE
  fi
}

calculate_num_vectors()
{
  debug_log "calculate_num_vectors Method Called."

  if [ "X$JK_INSTANCE_NAME" != "XALL" ];then
    NUM_VECTOR=`echo $JK_INSTANCE_NAME | awk -F' ' '{print NF}'`
    if [ "X$NUM_VECTOR" = "X0" ];then
      display_help_and_exit "Please provide at least on jk instance." 
    fi
  else 
    NUM_VECTOR=`grep "]&nbsp;</td><td>" $JK_STATUS_OUT_FILE | wc -l`
  fi

  debug_log "Total NUM_VECTOR = $NUM_VECTOR"
}

run_cmd()
{
  debug_log "run_cmd Method called."
  curl http://${URL} >/dev/null 2>&1 >$RUNTIME_FILE
  if [ $? != 0 ];then
    ns_log_event "Major" "Running command 'curl http://${URL}' failed."
    is_cmd_failed=1  
    return 1
  else
    is_cmd_failed=0 
  fi

  sed -e '/<table><tr><th>&nbsp;/,/table/!d' $RUNTIME_FILE > $JK_STATUS_OUT_FILE

  if [ "X$DEBUG" = "X1" ]; then
    echo "-------------------------- :Sample $sample_count: -----------------------------------" >> $JK_HTML_OUT_FILE
    cat $JK_STATUS_OUT_FILE >> $JK_HTML_OUT_FILE 
    echo "" >> $JK_HTML_OUT_FILE
    sample_count=`expr $sample_count + 1`
  fi
}

#Content of file JK_STATUS_OUT_FILE...

#Name	Act	State	D	F	M	V	Acc	Sess	Err	CE	RE	Wr	Rd	Busy	Max	Con	Route	RR	Cd	Rs	LR	LE
#[S] 	worker1	ACT	OK	0	100	1	160	522086 (1/sec)	123617 (0/sec)	0	3048	0	366M (873 /sec)	5.4G (13K/sec)	5	53	14	worker1	 	 	0/0	439201	 
#[S] 	worker2	ACT	OK	0	100	1	168	498712 (1/sec)	117190 (0/sec)	0	2712	0	419M (1.0K/sec)	5.2G (12K/sec)	1	64	12	worker2	 	 	0/0	439201	 
#[S] 	worker3	ACT	OK	0	100	1	174	478960 (1/sec)	124449 (0/sec)	0	2788	0	512M (1.2K/sec)	5.5G (13K/sec)	2	58	15	worker3	 	 	0/0	439201	 
#[S] 	worker4	ACT	OK	0	100	1	157	634041 (1/sec)	120377 (0/sec)	0	2772	0	427M (1.0K/sec)	5.2G (13K/sec)	2	31	14	worker4	 	 	0/0	439201	 
#[S] 	worker5	ACT	OK	0	100	1	159	492537 (1/sec)	119062 (0/sec)	0	3770	0	367M (875 /sec)	5.3G (13K/sec)	1	61	16	worker5	 	 	0/0	439201	 

init_cumulative_data()
{
  debug_log "init_cumulative_data Method called."

  debug_log "NUM_VECTOR = $NUM_VECTOR"
  for(( i = 1; i <= NUM_VECTOR; i++))
  do
    debug_log "i = $i"

    #acc_pre_value
    acc_pre_value[$i]=`grep ">${vector_list_array[$i]}<"  $JK_STATUS_OUT_FILE | awk -F'<td>' '{print $10}' | awk -F' ' '{print $1}'`

    #sess_pre_value
    sess_pre_value[$i]=`grep ">${vector_list_array[$i]}<"  $JK_STATUS_OUT_FILE | awk -F'<td>' '{print $11}' | awk -F' ' '{print $1}'` 

    #wr_pre_value
    wr_pre_value[$i]=`grep ">${vector_list_array[$i]}<"  $JK_STATUS_OUT_FILE | awk -F'<td>' '{print $15}' | awk -F' ' '{print $1}'` 
    debug_log "Beforee MB conversion: wr_pre_value = ${wr_pre_value[$i]}"
    wr_pre_value[$i]=`convert_into_MB "${wr_pre_value[$i]}"`
    #wr_pre_value[$i]=$out_val 
    debug_log "After MB conversion: wr_pre_value = ${wr_pre_value[$i]}"

    #rd_pre_value
    rd_pre_value[$i]=`grep ">${vector_list_array[$i]}<"  $JK_STATUS_OUT_FILE | awk -F'<td>' '{print $16}' | awk -F' ' '{print $1}'` 
    debug_log "Beforee MB conversion: rd_pre_value = ${rd_pre_value[$i]}"
    rd_pre_value[$i]=`convert_into_MB "${rd_pre_value[$i]}"`
    #rd_pre_value[$i]=$out_val
    debug_log "After MB conversion: rd_pre_value = ${rd_pre_value[$i]}"

    debug_log "acc_pre_value[$i] = ${acc_pre_value[$i]}, sess_pre_value[$i] = ${sess_pre_value[$i]}, wr_pre_value[$i] = ${wr_pre_value[$i]}, rd_pre_value[$i] = ${rd_pre_value[$i]}"
  done

    debug_log "Init Data: acc_pre_value = ${acc_pre_value[@]}, sess_pre_value = ${sess_pre_value[@]}, wr_pre_value = ${wr_pre_value[@]}, rd_pre_value = ${rd_pre_value[@]}"
}

#This function will return 1 on failure and last character on success
check_last_char()
{
  given_value=$1

  debug_log "check_last_char Method Called, given_value = [$given_value]"

  if [ "X$given_value" = "X" ];then
    echo "NULL" 
    return 1 
  fi

  num_char=`echo "$given_value" | wc -c`
  num_char=`expr $num_char - 1`

  debug_log "num_char = $num_char"
  echo "`echo "$given_value" | cut -c $num_char`"
}

#This function will convet given data into MB or return 1 on failure
convert_into_MB()
{
  in_val=$1
  debug_log "convert_into_MB Method Called, in_val = [$in_val]"

  last_char=`check_last_char $in_val`
  debug_log "Last char: last_char = $last_char"
  if [ "X$last_char" = "XNULL" ];then
    return 1 
  fi

  if [ "X$last_char" = "XG" ];then
    in_val_without_MKG_suffix=`echo "${in_val%?}"`
    if [ $BC_AVAILABLE -eq 1 ];then 
      out_val=`echo "scale=4; $in_val_without_MKG_suffix * 1024" |bc`
    else 
      out_val=`awk -v "var1=$in_val_without_MKG_suffix" 'BEGIN{printf "%.4f", (var1 * 1024)}'`
    fi
  elif [ "X$last_char" = "XM" ];then
    in_val_without_MKG_suffix=`echo "${in_val%?}"`
    out_val=$in_val_without_MKG_suffix
  elif [ "X$last_char" = "XK" ];then
    in_val_without_MKG_suffix=`echo "${in_val%?}"`
    if [ $BC_AVAILABLE -eq 1 ];then
      out_val=`echo "scale=4; $in_val_without_MKG_suffix / 1024" |bc`
    else
      out_val=`awk -v "var1=$in_val_without_MKG_suffix" 'BEGIN{printf "%.4f", (var1 / 1024)}'`
    fi
  else #if in byte
    if [ $BC_AVAILABLE -eq 1 ];then
      out_val=`echo "scale=4; $in_val / 1048576" |bc`
    else
      out_val=`awk -v "var1=$in_val" 'BEGIN{printf "%.4f", (var1 / 1048576)}'`
    fi
  fi
 
  echo $out_val
}

convert_into_KB()
{
  in_val=$1
  debug_log "convert_into_KB Method Called, in_val = [$in_val]"

  last_char=`check_last_char $in_val`
  debug_log "Last char: last_char = $last_char"
  if [ "X$last_char" = "XNULL" ];then
    return 1 
  fi

  if [ "X$last_char" = "XG" ];then
    in_val_without_MKG_suffix=`echo "${in_val%?}"`
    if [ $BC_AVAILABLE -eq 1 ];then
      out_val=`echo "scale=4; $in_val_without_MKG_suffix * 1048576" |bc`
    else
      out_val=`awk -v "var1=$in_val_without_MKG_suffix" 'BEGIN{printf "%.4f", (var1 * 1048576)}'`
    fi
  elif [ "X$last_char" = "XM" ];then
    in_val_without_MKG_suffix=`echo "${in_val%?}"`
    if [ $BC_AVAILABLE -eq 1 ];then
      out_val=`echo "scale=4; $in_val_without_MKG_suffix * 1024" |bc`
    else 
      out_val=`awk -v "var1=$in_val_without_MKG_suffix" 'BEGIN{printf "%.4f", (var1 * 1024)}'`
    fi
  elif [ "X$last_char" = "XK" ];then
    in_val_without_MKG_suffix=`echo "${in_val%?}"`
    out_val=$in_val_without_MKG_suffix
  else #if in byte
    if [ $BC_AVAILABLE -eq 1 ];then
      out_val=`echo "scale=4; $in_val / 1024" |bc`
    else
      out_val=`awk -v "var1=$in_val" 'BEGIN{printf "%.4f", (var1 / 1024)}'`
    fi
  fi

  echo $out_val
}

load_data()
{
  debug_log "load_data Method Called."

  run_cmd

  num_fields=19
  j=0

  debug_log "##NUM_VECTOR = $NUM_VECTOR"
  for(( i = 1; i <= NUM_VECTOR; i++))
  do
    if [ "X${id_arr[${vector_list_array[$i]}]}" = "X" ]; then
      id_arr[${vector_list_array[$i]}]=$ID
      ID=`expr $ID + 1`
    fi
    
    debug_log "@@@@@@@ i = $i, j = $j, num_fields = $num_fields"
    vct_start_idx=`expr $j \* $num_fields`
    idx=$vct_start_idx
    debug_log "vct_start_idx = $vct_start_idx, idx = $idx"

    cur_val[$idx]=`grep ">${vector_list_array[$i]}<"  $JK_STATUS_OUT_FILE | awk -F'<td>' '{print $6}' | awk -F'</td>' '{print $1}'`
    debug_log "field = 6, cur_val[$idx] = ${cur_val[$idx]}"
    idx=`expr $idx + 1`

    cur_val[$idx]=`grep ">${vector_list_array[$i]}<"  $JK_STATUS_OUT_FILE | awk -F'<td>' '{print $7}' | awk -F'</td>' '{print $1}'`
    debug_log "field = 7, cur_val[$idx] = ${cur_val[$idx]}"
    idx=`expr $idx + 1`

    cur_val[$idx]=`grep ">${vector_list_array[$i]}<"  $JK_STATUS_OUT_FILE | awk -F'<td>' '{print $8}' | awk -F'</td>' '{print $1}'`
    debug_log "field = 8, cur_val[$idx] = ${cur_val[$idx]}"
    idx=`expr $idx + 1`

    cur_val[$idx]=`grep ">${vector_list_array[$i]}<"  $JK_STATUS_OUT_FILE | awk -F'<td>' '{print $9}' | awk -F'</td>' '{print $1}'`
    debug_log "field = 9, cur_val[$idx] = ${cur_val[$idx]}"
    idx=`expr $idx + 1`

    cur_val[$idx]=`grep ">${vector_list_array[$i]}<"  $JK_STATUS_OUT_FILE | awk -F'<td>' '{print $10}' | awk -F' ' '{print $1}'`
    debug_log "field = 10, cur_val[$idx] = ${cur_val[$idx]}"
    idx=`expr $idx + 1`

    cur_val[$idx]=`grep ">${vector_list_array[$i]}<"  $JK_STATUS_OUT_FILE | awk -F'<td>' '{print $10}' | awk -F'(' '{print $2}'| awk -F'/' '{print $1}'`
    debug_log "field = 10, cur_val[$idx] = ${cur_val[$idx]}"
    idx=`expr $idx + 1`

    cur_val[$idx]=`grep ">${vector_list_array[$i]}<"  $JK_STATUS_OUT_FILE | awk -F'<td>' '{print $11}' | awk -F' ' '{print $1}'`
    debug_log "field = 11, cur_val[$idx] = ${cur_val[$idx]}"
    idx=`expr $idx + 1`

    cur_val[$idx]=`grep ">${vector_list_array[$i]}<"  $JK_STATUS_OUT_FILE | awk -F'<td>' '{print $11}' | awk -F'(' '{print $2}'| awk -F'/' '{print $1}'`
    debug_log "field = 11, cur_val[$idx] = ${cur_val[$idx]}"
    idx=`expr $idx + 1`

    cur_val[$idx]=`grep ">${vector_list_array[$i]}<"  $JK_STATUS_OUT_FILE | awk -F'<td>' '{print $12}' | awk -F'</td>' '{print $1}'`
    debug_log "field = 12, cur_val[$idx] = ${cur_val[$idx]}"
    idx=`expr $idx + 1`

    cur_val[$idx]=`grep ">${vector_list_array[$i]}<"  $JK_STATUS_OUT_FILE | awk -F'<td>' '{print $13}' | awk -F'</td>' '{print $1}'`
    debug_log "field = 13, cur_val[$idx] = ${cur_val[$idx]}"
    idx=`expr $idx + 1`

    cur_val[$idx]=`grep ">${vector_list_array[$i]}<"  $JK_STATUS_OUT_FILE | awk -F'<td>' '{print $14}' | awk -F'</td>' '{print $1}'`
    debug_log "field = 14, cur_val[$idx] = ${cur_val[$idx]}"
    idx=`expr $idx + 1`

    cur_val[$idx]=`grep ">${vector_list_array[$i]}<"  $JK_STATUS_OUT_FILE | awk -F'<td>' '{print $15}' | awk -F' ' '{print $1}'`
    debug_log "field = 15, cur_val[$idx] = ${cur_val[$idx]}"
    idx=`expr $idx + 1`

    cur_val[$idx]=`grep ">${vector_list_array[$i]}<"  $JK_STATUS_OUT_FILE | awk -F'<td>' '{print $15}' | awk -F'(' '{print $2}'| awk -F'/' '{print $1}'`
    debug_log "field = 15, cur_val[$idx] = ${cur_val[$idx]}"
    idx=`expr $idx + 1`

    cur_val[$idx]=`grep ">${vector_list_array[$i]}<"  $JK_STATUS_OUT_FILE | awk -F'<td>' '{print $16}' | awk -F' ' '{print $1}'`
    debug_log "field =16, cur_val[$idx] = ${cur_val[$idx]}"
    idx=`expr $idx + 1`

    cur_val[$idx]=`grep ">${vector_list_array[$i]}<"  $JK_STATUS_OUT_FILE | awk -F'<td>' '{print $16}' | awk -F'(' '{print $2}'| awk -F'/' '{print $1}'`
    debug_log "field = 16, cur_val[$idx] = ${cur_val[$idx]}"
    idx=`expr $idx + 1`

    cur_val[$idx]=`grep ">${vector_list_array[$i]}<"  $JK_STATUS_OUT_FILE | awk -F'<td>' '{print $17}' | awk -F'</td>' '{print $1}'`
    debug_log "field = 17, cur_val[$idx] = ${cur_val[$idx]}"
    idx=`expr $idx + 1`

    cur_val[$idx]=`grep ">${vector_list_array[$i]}<"  $JK_STATUS_OUT_FILE | awk -F'<td>' '{print $18}' | awk -F'</td>' '{print $1}'`
    debug_log "field = 18, cur_val[$idx] = ${cur_val[$idx]}"
    idx=`expr $idx + 1`

    cur_val[$idx]=`grep ">${vector_list_array[$i]}<"  $JK_STATUS_OUT_FILE | awk -F'<td>' '{print $19}' | awk -F'</td>' '{print $1}'`
    debug_log "field = 19, cur_val[$idx] = ${cur_val[$idx]}"
    idx=`expr $idx + 1`

    cur_val[$idx]=`grep ">${vector_list_array[$i]}<"  $JK_STATUS_OUT_FILE | awk -F'<td>' '{print $24}' | awk -F'</td>' '{print $1}'`
    debug_log "field = 24, cur_val[$idx] = ${cur_val[$idx]}"
    idx=`expr $idx + 1`

   
    debug_log "one vector End at idx = $idx" 
   
    #tmp_idx=`expr $vct_start_idx + 4`
    #debug_log "Take diff: cur_val[$tmp_idx]= ${cur_val[$tmp_idx]}, acc_pre_value[$i] = ${acc_pre_value[$i]}"
    #tmp_rel_val=`get_relative_value ${cur_val[$tmp_idx]} ${acc_pre_value[$i]} $0 NA`
    #debug_log "After Diff: tmp_idx = $tmp_idx, cur_val[$tmp_idx] = ${cur_val[$tmp_idx]}, tmp_rel_val = $tmp_rel_val"

    #if [ "X$tmp_rel_val" = "X${cur_val[$tmp_idx]}" ];then
    #  cur_val[$tmp_idx]=$rel_pre1 
    #else
    #  cur_val[$tmp_idx]=$tmp_rel_val
    #  rel_pre1=$tmp_rel_val
    #fi
    #debug_log "After Diff: tmp_idx = $tmp_idx, cur_val[$tmp_idx] = ${cur_val[$tmp_idx]}"

    #tmp_idx=`expr $vct_start_idx + 6`
    #debug_log "Take diff: cur_val[$tmp_idx]= ${cur_val[$tmp_idx]}, sess_pre_value[$i] = ${sess_pre_value[$i]}"
    #tmp_rel_val=`get_relative_value ${cur_val[$tmp_idx]} ${sess_pre_value[$i]} $0 NA`
    #debug_log "After Diff: tmp_idx = $tmp_idx, cur_val[$tmp_idx] = ${cur_val[$tmp_idx]}, tmp_rel_val = $tmp_rel_val"

    #if [ "X$tmp_rel_val" = "X${cur_val[$tmp_idx]}" ];then
    #  cur_val[$tmp_idx]=$rel_pre2 
    #else
    #  cur_val[$tmp_idx]=$tmp_rel_val
    #  rel_pre2=$tmp_rel_val
    #fi
    #debug_log "After Diff: tmp_idx = $tmp_idx, cur_val[$tmp_idx] = ${cur_val[$tmp_idx]}"

    tmp_idx=`expr $vct_start_idx + 11`
    debug_log "Before MB conversion: tmp_idx = $tmp_idx, cur_val[$tmp_idx] = ${cur_val[$tmp_idx]}"
    cur_val[$tmp_idx]=`convert_into_MB "${cur_val[$tmp_idx]}"`
    #cur_val[$tmp_idx]=$out_val
    debug_log "After MB conversion: tmp_idx = $tmp_idx, cur_val[$tmp_idx] = ${cur_val[$tmp_idx]}"
    #debug_log "Take diff: cur_val[$tmp_idx]= ${cur_val[$tmp_idx]}, wr_pre_value[$i] = ${wr_pre_value[$i]}"
    #tmp_rel_val=`get_relative_value ${cur_val[$tmp_idx]} ${wr_pre_value[$i]} $0 NA`
    #debug_log "After Diff: tmp_idx = $tmp_idx, cur_val[$tmp_idx] = ${cur_val[$tmp_idx]}, tmp_rel_val = $tmp_rel_val"

    #if [ "X$tmp_rel_val" = "X${cur_val[$tmp_idx]}" ];then
    #  cur_val[$tmp_idx]=$rel_pre3 
    #else
    #  cur_val[$tmp_idx]=$tmp_rel_val
    #  rel_pre3=$tmp_rel_val
    #fi
    #debug_log "After Diff: tmp_idx = $tmp_idx, cur_val[$tmp_idx] = ${cur_val[$tmp_idx]}"

    tmp_idx=`expr $vct_start_idx + 12`
    debug_log "Before KB conversion: tmp_idx = $tmp_idx, cur_val[$tmp_idx] = ${cur_val[$tmp_idx]}"
    cur_val[$tmp_idx]=`convert_into_KB "${cur_val[$tmp_idx]}"`
    #cur_val[$tmp_idx]=$out_val
    debug_log "After KB conversion: tmp_idx = $tmp_idx, cur_val[$tmp_idx] = ${cur_val[$tmp_idx]}"

    tmp_idx=`expr $vct_start_idx + 13`
    debug_log "Before MB conversion: tmp_idx = $tmp_idx, cur_val[$tmp_idx] = ${cur_val[$tmp_idx]}"
    cur_val[$tmp_idx]=`convert_into_MB "${cur_val[$tmp_idx]}"`
    #cur_val[$tmp_idx]=$out_val
    debug_log "After MB conversion: tmp_idx = $tmp_idx, cur_val[$tmp_idx] = ${cur_val[$tmp_idx]}"
    #debug_log "Take diff: cur_val[$tmp_idx]= ${cur_val[$tmp_idx]}, rd_pre_value[$i] = ${rd_pre_value[$i]}"
    #tmp_rel_val=`get_relative_value ${cur_val[$tmp_idx]} ${rd_pre_value[$i]} $0 NA`
    #debug_log "After Diff: tmp_idx = $tmp_idx, cur_val[$tmp_idx] = ${cur_val[$tmp_idx]}, tmp_rel_val = $tmp_rel_val"

    #if [ "X$tmp_rel_val" = "X${cur_val[$tmp_idx]}" ];then
    #  cur_val[$tmp_idx]=$rel_pre4 
    #else
    #  cur_val[$tmp_idx]=$tmp_rel_val
    #  rel_pre4=$tmp_rel_val
    #fi
    #debug_log "After Diff: tmp_idx = $tmp_idx, cur_val[$tmp_idx] = ${cur_val[$tmp_idx]}"

    tmp_idx=`expr $vct_start_idx + 14`
    debug_log "Before KB conversion: tmp_idx = $tmp_idx, cur_val[$tmp_idx] = ${cur_val[$tmp_idx]}"
    cur_val[$tmp_idx]=`convert_into_KB "${cur_val[$tmp_idx]}"`
    #cur_val[$tmp_idx]=$out_val
    debug_log "After KB conversion: tmp_idx = $tmp_idx, cur_val[$tmp_idx] = ${cur_val[$tmp_idx]}"

    j=`expr $j + 1` 
  done
 
  debug_log "Data dump:--- j = $j, idx = $idx"
  debug_log "${cur_val[@]}"
  debug_log "End."
}

load_vectors()
{
  debug_log "load_vectors Method called."
  
  run_cmd
  calculate_num_vectors

  if [ "X$JK_INSTANCE_NAME" != "XALL" ];then
    vector_list=$JK_INSTANCE_NAME 
  else
    vector_list=`grep "]&nbsp;</td><td>" $JK_STATUS_OUT_FILE | awk -F']&nbsp;</td><td>' '{print $2}' | awk -F'<' '{printf $1" "}'`
  fi

  debug_log "Parse vectors of vector list: NUM_VECTOR = $NUM_VECTOR, vector_list = $vector_list" 
  for((i = 1; i <= $NUM_VECTOR; i++))
  do
    vector_list_array[$i]=`echo $vector_list | awk -F' ' -v j=$i '{print $j}'`

    if [ "X${id_arr[${vector_list_array[$i]}]}" = "X" ]; then
      id_arr[${vector_list_array[$i]}]=$ID
      ID=`expr $ID + 1`
    fi

    if [ "X$vector_prefix" = "Xnoprefix" ]; then
      vector_list_array_with_prefix[$i]=${vector_list_array[$i]}
    else
      vector_list_array_with_prefix[$i]=$vector_prefix${vector_list_array[$i]}
    fi
    debug_log "vector_list_array[$i] = ${vector_list_array[$i]}" 
    debug_log "vector_list_array_with_prefix[$i] = ${vector_list_array_with_prefix[$i]}" 
  done

  debug_log "Loaded Vectors: without prefix - ${vector_list_array[@]}"
  debug_log "Loaded Vectors: with prefix - ${vector_list_array_with_prefix[@]}"

  #Removing Runtime files
  rm -f $RUNTIME_FILE $JK_STATUS_OUT_FILE 
}

show_vectors()
{
  debug_log "show_vectors Method Called."
  debug_log "Show vectors: ${vector_list_array_with_prefix[@]}"

  for(( i = 1; i <= NUM_VECTOR; i++))
  do
    echo -n ${id_arr[${vector_list_array[$i]}]}":"${vector_list_array_with_prefix[$i]}" "
  done
  echo ""
}

PID=$$

show_data()
{
  nohup $UNIX_SHELL nsi_kill_child_of_monitors -p $PID -i 10 -f "$JK_STATUS_OUT_FILE $RUNTIME_FILE" 2>/dev/null&

  while true
  do
    # Test is over. So exit with success status
    isTestOver $MON_TEST_RUN
    if [ $? = 1 ]; then
      exit 0
    fi

    load_data

    num_fields=19
    debug_log "##NUM_VECTOR = $NUM_VECTOR"
    k=0
    for(( i = 1; i <= NUM_VECTOR; i++))
    do
      vct_start_idx=`expr $k \* $num_fields`
      end_limit=`expr $i \* $num_fields`
      debug_log "vct_start_idx = $vct_start_idx, end_limit = $end_limit"
      echo -n "${id_arr[${vector_list_array[$i]}]}:${vector_list_array_with_prefix[$i]}|"
      for((j = vct_start_idx; j < end_limit; j++))
      do
        debug_log "i = $i, j = $j, num_fields = $num_fields, is_cmd_failed = $is_cmd_failed"
        if [ $is_cmd_failed -ne 1 -a "X${cur_val[$j]}" != "X" ];then
          printf "${cur_val[$j]} "
        else
          printf "0 " 
        fi
      done

      echo ""
      k=`expr $k + 1` 
    done

    lib_sleep $INTERVAL_SECS
  done
}

display_help_and_exit()
{
  echo "Error: $1"
  echo "Incorrect Usage!"
  echo "Usage:"
  echo "cm_jk_status -j <jk_instance> -i <Interval> -v <vector_prefix> [-D]"
  echo "-j: option used to give jk instatnce, at least one jk instance is neccessary."
  echo "-i: used for interval (in seconds)"
  echo "-v: to provide vector list, Some prefix is neccessary Eg: -v JkVectorPrefix_"
  echo "-D: to run with debug mode, see debug file /tmp/jk_status.debug.<process_id>" 
  exit -1
}

while getopts j:i:Dv:u:X:L:? arg
do
  case $arg in
    j) JK_INSTANCE_NAME=$OPTARG
       ;;
    i) INTERVAL_SECS=$OPTARG
       echo $INTERVAL_SECS | grep '^[0-9]*$' 2>&1 >/dev/null
       if [ $? != 0 ];then
         echo "Integer expression must required with -i option!"
         exit -1
       fi
       ;;
    D) DEBUG=1;;
    v) VECTOR_FLAG="1"
       export vector_prefix=$OPTARG
       ;;
    u) URL=$OPTARG
       ;;
    X) export vector_prefix=$OPTARG 
       ;;
    L) option=$OPTARG
       if [ "X$option" = "Xheader" -o "X$option" = "XHEADER" ]; then
         VECTOR_FLAG="1"
       fi
       ;;
    *) display_help_and_exit ;;
    ?) display_help_and_exit ;;
  esac
done

debug_log "cm_jk_status monitor called."
debug_log "JK_INSTANCE_NAME = $JK_INSTANCE_NAME, INTERVAL_SECS=$INTERVAL_SECS, DEBUG=$DEBUG, VECTOR_FLAG = $VECTOR_FLAG, URL = $URL"

if [ "X$URL" = "X" ];then
  display_help_and_exit "Error: Url is mandatory."
fi

declare -A id_arr
ID=0

load_vectors
#init_cumulative_data

if [ "X$VECTOR_FLAG" = "X1" ];then  #To get vector list from iostat command
  show_vectors
else #To get data on every specified interval
  show_data
fi

exit 0
