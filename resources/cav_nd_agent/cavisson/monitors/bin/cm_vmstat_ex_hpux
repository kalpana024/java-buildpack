# Name - cm_vmstat_ex_hpux (System statistics)
# Purpose - This is a monitor to get data from vmstat for HPUX machine
# Option - 'Run Once'
# GDF - cm_vmstat_ex_hpux.gdf 
# Keyword -
# STANDARD_MONITOR ServerName VectorName SystemStatsExtended <frequency in seconds>
#
# vmstat output
#vmstat 1
# procs                memory                      page                           faults      cpu
# r     b     w      avm    free   re   at    pi   po    fr   de    sr     in     sy    cs  us sy id
# 1     0     0  5059510  3027306    0    0     8    0     0    0     0   1210  18299   584   5  1 94
# 1     0     0  5059510  3027292    0    0     0    0     0    0     0   1172  16594   565   0  1 99
# 1     0     0  5059510  3027292    0    0     0    0     0    0     0   1160  15395   550   1  0 99
# 1     0     0  5059510  3027567    0    0     0    0     0    0     0   1141  12809   535   0  1 99
# 1     0     0  5059510  3027567    0    0     0    0     0    0     0   1124  11724   524   1  0 99
# Custom Monitor Output -

#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

set_mon_shell

set_debug_log_file()
{
if [ "XX$CAV_MON_HOME" != "XX" ];then
  DEBUG_LOG_FILE="$CAV_MON_HOME/logs/cm_vmstat_ex_hpux_"$MON_TEST_RUN"_"$VECTOR_NAME"_debug.log"
  ERROR_LOG_FILE="$CAV_MON_HOME/logs/cm_vmstat_ex_hpux_"$MON_TEST_RUN"_"$VECTOR_NAME"_error.log"
else
  DEBUG_LOG_FILE="/tmp/cm_vmstat_ex_hpux_"$MON_TEST_RUN"_"$VECTOR_NAME"_debug.log"
  ERROR_LOG_FILE="/tmp/cm_vmstat_ex_hpux_"$MON_TEST_RUN"_"$VECTOR_NAME"_error.log"
  debug_log "CAV_MON_HOME is not exported, putting logs to /tmp/."
fi
}

debug_log()
{
  if [ $DEBUG -eq 1 ];then
    echo "`date +'%F %X'`|$*" >> $DEBUG_LOG_FILE
  fi
}

freq=10
VECTOR_FLAG=""
PID="$$"
DEBUG=1

show_data()
{
  #Name:  CPU Queue (%)
  #Value: Processes waiting for runtime / no. of cores on machine * 100
  export NUMBER_OF_CORE_ON_MACHINE=`/usr/sbin/ioscan -kf | grep processor | wc -l`

  while true
  do
    isTestOver $MON_TEST_RUN
    # Test is over. So exit with success status
    if [ $? -eq 1 ]; then
      exit 0
    fi

# procs          memory              page            faults      cpu
# r b w      avm free re at    pi po fr de sr in     sy cs     us sy id
#Dervide metric
#CPU utilization =  100 - Idle CPU
#Idle Time -> 18th field
#
##Name:  CPU Queue (%)
#Value: Processes waiting for runtime / NUMBER_OF_CORE_ON_MACHINE
#Processes waiting for runtime -> 1th field
  
 #'2' is count; this command will print two samples.
 #First sample will be printed immidiately and second sample will be printed after $freq
 #First sample shows overall figures since boot of system, but second sample shows figures of $freq duration.
    vmstat $freq 2 | tail -1 | awk '{printf $1" "$2" "$4" "$5" "$6" "$8" "$9" "$10" "$12" "$13" "$14" "$15" "$16" "$17" "$18" "(100 - $18)" "(($1 * 100)/ ENVIRON["NUMBER_OF_CORE_ON_MACHINE"])"\n"}'

  done
}

display_help_and_exit()
{
  echo "Error: Incorrect Usage!"
  echo "Usage:"
  echo "cm_vmstat_ex_hpux [-i <Interval>]"
  echo "-i: used for interval (in seconds). Default is 10 seconds"
  exit -1
}

set_debug_log_file

while getopts i:? arg
do
  case $arg in
    i) freq=$OPTARG
       freq_option="1"
       echo $freq | grep '^[0-9]*$' 2>&1 >/dev/null
       if [ $? != 0 ];then
         echo "Invalid frequency argument value"
         exit -1
       fi
       ;;
    *) display_help_and_exit ;;
    ?) display_help_and_exit ;;
  esac
done

show_data
exit 0
