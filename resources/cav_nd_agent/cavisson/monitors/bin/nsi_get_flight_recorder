# Name    : nsi_get_fligt_Recorder_dump
# Purpose : To take java fligtRecorder dump
#
# Modification: 
#
#

WAIT_TIME_FOR_FLIGHT_RECORDER_DUMP=300
DEBUG=0
CMD_OUT_FILE="/tmp/nsi_get_fligt_Recorder_dump.$$"

PREV_LAST_FLIGHT_RECORDER_DUMP_START_LINE=" "
LAST_FLIGHT_RECORDER_DUMP_START_LINE=" "
LAST_FLIGHT_RECORDER_DUMP_START_LINE_NUM=0

JRCMD=$JAVA_HOME/bin/jrcmd
OS_NAME=`uname`

#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d $HOME/cavisson/monitors ];then
    CAV_MON_HOME=$HOME/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

export CAV_MON_HOME

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh
              

debug_log()
{
  if [ $DEBUG -eq 1 ];then
    echo "`date +'%F %X'`|$*" >>$DEBUG_LOG_FILE
  fi
}

error_log()
{
  ns_log_event "Major" "$*"
  echo "`date +'%F %X'`|$*" >>$ERROR_LOG_FILE
}

error_log_and_exit()
{
  ns_log_event "Major" "$*"
  echo "`date +'%F %X'`|$*" >>$ERROR_LOG_FILE
  exit -1
}

error_log_and_console_exit()
{
  echo "Error in getting fligtRecorder dump due to following error:"
  echo "$*"
  exit -1
  #error_log "$*"
}

error_log_and_console()
{
  echo "Error in getting fligtRecorder dump due to following error:"
  echo "$*"
}

set_debug_log_file()
{
  if [ "XX$CAV_MON_HOME" != "XX" ];then
    DEBUG_LOG_FILE="$CAV_MON_HOME/logs/nsi_get_fligt_Recorder_dump_debug.log"
    ERROR_LOG_FILE="$CAV_MON_HOME/logs/nsi_get_fligt_Recorder_dump_error.log"
  else
    DEBUG_LOG_FILE="/tmp/nsi_get_fligt_Recorder_dump_debug.log"
    ERROR_LOG_FILE="/tmp/nsi_get_fligt_Recorder_dump_error.log"
    debug_log "CAV_MON_HOME is not exported, putting logs to /tmp/."
  fi
}

display_help_and_exit()
{
  error_log_and_console "Incorrect usage. $*. Usage: nsi_get_fligt_Recorder_dump -p <pid> -l <log file name> [ -w <wait time in secs> -D ]"
  
  echo "  -p: option to specify the pid of the process whose fligtRecorder dump is to be taken."
  echo "  -l: option to specify the log file name with full path where fligtRecorder dump will be saved.It will in the format of jfr"
  echo "  -d: option to specify the duration time for the flight recorder"
  echo "  -w: option to specify wait time in secs for fligtRecorder dump to be ready. For future use. Default is 300 seconds"
  echo "  -T: option to specify the temporary directory with absolute path."
  echo "  -D: option is to enable debug."
  exit 1
}

set_ps_cmd()
{
  debug_log "set_ps_cmd() Called"
  if [ "X$OS_NAME" = "XSunOS" ]; then
    PS_CMD_FOR_DATA="/usr/bin/ps"
  else #Linux,AIX,HP-UX
    PS_CMD_FOR_DATA="ps"
  fi
}

#This function will return 1 on failure and last character on success
check_last_char()
{
  given_value=$1

  debug_log "check_last_char() Method Called, given_value = [$given_value]"

  if [ "X$given_value" = "X" ];then
    echo "NULL" 
    return 1 
  fi

  num_char=`echo "$given_value" | wc -c`
  num_char=`expr $num_char - 1`

  debug_log "num_char = $num_char"
  echo "`echo "$given_value" | cut -c $num_char`"
}

#This function will convet given data into MB or return 1 on failure
convert_into_GB()
{
  in_val=$1
  debug_log "convert_into_GB() Method Called, in_val = [$in_val]"

  last_char=`check_last_char $in_val`
  debug_log "Last char: last_char = $last_char"
  if [ "X$last_char" = "XNULL" ];then
    return 1 
  fi

  if [ "X$last_char" = "XG" -o "X$last_char" = "Xg" ];then
    in_val_without_MKG_suffix=`echo "${in_val%?}"`
    out_val=$in_val_without_MKG_suffix
  elif [ "X$last_char" = "XM" -o "X$last_char" = "Xm" ];then
    in_val_without_MKG_suffix=`echo "${in_val%?}"`
    if [ $BC_AVAILABLE -eq 1 ];then 
      out_val=`echo "scale=4; $in_val_without_MKG_suffix / 1024" |bc`      #1MB = 1/1024 GB
    else
      out_val=`awk -v "var1=$in_val_without_MKG_suffix" 'BEGIN{printf "%.4f", (var1 / 1024)}'`
    fi
  elif [ "X$last_char" = "XK" -o "X$last_char" = "Xk" ];then
    in_val_without_MKG_suffix=`echo "${in_val%?}"`
    if [ $BC_AVAILABLE -eq 1 ];then
      out_val=`echo "scale=4; $in_val_without_MKG_suffix / 1048576" |bc`   #1KB = 1/(1024 * 1024) GB
    else
      out_val=`awk -v "var1=$in_val_without_MKG_suffix" 'BEGIN{printf "%.4f", (var1 / 1048576)}'`
    fi
  else #if in byte
    if [ $BC_AVAILABLE -eq 1 ];then
      out_val=`echo "scale=4; $in_val / 1073741824" |bc`                      #1byte = 1/(1024 * 1024 *1024)
    else
      out_val=`awk -v "var1=$in_val" 'BEGIN{printf "%.4f", (var1 / 1073741824)}'`
    fi
  fi
 
  echo $out_val
}

get_used_fligtRecorder_size()
{
  debug_log "used_fligtRecorder() Called." 
  debug_log "PS_CMD_FOR_DATA = $PS_CMD_FOR_DATA, PROCESS_ID = $PROCESS_ID"
  #USED_FLIGHT_RECORDER_SIZE=`$PS_CMD_FOR_DATA -p $PROCESS_ID -o 'args' | grep -v COMMAND | awk -F' ' '{print $7}' | awk -F'-Xmx' '{print $2}'`
  USED_FLIGHT_RECORDER_SIZE=`$PS_CMD_FOR_DATA -p $PROCESS_ID -o 'args' | grep -v COMMAND | awk -F'-Xmx' '{print $2}' | cut -d ' ' -f 1`

  #handling = sign in -Xmx field
  first_char=`echo $USED_FLIGHT_RECORDER_SIZE | cut -c 1`
  if [ "X$first_char" = "X=" ];then
    USED_FLIGHT_RECORDER_SIZE=`echo $USED_FLIGHT_RECORDER_SIZE | awk -F'=' '{print $2}'` 
  fi

  if [ "X$USED_FLIGHT_RECORDER_SIZE" = "X" ];then 
    #echo "For given process id $PROCESS_ID -Xmx not found." 
    USED_FLIGHT_RECORDER_SIZE=4 #DISK_SPACE_NEEDED=4
    return
  fi

  debug_log "Before convert into GB, Heap Size= [$USED_FLIGHT_RECORDER_SIZE]"
  tmp_value=$USED_FLIGHT_RECORDER_SIZE
  USED_FLIGHT_RECORDER_SIZE=`convert_into_GB $tmp_value`
  debug_log "After convert into GB, Heap Size = [$USED_FLIGHT_RECORDER_SIZE]"
}

check_disk_free()
{
  DISK_SPACE_NEEDED=4

  # Get process -Xmx6144m and what is the max fligtRecorder allocation
  # -Xmx6144m or  -Xmx6g ???
  #
  #ps -o xxxxxx
  #extra
  
  set_ps_cmd
  get_used_fligtRecorder_size
  debug_log "Heap Size= [$USED_FLIGHT_RECORDER_SIZE] in GB"

  #AVAILABLE_DISK_SPACE=`df -h --total $FLIGHT_RECORDER_DUMP_DIR | tail -1 | awk '{print $4}'`
  AVAILABLE_DISK_SPACE=`df -hP $FLIGHT_RECORDER_DUMP_DIR | tail -1 | awk '{print $4}'`

  debug_log "Before convert into GB, AVAILABLE_DISK_SPACE= [$AVAILABLE_DISK_SPACE]"
  tmp_value=$AVAILABLE_DISK_SPACE
  AVAILABLE_DISK_SPACE=`convert_into_GB $tmp_value`
  debug_log "After convert into GB, AVAILABLE_DISK_SPACE = [$AVAILABLE_DISK_SPACE]"
  
  if [ $BC_AVAILABLE -eq 1 ];then
    RET=$(echo "$USED_FLIGHT_RECORDER_SIZE > $AVAILABLE_DISK_SPACE" | bc -l)
  else
    RET=`awk -v "var1=$USED_FLIGHT_RECORDER_SIZE" -v "var2=$AVAILABLE_DISK_SPACE" 'BEGIN{ret=var1>var2;printf "%d", ret}'`
  fi 
  if (( $RET ));then
    error_log_and_console_exit "Disk space available $AVAILABLE_DISK_SPACE is less than space needed $USED_FLIGHT_RECORDER_SIZE  for taking fligtRecorder dump"
  fi
}

#This will take dump using JRockit Cmd jrcmd.
#Assumption is that application and cmon are using JRockit JVM
take_fligtRecorder_dump_using_jrcmd()
{

  debug_log "Getting fligtRecorder dump using $JRCMD $PROCESS_ID hprofdump filename=$FLIGHT_RECORDER_DUMP_LOG_FILE temporary path to store recorded data $CMD_OUT_FILE"
  
  #Run command to get thread dump. Output will come on stdout of this command
  $JRCMD $PROCESS_ID start_flightrecording duration=$DURATION_TIME filename=$FLIGHT_RECORDER_DUMP_LOG_FILE 1>>$CMD_OUT_FILE 2>/dev/null 
  #Currently this return value commented since, in both cases (success/failure), it is returning value 0
  #if [ $? != 0 ]; then
    #error_log_and_console "Error in running $JRCMD $PROCESS_ID start_flightrecording duration=$DURATION_TIME filename=$FLIGHT_RECORDER_DUMP_LOG_FILE"
    #cat $CMD_OUT_FILE
    #rm -f $CMD_OUT_FILE
    #exit 1
  #fi
  lib_sleep 5  
  grep "Started recording" $CMD_OUT_FILE 1>/dev/null
  if [ $? != 0 ]; then
    error_log_and_console "Error in running $JRCMD $PROCESS_ID start_flightrecording duration=$DURATION_TIME filename=$FLIGHT_RECORDER_DUMP_LOG_FILE"
    cat $CMD_OUT_FILE
    rm -f $CMD_OUT_FILE
    exit 1
  fi

}

###########################################################################################################################################

if [ $# -eq 0 ];then
 display_help_and_exit "Mandatory arguments are missing"
fi


#Must set debug log file in the beginning
set_debug_log_file


#TODO; Add more options like cm_ps_data
while getopts p:l:d:w:T:D? arg
do
  case $arg in
    p) PROCESS_ID=$OPTARG;;
    w) WAIT_TIME_FOR_FLIGHT_RECORDER_DUMP="$OPTARG";;  #Wait time in secs for fligtRecorder dump to be ready
    l) FLIGHT_RECORDER_DUMP_LOG_FILE="$OPTARG";;      #Log file where fligtRecorder dump will be stored
    d) DURATION_TIME="$OPTARG";; #Duartion time for flight recording
    T) CMD_OUT_FILE="$OPTARG"; #Path of temporary file for flight recording
       CMD_OUT_FILE=$CMD_OUT_FILE/nsi_get_fligt_Recorder_dump.$$;;
    D) DEBUG=1;;
    ?) display_help_and_exit "Invalid argument passed" ;;
  esac
done

if [ "X$PROCESS_ID" = "X" ]; then
  display_help_and_exit "Mandatory argument process id is missing"
fi

if [ "X$DURATION_TIME" = "X" ]; then
  display_help_and_exit "Mandatory argument Duration time is missing"
fi

if [ "X$FLIGHT_RECORDER_DUMP_LOG_FILE" = "X" ]; then
  display_help_and_exit "Mandatory argument fligtRecorder log file name is missing"
fi

FLIGHT_RECORDER_DUMP_DIR=`dirname $FLIGHT_RECORDER_DUMP_LOG_FILE`
if [ ! -d $FLIGHT_RECORDER_DUMP_DIR ]; then
  display_help_and_exit "$FLIGHT_RECORDER_DUMP_DIR does not exist."
fi

if [ "X$JAVA_HOME" == "X" ];then
  error_log_and_console_exit "$JAVA_HOME not set"
fi

if [ -f $JRCMD ]; then
  #check_disk_free
  # Remove file as fligtRecorder dump may give error file exist
  rm -f $FLIGHT_RECORDER_DUMP_LOG_FILE
  take_fligtRecorder_dump_using_jrcmd
else
  error_log_and_console_exit "No java command avalable in $JAVA_HOME for taking fligtRecorder dump."
fi

rm -rf $CMD_OUT_FILE

exit 0
