################################################################################################
# Name  : cm_tcp_stats_aix
# Usage : cm_tcp_stats_aix -i <time in millisecs>
# Purpose: This shell outputs the count of TCP states, run once
# Output :
# 793 259 0 235 0 0 135 164 0 0 0 1088 254 25 0 511 0 0 0 11 0 0 14 64 0 0 0 0 0 0 0 292 78 11 89 89 0 0 0 326 0 0 0 0 0 0 0 0 0 0 0 0 3 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
#
# Initial version : Tuesday, March 10 2009
# Modification    : Thursday, March 19 2009
# Author Name     : Arun Nishad

###############################################################################################
#Assuming all fields has unsigned long value
#ex. init value = 142352345
#    cur value  = 323434    which is lesser then init value
#    now difference will be calculated as MAX_UNSIGNED_LONG_32 -  init value  + cur value
##############################################################################################
#netstat -sp tcp Output

#Vesrion 6.1(71 Lines including HDR(tcp:))             Version 5.3(72 Lines including HDR(tcp:))
#-----------------------------------------             -----------------------------------------

#tcp:                                                   tcp:
#6839318 packets sent                                        316505496 packets sent
#5157686 data packets (21241749969 bytes)                    250853132 data packets (1510017826 bytes)
#425 data packets (577344 bytes) retransmitted               1424868 data packets (1909691635 bytes) retransmitted
#862210 ack-only packets (549292 delayed)                    30382664 ack-only packets (18467813 delayed)
#0 URG only packets                                          38475381 URG only packet
#5 window probe packets                                      21 window probe packets
#387790 window update packets                                12685542 window update packets
#862404 control packets                                      21159277 control packets
#1451570 large sends                                         0 large sends
#20322270984 bytes sent using largesend                      0 bytes sent using largesend
#474500 bytes is the biggest largesend                       0 bytes is the biggest largesend
#8959395 packets received                                    211445862 packets received
#5638376 acks (for 21200981191 bytes)                        114540015 acks (for 1515732831 bytes)
#119363 duplicate acks                                       5185438 duplicate acks
#0 acks for unsent data                                      0 acks for unsent data
#5330052 packets (3640772648 bytes) received in-sequence     72501360 packets (3353492 bytes) received in-sequence
#1279 completely duplicate packets (283809 bytes)            114261 completely duplicate packets (13138055 bytes)
#0 old duplicate packets                                     2 old duplicate packets
#0 packets with some dup. data (0 bytes duped)               50 packets with some dup. data (22172 bytes duped)
#26212 out-of-order packets (924183 bytes)                   1919306 out-of-order packets (60362791 bytes)
#0 packets (0 bytes) of data after window                    0 packets (0 bytes) of data after window
#0 window probes                                             0 window probes
#376895 window update packets                                5772134 window update packets
#73 packets received after close                             4397332 packets received after close
#0 packets with bad hardware assisted checksum               0 packets with bad hardware assisted checksum
#0 discarded for bad checksums                               0 discarded for bad checksums
#0 discarded for bad header offset fields                    0 discarded for bad header offset fields
#0 discarded because packet too short                        0 discarded because packet too short
#432 discarded by listeners                                  21868 discarded by listeners
#0 discarded due to listener's queue full                    0 discarded due to listener's queue full
#583923 ack packet headers correctly predicted               20110733 ack packet headers correctly predicted
#2320593 data packet headers correctly predicted             31777398 data packet headers correctly predicted
#286586 connection requests                                  13338753 connection requests
#31932 connection accepts                                    1698062 connection accepts
#155664 connections established (including accepts)          8009802 connections established (including accepts)
#324841 connections closed (including 13536 drops)           15038354 connections closed (including 3793 drops)
#0 connections with ECN capability                           0 connections with ECN capability
#0 times responded to ECN                                    0 times responded to ECN
#162631 embryonic connections dropped                        7026956 embryonic connections dropped
#5041603 segments updated rtt (of 5228892 attempts)          120714501 segments updated rtt (of 104643340 attempts)
#0 segments with congestion window reduced bit set           0 segments with congestion window reduced bit set
#0 segments with congestion experienced bit set              0 segments with congestion experienced bit set
#0 resends due to path MTU discovery                         0 resends due to path MTU discovery
#1444 path MTU discovery terminations due to retransmits     42076 path MTU discovery terminations due to retransmits
#4495 retransmit timeouts                                    411236 retransmit timeouts
#8 connections dropped by rexmit timeout                     149 connections dropped by rexmit timeout
#0 fast retransmits                                          7601 fast retransmits
#0 when congestion window less than 4 segments               0 when congestion window less than 4 segments
#0 newreno retransmits                                       388 newreno retransmits
#0 times avoided false fast retransmits                      0 times avoided false fast retransmits
#5 persist timeouts                                          0 persist timeouts
#0 connections dropped due to persist timeout                0 connections dropped due to persist timeout
#18052 keepalive timeouts                                    300949 keepalive timeouts
#0 keepalive probes sent                                     253107 keepalive probes sent
#1166 connections dropped by keepalive                       11464 connections dropped by keepalive
#0 times SACK blocks array is extended                       3 times SACK blocks array is extended
#0 times SACK holes array is extended                        603 times SACK holes array is extended
#0 packets dropped due to memory allocation failure          0 packets dropped due to memory allocation failure
#0 connections in timewait reused                            217 connections in timewait reused
#0 delayed ACKs for SYN                                      0 delayed ACKs for SYN
#0 delayed ACKs for FIN                                      0 send_and_disconnects
#0 send_and_disconnects                                      0 send_and_disconnects
#0 spliced connections                                       0 spliced connections
#0 spliced connections closed                                0 spliced connections closed
#0 spliced connections reset                                 0 spliced connections reset
#0 spliced connections timeout                               0 spliced connections timeout
#0 spliced connections persist timeout                       0 spliced connections persist timeout
#0 spliced connections keepalive timeout                     0 spliced connections keepalive timeout
#0 TCP checksum offload disabled during retransmit           0 TCP checksum offload disabled during retransmit
#0 Connections dropped due to bad ACKs                       11 Connection dropped due to bad ACKs
#                  ?????                                     2 Connection dropped due to duplicate SYN packets

##############################################################################################

#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh
INTERVAL_SECS=$MON_FREQUENCY

Usage()
{
  echo "$0 [ -i <time in millisecs> ]"
  exit 1
}

#call only at init time
init_netstat_data()
{
  Index=0
  READ=0
  INIT_NUM_VAL=0
  DATA=`netstat -sp tcp | tail -n +2 | awk '{print $1}'`
  #DATA=`cat /home/arun.nishad/Junk/Input_Files/txt1 | awk '{print $1}'`
  for i in `echo $DATA`
  do
       DATA_ARRAY[Index]=$i
       INIT_NUM_VAL=$Index
       Index=`expr $Index + 1`
  done

#Now we will always return 74 data. Hence commenting below check
 # if [ $Index = 70 ];then
 #   DATA_ARRAY[Index]=0
 #   INIT_NUM_VAL=$Index
 #   Index=`expr $Index + 1`
 # fi
  #echo "DATA_ARRAY=${DATA_ARRAY[@]}"
}

#called at every interval to get relative data w.r.t data calculated by init_netstat_data
show_relative_netstat_data()
{
  Index=0
  dataIndex=0
  READ=0
  CUR_NUM_VAL=0
  CUR_DATA=`netstat -sp tcp | tail -n +2 | awk '{print $1}'`
  #CUR_DATA=`cat /home/arun.nishad/Junk/Input_Files/txt5 | awk '{print $1}'`

  for i in `echo $CUR_DATA`
  do
    if [ $RATE = 0 ];then
       RELATIVE_DATA[Index]=`get_relative_value $i ${DATA_ARRAY[Index]} $0 NA`
    else
       if [ $Index = 34 ];then
         Index=`expr $Index + 1`
         continue
       fi
       seg_retransmit=`get_relative_value $i ${DATA_ARRAY[Index]} $0 NA`
       if [ $BC_AVAILABLE -eq 1 ]; then
         RELATIVE_DATA[dataIndex]=`echo " scale=3; $seg_retransmit / $INTERVAL_SECS" | bc`
       else
         RELATIVE_DATA[dataIndex]=`awk -v "var1=$seg_retransmit" -v "var2=$INTERVAL_SECS" 'BEGIN{printf "%.3f", (var1/var2)}'` 
       fi
       DATA_ARRAY[dataIndex]=$i
    fi

    CUR_NUM_VAL=$Index
    Index=`expr $Index + 1`
    dataIndex=`expr $dataIndex + 1`
  done

  #This monitor will always return 74 data. It will give zero for those fields where data is not available.
  while [ $Index -lt 74 ]
  do
    RELATIVE_DATA[Index]=0
    Index=`expr $Index + 1`
  done

  if [ $INIT_NUM_VAL != $CUR_NUM_VAL ];then
    echo "Error: Got variable number of fields at init time($INIT_NUM_VAL) w.r.t. current ($CUR_NUM_VAL)."
    return
  fi

  echo ${RELATIVE_DATA[@]}
}

convert_interval_into_secs()
{
  #changing into seconds
   if [ "$INTERVAL_SECS" -lt 1000 ];then
      INTERVAL_SECS=`expr $INTERVAL_SECS \* 1000`
   fi

  INTERVAL_SECS=`expr $INTERVAL_SECS / 1000`
}
#############################################################################################
RATE=0
while getopts i:r? c
do
  case $c in
    i) INTERVAL_SECS=$OPTARG     #has default 10000 msec
       convert_interval_into_secs;;
    r) RATE=1 ;;
    ?) Usage ;;
  esac
done


#Save initial data
init_netstat_data

#Calculate OS architecture in order to set value of MAX_UNSIGNED_LONG for 32 bits CPU architecture / 64 bits CPU architecture.
get_os_arch_data_model

while true;
do
    isTestOver $MON_TEST_RUN
    # Test is over. So exit with success status
    if [ $? = 1 ]; then
      exit 0
    fi

  lib_sleep $INTERVAL_SECS
  show_relative_netstat_data
done
exit 0
