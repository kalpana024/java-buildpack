#
# This monitor is to find whether a particular instance is running or not. There are two types of server used. 1) OMS   2) GIV
# When server is of OMS type, it further needs be divided into two types on the basis of the ths instances running. Instance running can be of two types. One is Agent type and other is Integration type. OMS servers of Agent type will only conatain instances in agent_list file. File path will be  "/kohls/file/of/agent_list" and for Integration, /kohls/file/of/integration_list. This file path will be fixed. 
#
# When server is of GIV type, all the instance of agent type and integration type will be saved on same server. so file will be on the same server, so we read instances from both the file.
# And show 1 for instance running and 0 otherwise.
#
################################################################################################################################


#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

set_mon_shell
INTERVAL_SECS=$MON_FREQUENCY
VECTOR_FLAG="0"
instance_count=0

declare -A final_data

show_data()
{
  i=0
  while [ $i -lt $instance_count ]
  do
    if [ "X$vector_prefix" = "X" ];then
      echo "$i:${vector_array[$i]}|${final_data[${vector_array[$i]}]}"
    else
      echo "$i:${vector_prefix}${vector_array[$i]}|${final_data[${vector_array[$i]}]}"
    fi

    #Reset data
    final_data[${vector_array[$i]}]="0"
    i=`expr $i + 1`
  done
}


check_if_instance_running()
{
  inst_name=$1
  jmx_port=$2
  vector_name="${instance_name}_${jmx_port}"

  #To make new entry in vector array
  if [ "X${final_data[$vector_name]}" = "X" ]; then
    vector_array[$instance_count]=$vector_name
    instance_count=`expr $instance_count + 1`
  fi

  #NOTE: Is it right to match complete jmxremote.port. I thought any random number could have matched that port.
  ps -ef | grep "$inst_name" | grep -w "jmxremote.port=$jmx_port" >/dev/null
  if [ $? -eq 0 ]; then
    final_data[$vector_name]=1
  else
    final_data[$vector_name]=0
  fi
}


get_data_for_instances()
{
  file_count=0
  while [ $file_count -lt ${#FILE_PATH[@]} ]
  do
    while read line
    do
      echo $line | grep "^#" > /dev/null
      if [ $? -eq 0 ]; then
        continue
      fi

      echo $line | grep "^$" > /dev/null
      if [ $? -eq 0 ]; then
        continue
      fi

      instance_name=`echo $line | awk -F':' '{print $1}'`
      jmx_port=`echo $line | awk -v var=$port_field -F':' '{print $var}'`
      #port_field is different for GIV and OMS
   
      #file on the server is of dos type, so above command to remove empty line didn't worked, so alternative is :
      if [ "X$instance_name" = "X" -o "X$jmx_port" = "X" ]; then
        continue
      fi

      check_if_instance_running "$instance_name" "$jmx_port"
    done < ${FILE_PATH[$file_count]}
    file_count=`expr $file_count + 1`
  done
}


check_file_path()
{
  path=$1

  if [ ! -f $path ]; then
    echo "File path ($path) not found"
    exit -1
  fi
}


check_and_set_mandatory_fields()
{
  if [ "X$server_type" = "X" ]; then
    usage "Server type is a mandatory option. Need to be either OMS or GIV."
  elif [ "X$server_type" = "XOMS" -o "X$server_type" = "oms" ]; then
    if [ "X$file_type" = "X" ]; then 
      usage "File type (AGENT/INTEGRATION) must be provided when using OMS type server"
    elif [ "X$file_type" = "XAGENT" -o "X$file_type" = "Xagent" ];then
      FILE_PATH[0]="/kohls/file/of/agent_list"
      port_field=2
    elif [ "X$file_type" = "XINTEGRATION" -o "X$file_type" = "Xintegration" ]; then
      FILE_PATH[0]="/kohls/file/of/integration_list"
      check_file_path "${FILE_PATH[0]}"
      port_field=2
    else
      usage "Provide valid file type option (AGENT/INTEGRATION)."
    fi
  elif [ "X$server_type" = "XGIV" -o "X$server_type" = "Xgiv" ]; then
    FILE_PATH[0]="/kohls/file/gv/agent_list"
    check_file_path "${FILE_PATH[0]}"
    FILE_PATH[1]="/kohls/file/gv/integration_list"
    check_file_path "${FILE_PATH[1]}"
    port_field=3
  else
    usage "Only (OMS/GIV) is acceptable as server_type option."
  fi
}


run_for_frequency()
{
  num=0
  while [ $num -lt $FREQUENCY ] 
  do
    isTestOver $MON_TEST_RUN
    # Test is over. So exit with success status
    if [ $? = 1 ]; then
      exit 0
    fi

    get_data_for_instances
    show_data

    num=`expr $num + 1`
    if [ $num -eq $FREQUENCY ];then
      exit 0
    fi
    sleep $INTERVAL_SECS
  done
}


run_indefinite()
{
  while :
  do
    isTestOver $MON_TEST_RUN
    # Test is over. So exit with success status
    if [ $? = 1 ]; then
      exit 0
    fi

    get_data_for_instances
    show_data

    sleep $INTERVAL_SECS
  done

}


usage()
{
  echo "$*"
  echo "cm_get_instacnce_health -t <server_type OMS/GIV> -f <file_type AGENT/INTEGRATION> -X <Vector_prefix> -L <header/data> -i <Interval_sec> -n <frequency>"
  echo "-t: Server type: Either can be GIV or OMS. It can either in all CAPS or all SMALL letters"
  echo "-f: File type: It only needs to be provided for OMS server type. Here also options can be in CAPS or SMALL letters"
  echo "-n: Frequency: How many times will it run before exit"
  exit -1
}

############################################################################

while getopts i:t:X:L:f:n:? arg
do
  case $arg in
    t) server_type=$OPTARG ;;
    f) file_type=$OPTARG ;;
    X) export vector_prefix=$OPTARG
       ;;
    L) if [ "X$OPTARG" = "Xheader" -o "X$OPTARG" = "XHEADER" ]; then
         VECTOR_FLAG="1"
       fi
       ;;
    i) INTERVAL_SECS=$OPTARG
       freq_option="1"
       echo $INTERVAL_SECS | grep '^[0-9]*$' 2>&1 >/dev/null
       if [ $? != 0 ];then
         echo "Integer expression must required with -i option!"
         exit -1
       fi
       ;;
    n) FREQUENCY=$OPTARG ;;
    ?) usage "Wrong Input";;
  esac
done

check_and_set_mandatory_fields

if [ ! -z ${FREQUENCY} ]; then
  run_for_frequency
else
  run_indefinite
fi

exit 0

