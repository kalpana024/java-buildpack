# Name - cm_apache_server_status (apache server statistics)
# Purpose - This is a sample custom monitor to get data from apache server using wget command
# It parses output of wget and outputs all data in one line
# Option - 'Run Once'
# GDF - cm_apache_server_status.gdf in netstorm machine ($NS_WDIR/sys)
# Keyword -
# CUSTOM_MONITOR ServerIP cm_vmstat.gdf VectorName 2 cm_apache_server_status -f server-status

#Set CAV_MON_HOME to allow testing from command line
#if [ "X$CAV_MON_HOME" = "X" ]; then
#  if [ -d /tmp ];then
#    export CAV_MON_HOME="/tmp"
#  elif [ -d ~/cavisson/monitors ];then
#    export CAV_MON_HOME=~/cavisson/monitors
#  else
#    echo "CAV_MON_HOME is not set"
#    exit -1
#  fi
#fi

#. $CAV_MON_HOME/ns_check_monitor_func.sh

######################################################################################################################################
# Apache's mod_status module allows it to display a web page containing statistics about the web server's current state, 
# including worker processes and active connections.
#
# Following are the steps to configure mod_status module for apache2:
# 1.Enable mod_status
#   The default installation of apache usually has mod_status enabled.
#   command to check mod_status is enabled or not:
#     ls /etc/apache2/mods-enabled
#     Search for "status.conf" and "status.load". If those files aren't listed in that directory, you will need to enable mod_status by running:
#     sudo /usr/sbin/a2enmod status
# 2.Configure access
#   To enable access to the server status page we'll need to add a Location directive entry in apache2.conf file:
#     <Location /server-status>
#       SetHandler server-status
#       Order deny,allow
#       Deny from all
#       Allow from localhost
#     </Location>
# 4.LoadModule
#   LoadModule status_module modules/mod_status.so
#   It's mandatory to load this module in file httpd.conf
#
# 3.ExtendedStatus
#   ExtendedStatus controls whether Apache will generate "full" status
#   information (ExtendedStatus On) or just basic information (ExtendedStatus
#   Off) when the "server-status" handler is called. The default is Off.
# 
#   Set following in file httpd.conf
#   ExtendedStatus On 
# 4.Restart apache2
#
######################################################################################################################################

if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

INTERVAL_SECS=$MON_FREQUENCY

FILE=""
USER_NAME=""
PASSWORD=""
RUNTIME_FILE="$CAV_MON_TMP_DIR/server-status.$$"
TMP_FILE="$CAV_MON_TMP_DIR/server_status.$$"
DEBUG_LOG_FILE="$CAV_MON_TMP_DIR/server_status.debug.$$"

DEBUG=1
i=0

#Remove all existing server_status files

#Check if test is over or not
# Argument: Test run number (e.g. 1234)
# Returns:
#   0 - Not over
#   1 - Test is  over
#isTestOver()
#{
#  TEST_RUN=$1
#
#  debug_log "Method called, isTestOver(), TEST_RUN = $TEST_RUN"
#      
#  # This is to allow testing from command line as test may not be running and TEST_RUN is not set
#  if [ "X$TEST_RUN" = "X" ];then
#    # Test is not over
#    return 0
#  fi
#
#  RUNNING_TEST_FILE=$CAV_MON_HOME/logs/running_tests/$TEST_RUN
#
#  debug_log "RUNNING_TEST_FILE = $RUNNING_TEST_FILE"
#  if [ ! -f $RUNNING_TEST_FILE ];then
#    # Test is over
#    return 1
#  fi
#
#  debug_log "Method isTestOver() end."
#  # Test is not over
#  return 0
#}

debug_log()
{
    if [ "X$DEBUG" = "X0" ]; then
      return
    else
      #echo "Debug: $*"
      echo "Debug: $*" >> $DEBUG_LOG_FILE
      #echo "`date +'%F %X'`|$*" >> $DEBUG_LOG_FILE
    fi
}

get_total_accesses()
{
  debug_log "get_total_accesses method called, args=$1"

  local tmp_var=$1
  eval $tmp_var=`grep "Total accesses:" $RUNTIME_FILE|awk '{printf $3}'`
}

get_total_traffic()
{
  debug_log "get_total_traffic method called, args=$1"

  local tmp_var=$1
  eval $tmp_var=`grep "Total Traffic:" $RUNTIME_FILE|awk '{printf $7}'`
                                                                               
}

run_cmd()
{
  #curl http://www.apache.org/server-status >/dev/null 2>&1 >$RUNTIME_FILE
  #curl http://${HOST_NAME}.kohls.com:15080/server-status?// >$RUNTIME_FILE  2>&1
  ##curl http://${HOST_NAME}/server-status >/dev/null 2>&1 >$RUNTIME_FILE
  #nohup nsi_kill_child_of_monitors -p $PID -i 10 -f $TMP_FILE 2>/dev/null&

  #when apache server authentication is enable then allow user to enter user name and password to run Monitor.
  if [ "X$USER_NAME" != "X" -a "X$PASSWORD" != "X" ]; then
    curl http://${HOST_NAME}/server-status --user "$USER_NAME":"$PASSWORD" >/dev/null 2>&1 >$RUNTIME_FILE
  else
     curl http://${HOST_NAME}/server-status >/dev/null 2>&1 >$RUNTIME_FILE
  fi
}

init_data()
{
  debug_log "init_data method called."

  #curl http://www.apache.org/server-status >/dev/null 2>&1 >$RUNTIME_FILE
  run_cmd
  
  #cat $RUNTIME_FILE >/tmp/apachefile_init_data
  cat $RUNTIME_FILE | head -84 > $TMP_FILE

  get_total_accesses "PRE_VAL1"
  get_total_traffic "PRE_VAL2"

  debug_log "removing files-$RUNTIME_FILE, $TMP_FILE"
  rm -f $RUNTIME_FILE  $TMP_FILE
}

#when ExtendedStatus is off we get only basic data, to handle this added following function and check
output()
{
  var=$1
  if [ "X$var" = "X" ]; then
    echo 0 >> $TMP_FILE  
  else
    echo $var >> $TMP_FILE  
  fi
}

get_relative_data()
{
  debug_log "get_relative_data method called."

  #curl http://www.apache.org/server-status >/dev/null 2>&1 >$RUNTIME_FILE
  run_cmd
 
  #cat $RUNTIME_FILE >/tmp/apachefile_relative_data 
  cat $RUNTIME_FILE | head -84 > $TMP_FILE

  get_total_accesses "CUR_VAL1"
  get_total_traffic "CUR_VAL2"
  CUR_VAL3=`grep "CPU Usage:" $RUNTIME_FILE|awk '{printf $3}' | cut -c2-`
  CUR_VAL4=`grep "CPU Usage:" $RUNTIME_FILE|awk '{printf $4}' | cut -c2-`
  CUR_VAL5=`grep "CPU load" $RUNTIME_FILE|awk '{printf $8}' | cut -d '%' -f1`
  CUR_VAL6=`grep "requests/sec" $RUNTIME_FILE|awk '{printf $1}'|cut -d '>' -f2`             #requests/sec 
  CUR_VAL7=`grep "requests/sec" $RUNTIME_FILE|awk '{printf $4}'`                            #B/second 
                                                                                  
  CUR_VAL8=`grep "requests/sec" $RUNTIME_FILE|awk '{printf $7}'`                            #B/request
  CUR_VAL9=`grep "requests currently being processed" $RUNTIME_FILE|awk '{printf $1}'|cut -d '>' -f2`   
  CUR_VAL10=`grep "requests currently being processed" $RUNTIME_FILE|awk '{printf $6}'`     #idle workers

#following code added by Kamlesh
new_conn_values=`sed -n "/<table/,/<\/table>/p" $RUNTIME_FILE|grep -w "Sum"|sed "s/<td>//g"|sed "s/<tr>//g"|sed "s/<td>//g"|sed "s/<\/tr>//g"|sed "s/&nbsp;//g"|sed "s/Sum//g"|tr "</td>" " "|awk '{print $1" "$2" "$3" "$4" "$5" "$6}'`

 CUR_VAL11=`echo $new_conn_values |awk '{print $1}'`  #total connections           (not using)  
 CUR_VAL12=`echo $new_conn_values |awk '{print $2}'`  #busy threads
 CUR_VAL13=`echo $new_conn_values |awk '{print $3}'`  #idle threads                 (not using)
 CUR_VAL14=`echo $new_conn_values |awk '{print $4}'`  #writing async connections    (not using)
 CUR_VAL15=`echo $new_conn_values |awk '{print $5}'`  #keep-alive async connectuons (not using)
 CUR_VAL16=`echo $new_conn_values |awk '{print $6}'`  #closing asyn-connections     (not using)

 if [ "X$CUR_VAL11" = "X" -a "X$CUR_VAL12" = "X" -a "X$CUR_VAL13" = "X" -a "X$CUR_VAL14" = "X" -a "X$CUR_VAL15" = "X" -a "X$CUR_VAL16" = "X" ]; then
   CUR_VAL11=0
   CUR_VAL12=0
   CUR_VAL13=0
   CUR_VAL14=0
   CUR_VAL15=0
   CUR_VAL16=0
 fi 

waiting_for_connection=`sed -e '/Scoreboard Key/,/<\/table/!d' $RUNTIME_FILE| grep "<tr><td>"|grep "</td><td>\_"|wc -l`

starting_up=`sed -e '/Scoreboard Key/,/<\/table/!d' $RUNTIME_FILE| grep "<tr><td>"|grep "</td><td><b>S</b>"|wc -l`

reading_request=`sed -e '/Scoreboard Key/,/<\/table/!d' $RUNTIME_FILE| grep "<tr><td>"|grep "</td><td><b>R</b>"|wc -l`

sending_reply=`sed -e '/Scoreboard Key/,/<\/table/!d' $RUNTIME_FILE| grep "<tr><td>"|grep "</td><td><b>W</b>"|wc -l`

keepalive_read=`sed -e '/Scoreboard Key/,/<\/table/!d' $RUNTIME_FILE| grep "<tr><td>"|grep "</td><td><b>K</b>"|wc -l`

dns_lookup=`sed -e '/Scoreboard Key/,/<\/table/!d' $RUNTIME_FILE| grep "<tr><td>"|grep "</td><td><b>D</b>"|wc -l`

closing_connection=`sed -e '/Scoreboard Key/,/<\/table/!d' $RUNTIME_FILE| grep "<tr><td>"|grep "</td><td><b>C</b>"|wc -l`

logging=`sed -e '/Scoreboard Key/,/<\/table/!d' $RUNTIME_FILE| grep "<tr><td>"|grep "</td><td><b>L</b>"|wc -l`

gracefully_finishing=`sed -e '/Scoreboard Key/,/<\/table/!d' $RUNTIME_FILE| grep "<tr><td>"|grep "</td><td>G"|wc -l`

idle_cleanup_of_worker=`sed -e '/Scoreboard Key/,/<\/table/!d' $RUNTIME_FILE| grep "<tr><td>"|grep "</td><td><b>I</b>"|wc -l`

open_slot_with_no_current_process=`sed -e '/Scoreboard Key/,/<\/table/!d' $RUNTIME_FILE| grep "<tr><td>"|grep "</td><td>\."|wc -l`

 CUR_VAL17=$waiting_for_connection
 CUR_VAL18=$starting_up
 CUR_VAL19=$reading_request
 CUR_VAL20=$sending_reply
 CUR_VAL21=$keepalive_read
 CUR_VAL22=$dns_lookup
 CUR_VAL23=$closing_connection
 CUR_VAL24=$logging
 CUR_VAL25=$gracefully_finishing
 CUR_VAL26=$idle_cleanup_of_worker
 CUR_VAL27=$open_slot_with_no_current_process
  
 CUR_VAL28=$INTERVAL_SECS                                                                                             #reporting interval
 ##CUR_VAL29=`grep "Server Status" $RUNTIME_FILE | awk -F' ' '{print $5}'`                                   #srrver url
 ##CUR_VAL30=`grep "Server Version" $RUNTIME_FILE | awk -F'<' '{print $3}' | awk -F' ' '{print $3 $4 $5}'`   #server version

  debug_log "removing files-$RUNTIME_FILE, $TMP_FILE"
  rm -f $RUNTIME_FILE  $TMP_FILE

  #Data Dump
  debug_log "Pre values:----"
  debug_log "PRE_VAL1=$PRE_VAL1, PRE_VAL2=$PRE_VAL2, PRE_VAL3=$PRE_VAL3, PRE_VAL4=$PRE_VAL4, PRE_VAL5=$PRE_VAL5, PRE_VAL6=$PRE_VAL6, PRE_VAL7=$PRE_VAL7, PRE_VAL8=$PRE_VAL8, PRE_VAL9=$PRE_VAL9, PRE_VAL10=$PRE_VAL10, PRE_VAL11=$PRE_VAL11, PRE_VAL12=$PRE_VAL12, PRE_VAL13=$PRE_VAL13, PRE_VAL14=$PRE_VAL14, PRE_VAL15=$PRE_VAL15, PRE_VAL16=$PRE_VAL16, PRE_VAL17=$PRE_VAL17, PRE_VAL18=$PRE_VAL18, PRE_VAL19=$PRE_VAL19, PRE_VAL20=$PRE_VAL20, PRE_VAL21=$PRE_VAL21, PRE_VAL22=$PRE_VAL22, PRE_VAL23=$PRE_VAL23, PRE_VAL24=$PRE_VAL24, PRE_VAL25=$PRE_VAL25, PRE_VAL26=$PRE_VAL26"

  debug_log "Cur values:---"
  debug_log "CUR_VAL1=$CUR_VAL1, CUR_VAL2=$CUR_VAL2, CUR_VAL3=$CUR_VAL3, CUR_VAL4=$CUR_VAL4, CUR_VAL5=$CUR_VAL5, CUR_VAL6=$CUR_VAL6, CUR_VAL7=$CUR_VAL7, CUR_VAL8=$CUR_VAL8, CUR_VAL9=$CUR_VAL9, CUR_VAL10=$CUR_VAL10, CUR_VAL11=$CUR_VAL11, CUR_VAL12=$CUR_VAL12, CUR_VAL13=$CUR_VAL13, CUR_VAL14=$CUR_VAL14, CUR_VAL15=$CUR_VAL15, CUR_VAL16=$CUR_VAL16, CUR_VAL17=$CUR_VAL17, CUR_VAL18=$CUR_VAL18, CUR_VAL19=$CUR_VAL19, CUR_VAL20=$CUR_VAL20, CUR_VAL21=$CUR_VAL21, CUR_VAL22=$CUR_VAL22, CUR_VAL23=$CUR_VAL23, CUR_VAL24=$CUR_VAL24, CUR_VAL25=$CUR_VAL25, CUR_VAL26=$CUR_VAL26"

  output $CUR_VAL28

  #now take a diff of current and previous value for cummulative graphs
  if [ $BC_AVAILABLE -eq 1 ];then
    tmp_var=`echo "scale=4; $CUR_VAL1 - $PRE_VAL1" |bc`
  else
    tmp_var=`awk -v "var1=$CUR_VAL1" -v "var2=$PRE_VAL1" 'BEGIN{printf "%.4f", (var1 - var2)}'`
  fi
  output $tmp_var
  
  if [ $BC_AVAILABLE -eq 1 ];then
    tmp_var=`echo "scale=4; $CUR_VAL2 - $PRE_VAL2" |bc`
  else
    tmp_var=`awk -v "var1=$CUR_VAL2" -v "var2=$PRE_VAL2" 'BEGIN{printf "%.4f", (var1 - var2)}'`
  fi
  output $tmp_var

  output $CUR_VAL3
  output $CUR_VAL4
  output $CUR_VAL5
  output $CUR_VAL6
  output $CUR_VAL7
  output $CUR_VAL8
  output $CUR_VAL9
  output $CUR_VAL11
  output $CUR_VAL12
  output $CUR_VAL10
  output $CUR_VAL14
  output $CUR_VAL15
  output $CUR_VAL16
  output $CUR_VAL17
  output $CUR_VAL18
  output $CUR_VAL19
  output $CUR_VAL20
  output $CUR_VAL21
  output $CUR_VAL22
  output $CUR_VAL23
  output $CUR_VAL24
  output $CUR_VAL25
  output $CUR_VAL26
  output $CUR_VAL27

  tmp_data=`cat $TMP_FILE | awk -F' ' '{printf $1" "}'`
  echo $tmp_data
  debug_log "Relative value:---"
  debug_log "`cat $TMP_FILE`"

  debug_log "Removing file $TMP_FILE"
  rm -f $TMP_FILE
}

show_output()
{
  debug_log "show_output method called."

  get_relative_data
}

display_help_and_exit()
{
  echo "Error: Incorrect Usage!"
  echo "Usage:"
  echo "cm_apache_server_status [-f] or [-i <Interval>] or [ [-u <User Name>] and [-p <Password>] ]"
  echo "-f: option used to give file name"
  echo "-i: used for interval (in seconds)"
  echo "-u: used for user name"
  echo "-p: used for password"
  exit -1
}

while getopts h:i:f:u:p:D? arg
do
  case $arg in
    f) FILE=$OPTARG
       ;;
    h) HOST_NAME=$OPTARG
       ;;
    u) USER_NAME=$OPTARG   #in case apache server athentication is enable then user needs user name and password to run the monitor.
       ;;
    p) PASSWORD=$OPTARG
       ;;
    i) INTERVAL_SECS=$OPTARG
       echo $INTERVAL_SECS | grep '^[0-9]*$' 2>&1 >/dev/null
       if [ $? != 0 ];then
         echo "Integer expression must required with -i option!"
         exit -1
       fi
       ;;
    D) DEBUG=1;;
    *) display_help_and_exit ;;
    ?) display_help_and_exit ;;
  esac
done

debug_log "cm_apache_status monitor called."
debug_log "FILE=$FILE, HOST_NAME=$HOST_NAME, INTERVAL_SECS=$INTERVAL_SECS, DEBUG=$DEBUG"

#if [ "X$FILE" = "X" ];then
#  display_help_and_exit
#fi

if [ \( "X$USER_NAME" = "X" -a "X$PASSWORD" != "X" \) -o \( "X$USER_NAME" != "X" -a "X$PASSWORD" = "X" \) ]; then
  display_help_and_exit
fi

init_data

while true
  do
    # Test is over. So exit with success status
    isTestOver $MON_TEST_RUN
    if [ $? -eq 1 ]; then
      exit 0
    fi

    show_output

    lib_sleep $INTERVAL_SECS
 done

exit 0
                                           
