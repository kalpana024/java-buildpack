## Name - cm_ps_count_by_state
## Purpose - This is a monitor to count the processes in different states.Currently it recognises following states
##              RUNNING
##              INTERRUPTABLE
##              STOPPED
##              ZOMBIE
##              RUNNABLE
##              IO
##              PAGING
##              DEAD
##
## Option - 'Run Once'
## GDF - cm_ps_count_by_state.gdf 
## Keyword -ps_count
## STANDARD_MONITOR ServerName VectorName cm_ps_count_by_state -i <frequency in seconds>
##
## Custom Monitor Output 
## 245 228 4 7 0 6 0 0



#Set CAV_MON_HOME to allow testing from command line


if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

set_mon_shell

INTERVAL_SECS=$MON_FREQUENCY
PID="$$"
PS_COUNT_OUT_FILE=$CAV_MON_TMP_DIR/ps.out$$

initialize()
{
  # types of states of a process 
  RUNNING=0
  INTERRUPTABLE=0
  STOPPABLE=0
  ZOMBIE=0
  RUNNABLE=0
  IO=0
  PAGING=0
  DEAD=0
  VAR=0
  PSTATE=""
}
   


show_data()
{
  initialize
 

  #Name: Process state
  #Value:No of Processes in each state
  #process state array
  var=` ps ax -o state `
  PSTATE=($var)
  
  #First sample of ps count comes after INTERVAL_SECS(default 10 sec)
  lib_sleep `expr $INTERVAL_SECS + 1` 
    
  #checking the state of process in for loop
  for RUNNING in "${!PSTATE[@]}";
  do 
    if [ "${PSTATE[$RUNNING]}" = "S" ]; then
      INTERRUPTABLE=`expr $INTERRUPTABLE + 1`
    fi    

    if [ "${PSTATE[$RUNNING]}" = "T" ]; then
       STOPPABLE=`expr $STOPPABLE + 1` 
    fi

    if [ "${PSTATE[$RUNNING]}" = "Z" ]; then
       ZOMBIE=` expr $ZOMBIE + 1 `
    fi

    if [ "${PSTATE[$RUNNING]}" = "R" ]; then
      RUNNABLE=` expr $RUNNABLE + 1 `
    fi

    if [ "${PSTATE[$RUNNING]}" = "D" ]; then
      IO=` expr $IO + 1 `
    fi
  
    if [ "${PSTATE[$RUNNING]}" = "W" ]; then
      PAGING=` expr $PAGING + 1 `
    fi
   
    if [ "${PSTATE[$RUNNING]}" = "X" ]; then
      DEAD=` expr $DEAD + 1 `
    fi
    
   done
  
   ## order of states RUNNING INTERRUPTABLE STOPPED ZOMBIE RUNNABLE IO PAGING DEAD
   echo " $RUNNING $INTERRUPTABLE  $STOPPABLE $ZOMBIE  $RUNNABLE $IO $PAGING $DEAD"
}

remove_file()
{
  #remove temp files
  rm -f PS_COUNT_OUT_FILE
}

display_help_and_exit()
{
  echo "Error: Incorrect Usage!"
  echo "Usage:"
  echo "cm_ps_count_by_state "
  echo "interval (in seconds) Default is 10 seconds"
  exit -1
}

while getopts i:? arg
do
  case $arg in
    i) INTERVAL_SECS=$OPTARG
       freq_option="1"
       echo $INTERVAL_SECS | grep '^[0-9]*$' 2>&1 >/dev/null
       if [ $? != 0 ];then
         echo "Invalid frequency argument value"
         exit -1
       fi
       ;;
    *) display_help_and_exit ;;
    ?) display_help_and_exit ;;
  esac
done


nohup $UNIX_SHELL $CAV_MON_HOME/bin/nsi_kill_child_of_monitors -p $PID -i 10 -f $PS_COUNT_OUT_FILE 2>/dev/null&

  while true
    do
    isTestOver $MON_TEST_RUN
    # Test is over. So exit with success status
   if [ $? = 1 ]; then
      exit 0
    fi
    initialize  
    show_data
     lib_sleep $INTERVAL_SECS
    remove_file
    done
exit 0
