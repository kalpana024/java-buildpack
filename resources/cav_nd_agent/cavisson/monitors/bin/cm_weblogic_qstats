###########################################################################################################################################################
# Name  : cm_weblogic_qstats
# Author Name : Shri Chandra 
# Usage : cm_weblogic_qstats -u <username> -p <password> -m <mbean> -i <interval>
# Purpose : This shell outputs the Weblogic status
# cmd: java weblogic.Admin -url $URL -username user -password pass -pretty GET -mbean "mydomain:Location=myserver,Name=weblogic.kernel.Default,ServerRuntime=myserver,Type=ExecuteQueueRuntime"
#

#Output of Java Command
##################################

#MBeanName: "mydomain:Location=myserver,Name=weblogic.kernel.Default,ServerRuntime=myserver,Type=ExecuteQueueRuntime"
#        CachingDisabled: true
#        ExecuteThreadCurrentIdleCount: 15
#        ExecuteThreads: [Lweblogic.management.runtime.ExecuteThread;@48edb5
#        Name: weblogic.kernel.Default
#        ObjectName: weblogic.kernel.Default
#        Parent: myserver
#        PendingRequestCurrentCount: 0
#        PendingRequestOldestTime: 1151352425362
#        Registered: true
#        ServicedRequestTotalCount: 415607
#        Type: ExecuteQueueRuntime


#From here, Get

# output : 
#   <ExecuteThreadCurrentIdleCount> <PendingRequestCurrentCount> <PendingRequestOldestTime> <ServicedRequestTotalCount>
#

# Initial Version : 12/05/2009
# Modification :
###########################################################################################################################################################


# Since java program used by this shell needs web logic jar files, 
# we need to set class path in the weblogic.env if not already set
# Also it requires java to be same as used by weblogic. So JAVA_HOME and path is also to be set in this filE
# Following is sample of entries in weblogc.jar
#export CLASSPATH=/root/bea/weblogic81/server/lib/weblogic.jar:.
#export JAVA_HOME=/root/bea/jdk141_05
#export PATH=$JAVA_HOME/bin:$PATH

#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi


. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

if [ -f $CAV_MON_HOME/sys/weblogic.env ];then
. $CAV_MON_HOME/sys/weblogic.env
fi

JAVA_BIN=$JAVA_HOME/bin/java

CMD_OUT_FILE_NAME="/tmp/cm_weblogic_qstats.out.$$"
CMD_ERR_FILE_NAME="/tmp/cm_weblogic_qstats.err.$$"
UNAME=""
PWD=""
MBEAN=""
INTERVAL=1000


#trap 'cleanup; exit -1' 1 2 3 4 5 13 15
trap 'rm -f $CMD_OUT_FILE_NAME $CMD_ERR_FILE_NAME; exit' 1 2 3 4 5 13 15

Usage()
{
  echo "$0 -U <url> -u <username> -p -m [-i <interval in secs>]"
  echo "Where:"
  echo "  -U is used to specify URL"
  echo "  -u is used to specify username"
  echo "  -p is used to specify password"
  echo "  -m is use to specify MbeanName"
  echo "  -i is interval in milli-sec[Optional]. Default is 10000 (10 seconds)"
  echo "  For example:"
  echo "  $0 -u user1 -p password1 -m '"mydomain:Location=myserver,Name=weblogic.kernel.Default,ServerRuntime=myserver,Type=ExecuteQueueRuntime"' -i 10000"
  exit -1
}

cleanup()
{
  rm -f $CMD_OUT_FILE_NAME
  rm -f $CMD_ERR_FILE_NAME
}

log_error()
{
 echo $*
}

get_field_value()
{
FIELD_NAME=$1

   FIELD_LINE=`grep "$FIELD_NAME" $CMD_OUT_FILE_NAME`
   if [ $? != 0 ]; then
    log_error "Error in getting $FIELD_NAME from the command outout"
    echo "0"
    return
   fi

   FIELD_VALUE=`echo $FIELD_LINE | awk -F':' '{print $2}'`
   if [ $? != 0 ]; then
    log_error "Error in getting $FIELD_NAME from the command outout"
    echo "0"
    return
   fi

   echo $FIELD_VALUE
}

run_command()
{
  $JAVA_BIN weblogic.Admin -url $URL -username $UNAME -password $PWD -pretty GET -mbean $MBEAN > $CMD_OUT_FILE_NAME 2>$CMD_ERR_FILE_NAME
  if [ $? != 0 ]; then
    log_error "Error in running the command to get weblogic qstats"
    # Since error also comes in out, we are cating this file also
    cat $CMD_OUT_FILE_NAME
    cat $CMD_ERR_FILE_NAME
    cleanup
    exit -1
  fi
}

#Get initial values of all cumulative counts
get_init_mbean_qstats()
{
  run_command
  Init_ServicedRequestTotalCount=`get_field_value "ServicedRequestTotalCount:"`
}

get_cur_mbean_qstats()
{
  run_command
  Cur_ExecuteThreadCurrentIdleCount=`get_field_value "ExecuteThreadCurrentIdleCount:"`
  Cur_PendingRequestCurrentCount=`get_field_value "PendingRequestCurrentCount:"`
  Cur_PendingRequestOldestTime=`get_field_value "PendingRequestOldestTime:"`
  conv_msec_to_sec 
  Cur_ServicedRequestTotalCount=`get_field_value "ServicedRequestTotalCount:"`
}

conv_msec_to_sec()
{
  VALUE=`expr $Cur_PendingRequestOldestTime / 1000`.`expr $Cur_PendingRequestOldestTime % 1000`
  #echo $VALUE
}

show_output()
{
  ServicedRequestTotalCount=`expr $Cur_ServicedRequestTotalCount - $Init_ServicedRequestTotalCount`

  echo $Cur_ExecuteThreadCurrentIdleCount $Cur_PendingRequestCurrentCount $VALUE $ServicedRequestTotalCount
}

while getopts U:u:p:m:i: c
do
  case $c in 
    U) URL=$OPTARG ;;
    u) UNAME=$OPTARG ;;
    p) PWD=$OPTARG ;;
    m) MBEAN=$OPTARG ;;
    i) INTERVAL=$OPTARG ;;
    ?) Usage ;;
  esac
done

#changing into seconds
INTERVAL=`expr $INTERVAL / 1000`

get_init_mbean_qstats

while true
do
    isTestOver $MON_TEST_RUN
    # Test is over. So exit with success status
    if [ $? = 1 ]; then
      exit 0
    fi

  lib_sleep $INTERVAL
  get_cur_mbean_qstats
  show_output
done

exit 0
