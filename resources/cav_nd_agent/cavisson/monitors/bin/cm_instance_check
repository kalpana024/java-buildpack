#This monitor is to check whether a port is in listening state or not. If provided port in -p option is in listening state then it reutrn 1 as data and if not in listening state then it rerturn 0 as data.

#It has one graph in its gdf which shows port status, whether it is in listening state or not.

#We can also pass "ANY or any" with -p option, that is to get all the ports in listening state on that machine. All the ip_port will be treated as vector and its corresponding data will be shown with it.  eg. 127.0.0.1_7891|1

#When we use "ANY or any" in -p option we are only showing data in old format <vector_name|data>, But when we use ip:port:instance in -p option then we show data in new format <id:vector_name|data>

##########################################################################################################################################

#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

set_mon_shell
INTERVAL_SECS=$MON_FREQUENCY


convert_ip_to_dec()
{
  ip=$1
  first=`echo -n $ip | tail -c 2` 
  first=`echo "ibase=16; $first" | bc`
  second=`echo -n $ip | tail -c 4 | head -c 2`
  second=`echo "ibase=16; $second" | bc`
  third=`echo -n $ip | tail -c 6 | head -c 2`
  third=`echo "ibase=16; $third" | bc`
  fourth=`echo $ip | head -c 2`
  fourth=`echo "ibase=16; $fourth" | bc`
  
  echo $first"."$second"."$third"."$fourth
}


display_help_and_exit()
{
  echo "$1"
  echo "Usage: cm_instance_check -p '<IP1:Port1:InstanceName1>|<IP2:Port2:InstanceName2>' -L data -X prefix -i <Interval>"
  echo "-p: Input to this option needs to be an <IP:Port:Instance_Name>. or <any>."
  echo "-i: used for interval (in seconds)"
  echo "-X: used for <vector prefix/noprefix>"
  echo "-L: used for <header/data>"
  exit -1
}

make_vector()
{
  inst_num=0
  for line in `echo $1 | tr '|' '\n'`
  do
    input_ip[$inst_num]=`echo $line | awk -F ':' '{print $1}'`
    input_port[$inst_num]=`echo $line | awk -F ':' '{print $2}'`
    instance[$inst_num]=`echo $line | awk -F ':' '{print $3}'`
    inst_value[$inst_num]=0
    inst_num=`expr $inst_num + 1`
  done
}


process_data()
{
  while read line
  do
    state=`echo $line | awk '{print $4}'`
    if [ "X$state" != "X0A" ]; then
      continue
    fi
 
    ip=`echo $line | awk '{print $2}' | awk -F':' '{print $1}'`
    port=`echo $line | awk '{print $2}' | awk -F':' '{print $2}'`
    port=$(convert_port_to_dec $port)
    dec_ip=$(convert_ip_to_dec $ip)
    if [ $any_ip -ne 1 ]; then 
      for (( i=0 ; i < $inst_num; i++ ))
      do
        if [ "X${input_port[$i]}" = "X$port" ]; then
          if [ "X${input_ip[$i]}" = "X$dec_ip" ]; then
            inst_value[$i]=1
            break
          fi
        fi
      done 

    else
      echo $PREFIX""$dec_ip"_"$port"|1"
    fi
  done < /tmp/output_file
}


convert_port_to_dec()
{
  hex_port=$1
  echo $((16#$hex_port))
}


show_vector()
{
  echo "Warning: No vectors."  
}



#########################################################################################################################


any_ip=0
VECTOR_FLAG=0
PREFIX=""
cat /proc/net/tcp | tail -n +2 > /tmp/output_file

while getopts p:i:X:L:? args
do
  case $args in
    p) INPUT=$OPTARG ;;
    X) PREFIX=$OPTARG ;;
    L) if [ "X$OPTARG" = "Xheader" -o "X$OPTARG" = "XHEADER" ]; then
         VECTOR_FLAG="1"
       fi ;;
    i) INTERVAL_SECS=$OPTARG ;;
    ?) display_help_and_exit ;;
  esac
done

if [ "X$INPUT" = "XANY" -o "X$INPUT" = "Xany" ]; then
  any_ip=1
else
  make_vector $INPUT
fi


if [ "X$VECTOR_FLAG" = "X1" ]; then
  show_vector
  exit 0
fi


while :
do
  process_data
  #If user has given ip:port:instace but none of the given ip:port is in litening mode
  if [ $any_ip -ne 1 ];then
    for (( i=0 ; i < $inst_num; i++ ))
    do
      echo $i:$PREFIX""${instance[$i]}"|"${inst_value[$i]}
      #After sending value we have to set it with zero again
      inst_value[$i]=0
    done
  fi
  sleep $INTERVAL_SECS
done
#done < /proc/net/tcp

