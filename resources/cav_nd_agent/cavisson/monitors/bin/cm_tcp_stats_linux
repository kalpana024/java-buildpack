################################################################################################
# Name  : cm_tcp_stats_linux 
# Usage : cm_tcp_stats_linux -i <time in sec>
# Purpose: This shell outputs the count of TCP states, run once
# Output : 
# 793 259 0 235 0 0 135 164 0 0 0 1088 254 25 0 511 0 0 0 11 0 0 14 64 0 0 0 0 0 0 0 292 78 11 89 89 0 0 0 326 0 0 0 0 0 0 0 0 0 0 0 0 3 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
#         
# Initial version : Tuesday, March 10 2009 
# Modification    : Thursday, March 19 2009 
# Author Name     : Arun Nishad 

###############################################################################################
#Assuming all fields has unsigned long value
#ex. init value = 142352345
#    cur value  = 323434    which is lesser then init value
#    now difference will be calculated as MAX_UNSIGNED_LONG_32 -  init value  + cur value

#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

Usage()
{
  echo "$0 [ -i <time in secs> ] [ -r (to display data per sec) ]"
  exit 1
}

#call only at init time
init_netstat_data()
{
  Index=0
  READ=0
  INIT_NUM_VAL=0
  SYNs_to_LISTEN=0
  DATA=`netstat -s | awk '{print $1}'`
  #DATA=`cat /home/arun.nishad/Junk/Input_Files/txt1 | awk '{print $1}'`
  for i in `echo $DATA`
  do
     if [ "XX$i" = "XXTcp:" ];then  #Linux
       READ=1
       continue;
     elif [ "XX$i" = "XXTcpExt:" ];then  #Linux
       READ=2
       continue;
     elif [ "XX$i" = "XXUdp:" ];then  #Linux
       READ=0
       continue;
     fi
      
     if [ $READ = 1 ];then 
       #echo "Init: Sorting tcp data: index = $Index, data = $i" 
       DATA_ARRAY[Index]=$i 
       INIT_NUM_VAL=$Index
       Index=`expr $Index + 1` 
     elif [ $READ = 2 ];then
       SYNs_to_LISTEN_prev=`netstat -s | grep "SYNs to LISTEN sockets dropped" |tr -s ' ' | cut -d ' ' -f 2`
       break;
     fi
  done
}

#Tcp:
#    235771 active connections openings
#    3045 passive connection openings
#    209919 failed connection attempts
#    679 connection resets received
#    31 connections established
#    8707135 segments received
#    8621520 segments send out
#    5906 segments retransmited
#    0 bad segments received.
#    5363939 resets sent

#called at every interval to get relative data w.r.t data calculated by init_netstat_data
show_relative_netstat_data()
{
  Index=0
  dataIndex=0
  READ=0
  SYNs_to_LISTEN=0
  CUR_NUM_VAL=0
  CUR_DATA=`netstat -s | tr -s " " | tr ' ' '|'`
  

 
  #CUR_DATA=`cat /home/arun.nishad/Junk/Input_Files/txt5 | awk '{print $1}'`
  for i in `echo $CUR_DATA`
  do
     i=`echo $i | tr '|' ' '`
     if [ "XX$i" = "XXTcp:" ];then  #Linux
       READ=1
       continue;
     elif [ "XX$i" = "XXTcpExt:" ];then  #Linux
       READ=2
       continue;
     elif [ "XX$i" = "XXUdp:" ];then  #Linux
       READ=0
       continue;    
     fi

     if [ $READ = 1 ];then 
       data_val=`echo $i | cut -d ' ' -f 1`
       #DATA_ARRAY=`echo $CUR_DATA | cut -d ' ' -f 2`  
       # Data at index 4 is connections established which is current value. Hence diff is not to be taken. 
       if [ $dataIndex -eq 4 ];then
         if [ $RATE = 0 ];then
           RELATIVE_DATA[Index]=$data_val
         fi
       else
         #echo "Relative: Sorting tcp data: index = $Index, data = $i" 
         if [ $RATE = 0 ];then
           RELATIVE_DATA[Index]=`get_relative_value $data_val ${DATA_ARRAY[dataIndex]} $0 NA`
         else
           seg_retransmit=`get_relative_value $data_val ${DATA_ARRAY[dataIndex]} $0 NA`
           if [ $BC_AVAILABLE -eq 1 ]; then
             RELATIVE_DATA[Index]=`echo " scale=3; $seg_retransmit / $INTERVAL_SECS" | bc`
           else
             RELATIVE_DATA[Index]=`awk -v "var1=$seg_retransmit" -v "var2=$INTERVAL_SECS" 'BEGIN{printf "%.3f", (var1/var2)}'`
           fi
           DATA_ARRAY[Index]=$data_val 
         fi
       fi
     
       Index=`expr $Index + 1` 
       CUR_NUM_VAL=$dataIndex
       dataIndex=`expr $dataIndex + 1`
    
    elif [ $READ = 2 ];then
        #SYNs_to_LISTEN=`echo $i | grep "SYNs to LISTEN sockets dropped" | cut -d ' ' -f 2`
        echo $i | grep "SYNs to LISTEN sockets dropped" > /dev/null 2>&1
        if [ $? -eq 0 ]; then

         SYNs_to_LISTEN_curr=`echo $i | cut -d ' ' -f 1`
         SYNs_to_LISTEN_tmp=`get_relative_value $SYNs_to_LISTEN_curr $SYNs_to_LISTEN_prev $0 NA`

         if [ $RATE = 1 ];then
           if [ $BC_AVAILABLE -eq 1 ]; then
             SYNs_to_LISTEN=`echo " scale=3; $SYNs_to_LISTEN_tmp / $INTERVAL_SECS" | bc`
           else
             SYNs_to_LISTEN=`awk -v "var1=$SYNs_to_LISTEN_tmp" -v "var2=$INTERVAL_SECS" 'BEGIN{printf "%.3f", (var1/var2)}'`
           fi

           SYNs_to_LISTEN_prev=$SYNs_to_LISTEN_curr       
         else
           SYNs_to_LISTEN=$SYNs_to_LISTEN_tmp
         fi
         break;
        fi
   fi
  done
  if [ $INIT_NUM_VAL != $CUR_NUM_VAL ];then
    echo "Error: Got variable number of fields at init time($INIT_NUM_VAL) w.r.t. current ($CUR_NUM_VAL)."
    return
  fi
  
  echo "${RELATIVE_DATA[@]} $SYNs_to_LISTEN"
}

convert_interval_into_secs()
{
  #changing into seconds
   if [ "$INTERVAL_SECS" -lt 1000 ];then
      INTERVAL_SECS=`expr $INTERVAL_SECS \* 1000`
   fi

  INTERVAL_SECS=`expr $INTERVAL_SECS / 1000`
}

#############################################################################################

INTERVAL_SECS=$MON_FREQUENCY
RATE=0

while getopts i:r? c
do
  case $c in
    i) INTERVAL_SECS=$OPTARG     #has default 10000 msec
       convert_interval_into_secs;;
    r) RATE=1;;
    ?) Usage ;;
  esac
done
#Save initial data
init_netstat_data

#Calculate OS architecture in order to set value of MAX_UNSIGNED_LONG for 32 bits CPU architecture / 64 bits CPU architecture.
get_os_arch_data_model

while true;
do
    isTestOver $MON_TEST_RUN
    # Test is over. So exit with success status
    if [ $? = 1 ]; then
      exit 0
    fi

  show_relative_netstat_data
  lib_sleep $INTERVAL_SECS 
done
exit 0
