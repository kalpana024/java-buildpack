################################################################################
# Name    : cm_cassandra_cfstats  
# Purpose : This is a dynamic monitor. It takes data from cassandra database by command  ./bin/nodetool cfstats
# Option  : 'Run Once'
# GDF     : cm_cassandra_cfstats.gdf in netstorm machine ($NS_WDIR/sys)
# Keyword :
#           DYNAMIC_VECTOR_MONITOR 192.168.1.66 CASSANDRA_CFSTATS cm_cassandra_cfstats.gdf 2 cm_cassandra_cfstats --interval 10 --keyspace system --nodetool_path /home/manish/apache-cassandra-1.2.8 --prefix NS_ --operation show-data EOC cm_cassandra_cfstats --keyspace system --nodetool_path /home/manish/apache-cassandra-1.2.8 --prefix NS_ --operation show-vector
# Date    : Tuesday, 13 Aug 2013 
###############################################################################

if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

RUNTIME_FILE="$CAV_MON_TMP_DIR/cm_cassandra_cfstats_runtime.$$"
DEBUG_LOG_FILE="$CAV_MON_TMP_DIR/cm_cassandra_cfstats_debug.$$"

NUM_VECTOR="1"
FAMILIES="ALL"
DEBUG=0
INTERVAL_SECS=$MON_FREQUENCY

debug_log()
{
  if [ "X$DEBUG" = "X0" ]; then
    return
  else
    #echo "Debug: $*" 
    echo "Debug: $*" >> $DEBUG_LOG_FILE
    #echo "`date +'%F %X'`|$*" >> $DEBUG_LOG_FILE
  fi
}

calculate_num_vectors()
{
  debug_log "calculate_num_vectors Method Called."

  if [ "X$FAMILIES" != "XALL" ];then
    NUM_VECTOR=`echo $FAMILIES | awk -F',' '{print NF}'`
    if [ "X$NUM_VECTOR" = "X0" ];then
      display_help_and_exit "Please provide at least one family" 
    fi
  else 
    NUM_VECTOR=`grep "Column Family: " $RUNTIME_FILE | wc -l`
  fi

  debug_log "Total NUM_VECTOR = $NUM_VECTOR"
}

run_cmd()
{
  debug_log "run_cmd Method called."
  $NODETOOL_PATH/bin/nodetool cfstats |sed -e "/\<Keyspace: $KEYSPACE\>/,/----------------/!d" 2>&1 >$RUNTIME_FILE
  if [ $? != 0 ];then
    ns_log_event "Major" "Running command '$NODETOOL_PATH/bin/nodetool cfstats' failed."
    return 1
  fi
}

load_vectors()
{
  debug_log "load_vectors Method called."
  
  run_cmd
  calculate_num_vectors

  if [ "X$FAMILIES" != "XALL" ];then
    vector_list=$FAMILIES 
  else
    vector_list=`grep "Column Family: " $RUNTIME_FILE | awk -F': ' '{printf $2","}'`
  fi

  debug_log "Parse vectors of vector list: NUM_VECTOR = $NUM_VECTOR, vector_list = $vector_list" 
  for((i = 1; i <= $NUM_VECTOR; i++))
  do
    vector_list_array[$i]=`echo $vector_list | awk -F',' -v j=$i '{print $j}'`
    vector_list_array_with_prefix[$i]=$i":"$vector_prefix${vector_list_array[$i]}
    debug_log "vector_list_array[$i] = ${vector_list_array[$i]}" 
    debug_log "vector_list_array_with_prefix[$i] = ${vector_list_array_with_prefix[$i]}" 
  done

  debug_log "Loaded Vectors: without prefix - ${vector_list_array[@]}"
  debug_log "Loaded Vectors: with prefix - ${vector_list_array_with_prefix[@]}"

  #Removing Runtime files
  rm -f $RUNTIME_FILE 
}

show_vectors()
{
  debug_log "show_vectors Method Called."
  debug_log "Show vectors: ${vector_list_array_with_prefix[@]}"

  if [ "X$vector_prefix" = "Xnoprefix" ]; then
    echo ${vector_list_array[@]}
  else
    echo ${vector_list_array_with_prefix[@]}
  fi
}

load_data()
{
  debug_log "load_data Method Called."

  run_cmd

  #Check whether number of vector is less or greater than vector list
  NVector=`grep "Column Family: " $RUNTIME_FILE | wc -l`
  if [ $NVector -lt $NUM_VECTOR ];then 
   ns_log_event "Major" "Warrning: Number of vector is mismatched form vector calulated in operation show vector and show data" 
   exit 1
  fi

  debug_log "##NUM_VECTOR = $NUM_VECTOR"
  for(( i = 1; i <= $NUM_VECTOR; i++))
  do
    debug_log "@@@@@@@ i = $i, j = $j, num_fields = $num_fields"
    debug_log "Loading data for Vector = [${vector_list_array[$i]}]"

    data_line=`sed -e "/\<Column Family: ${vector_list_array[$i]}\>/,/Compacted row mean size: /!d" $RUNTIME_FILE | tail -18  | awk -F':' '{printf $2" "}' | sed 's/NaN ms./0/g' | sed 's/ms.//g'`
    #data_line = 1 0 0 50 2.0 Nan ms. 2 100.0 72367 2 0 0 0 2 0 0 0 0 0 8 0 0 

    #If data is not available for anyy vector then fill 0 for that vector
    if [ "X$data_line" = "X" ];then
      ns_log_event "Major" "Data for vector ${vector_list_array[$i]} is not availabe."
      echo "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
      continue
    fi
  
    #This is new format
    debug_log "#### VCT = [${vector_list_array_with_prefix[$i]}]"

    #Java team added 9 more graphs which are not available here, hence just putting 0 for those 
    if [ "X$vector_prefix" = "Xnoprefix" ]; then
      echo $data_line | awk -F' ' -v vct=${vector_list_array[$i]} '{print vct"|"$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "$10" "$11" "$12" "$13" "$14" "$15" "$16" "$17" "$18" "0" "0" "0" "0" "0" "0" "0" "0" "0" "}'
    else
      echo $data_line | awk -F' ' -v vct=${vector_list_array_with_prefix[$i]} '{print vct"|"$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "$10" "$11" "$12" "$13" "$14" "$15" "$16" "$17" "$18" "0" "0" "0" "0" "0" "0" "0" "0" "0" "}'
    fi
  done 
}

PID=$$
show_data()
{
  while true
  do
    # Test is over. So exit with success status
    isTestOver $MON_TEST_RUN
    if [ $? = 1 ]; then
      exit 0
      rm -f $RUNTIME_FILE
    fi

    load_data

    lib_sleep $INTERVAL_SECS
  done
}

#cm_cassandra_cfstats.gdf 2 cm_cassandra_cfstats --interval 10 --keyspace system --nodetool_path /home/manish/apache-cassandra-1.2.8 --prefix NS_ --operation show-data 
display_help_and_exit()
{
  echo "Error: $1"
  echo "Incorrect Usage!"
  echo "Usage:"
  echo "cm_cassandra_cfstats [-i|--interval] [-k|--keyspace] [-l|--nodetool_path] [-v|--prefix] [-o|--operation]"
  echo "Where:"
  echo "  -i|--interval        : To provide interval in seconds"
  echo "  -k|--keyspace        : To provide keyspace (Eg: system is keyspace)"
  echo "  -l|--nodetool_path"  : To provide nodetool path
  echo "  -v|--prefix"         : To proved prefix to vector name
  echo "  -o|--operation"      : To provide operation 
  echo "                         To type of operation we have - 1) show-vector 2) show-data"
  echo "  -D|--debug"          : To provide debug
  echo "Eg:-"
  echo "For vector name use like - "
  echo "     cm_cassandra_cfstats --keyspace system --nodetool_path /home/manish/apache-cassandra-1.2.8 --prefix NS_ --operation show-vector  "
  echo "For data use like - "
  echo "     cm_cassandra_cfstats --interval 10 --keyspace system --nodetool_path /home/manish/apache-cassandra-1.2.8 --prefix NS_ --operation show-data" 
  exit -1
}

#Function for checking whether agrument value is given or not
chk_args_of_option()
{
  if [ "X$2" == "X" ];then
    display_help_and_exit "Option [$1] required a value."
  fi
}

################# Function's Calling ###########################################

if [ $# -eq 0 ];then
  display_help_and_exit "There is no arguments"
fi

#cm_cassandra_cfstats  –interval –host –port -keyspace -family <comma separated list>
while [ "$1" != "" ]
do
  case $1 in
    -i | --interval)
        shift
        chk_args_of_option "-i | --interval" "$1"
        INTERVAL_SECS=$1;;
    -h | --host)
        shift
        chk_args_of_option "-u | --host" "$1"
        HOST=$1;;
    -p | --port)
        shift
        chk_args_of_option "-p | --port" "$1"
        PORT=$1;;
    -k | --keyspace)
        shift
        chk_args_of_option "-k | --keyspace" "$1"
        KEYSPACE=$1;;
    -f | --families)
        shift
        chk_args_of_option "-f | --families" "$1"
        FAMILIES=$1;;
    -u | --user)
        shift
        chk_args_of_option "-u | --user" "$1"
        USER=$1;;
    -P | --password)
        shift
        chk_args_of_option "-P | --password" "$1"
        PASSWORD=$1;;
    -l | --nodetool_path)
        shift
        chk_args_of_option "-l | --nodetool_path" "$1"
        NODETOOL_PATH=$1;;
    -v | --prefix)
        shift
        chk_args_of_option "-v | --prefix" "$1"
        VECTOR_FLAG="1"
        export vector_prefix=$1
        ;;
    -D | --debug)
        shift
        DEBUG=1;;
    -o | --operation)
        shift
        chk_args_of_option "-l | --nodetool_path" "$1"
        OPERATION=$1;;
  esac
  shift
done

debug_log "cm_cassandra_cfstats monitor called."
debug_log "INTERVAL_SECS = $INTERVAL_SECS, HOST = $HOST, PORT = $PORT, KEYSPACE = $KEYSPACE, FAMILIES = $FAMILIES, USER = $USER, PASSWORD = $PASSWORD, NODETOOL_PATH = $NODETOOL_PATH, VECTOR_FLAG = $VECTOR_FLAG, DEBUG = $DEBUG, OPERATIO = $OPERATION" 

#Check mandatory args 

#Check installation directory
if [ ! -d $NODETOOL_PATH ];then
  echo "Cassandra Installation Path $NODETOOL_PATH does not exists."
  exit 255
fi

#Load Vectors
load_vectors

if [ "X$OPERATION" = "X1" -o "X$OPERATION" = "Xshow-vector" ];then  #To get vector list from iostat command
  show_vectors
#else #To get data on every specified interval
elif [ "X$OPERATION" = "X2" -o "X$OPERATION" = "Xshow-data" ];then  #To get vector list from iostat command
  show_data
fi

exit 0
