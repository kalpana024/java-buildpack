#!/bin/bash
# Name    : cm_eth_stats
# Purpose : To Produce n(number of interfaces including loopback) Vector 
#           and data of network connections of any particular machine. 
# Usage   :
#  cm_eth_stats [-v] or [-i <Interval>] 
#    -v: option used to get vector list of netstat -ni
#    -i: option used to get data on every specified interval	
# For example:
#   cm_eth_stats -v (To get vector list eth0 eth1 lo )
#   cm_eth_stats -i 1000  (To get data after every interval of given milliseconds )
#
# Sample out put for /proc/net/dev

# Inter-|   Receive                                                |  Transmit
# face |bytes    packets errs drop fifo frame compressed multicast|bytes    packets errs drop fifo colls carrier compressed
#    lo:20062706   17752    0    0    0     0          0         0 20062706   17752    0    0    0     0       0          0
#  eth0:64955253  174579    0    0    0     0          0      4104 286311792  228737    0    0    0     0       0          0
#  eth1:       0       0    0    0    0     0          0         0        0       0    0    0    0     0       0          0
#  pan0:       0       0    0    0    0     0          0         0        0       0    0    0    0     0       0          0

# Sample output of this shell with -v option 
# eth0 eth1 lo 

# Sample output of this shell with -i option 
# 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
# 7.984 11.000 0.000 0.000 0.000 0.000 0.000 0.500 29.773 14.000 0.000 0.000 0.000 0.000 0.000 0.000
# 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
# 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
#Set CAV_MON_HOME to allow testing from command line

# In the case of overflow

  #FC9
# Prev=
# 878959 6324 0 0 0 0 0 0 878959 6324 0 0 0 0 0 0
# 4294967295 889595 0 0 0 0 0 500 2059940236 1552766 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
# Cur=
# 878959 6324 0 0 0 0 0 0 878959 6324 0 0 0 0 0 0
# 429496729 889595 0 0 0 0 0 500 2059940236 1552766 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
# -----------Calculated --------
# 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
# 335544.320 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
# 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
# 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000

  #FC14
# Prev=
# 46717172 17002 0 0 0 0 0 0 46717172 17002 0 0 0 0 0 0
# 18446744073709400000 878063 0 0 0 0 0 1699 2289816730 1693597 0 0 0 0 0 0
# 498680 1472 0 0 0 0 0 162 747259 1835 0 0 0 0 0 0
# Cur=
# 46717172 17002 0 0 0 0 0 0 46717172 17002 0 0 0 0 0 0
# 400000 878063 0 0 0 0 0 1699 2289816730 1693597 0 0 0 0 0 0
# 498680 1472 0 0 0 0 0 162 747259 1835 0 0 0 0 0 0
# -----------Calculated --------
# 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
# 390.625 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
# 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000


if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh
INTERVAL_SECS=$MON_FREQUENCY

VECTOR_FLAG=""
DEVICE=""
ETH_LIST=""
NUM_FIELDS=8
DEBUG=""
THROUGHPUT_MODE=0

display_help_and_exit()
{
  echo "Error: Incorrect Usage!"
  echo "Usage:"
  echo "cm_eth_stats [-v <vector_prefix>] or [-i <Interval>] or [-i <Interval> d <interface> ]"
  echo "   -v: option used to get vector list for Command (netstat -ni). Prefix will added before these vector names"
  echo "   -i: used for interval (in seconds)"
  echo "   -d: for specific interface"
  echo "   -D: for Debug"
  echo "   -X: used for <vector prefix/noprefix>"
  echo "   -L: used for <header/data>"
  exit 1
}

#Calculate initial value.
function init_netstat_data()
{
  PRE_VAL=(`eval $ETH_LIST`)
  NUM_PREV_VAL=${#PRE_VAL[@]}
}

#Calculate current value, take diff i.e. (current - initial).
#Make current value as previous value. then do (current - previous).
function get_relative_data()
{
  CUR_VAL=(`eval $ETH_LIST`)
  NUM_CUR_VAL=${#CUR_VAL[@]}
    
  if [ "X$DEBUG" = "X1" ]; then
    echo "Prev="
    for(( i = 0; i<NUM_CUR_VAL; ))
    do
      for((j = 0 ; j < 16 ; j++))
      do
      printf "${PRE_VAL[$i]} " 
      i=`expr $i + 1`
      done
      echo ""
    done
    echo "Cur="
    for(( i = 0; i<NUM_CUR_VAL; ))
    do
      for((j = 0 ; j < 16 ; j++))
      do
      printf "${CUR_VAL[$i]} "
      i=`expr $i + 1`
      done
      echo ""
    done
    echo "-----------Calculated --------"
  fi
   
#Command: cat /proc/net/dev
#Output:
#Inter-|   Receive                                                |  Transmit
# face |bytes packets errs drop fifo frame compressed multicast   |bytes packets errs drop fifo colls carrier compressed
    index=0
    for (( i = 0; i < $NUM_PREV_VAL;))
    do
      #This is the calculation for Receive part of command "/proc/net/dev".
      RELATIVE_VAL=`get_relative_value ${CUR_VAL[i]} ${PRE_VAL[i]} $0 NA`
       
      # Note - using delay=$INTERVAL_SECS, we are passing shell variable value from $INTERVAL_SECS to awk variable delay
      # Calculate throughput in Kbps using
      #   (Bytes * 8)/(Interval * 1024)
      echo -n "${vector_array[$index]}|"
      echo $RELATIVE_VAL | awk -v delay=$INTERVAL_SECS '{printf("%0.3f ", ($1 * 8)/(delay * 1024))}' #Calculation for Received bytes (Kbps) 
      i=`expr $i + 1`
      for (( j = 1; j < $NUM_FIELDS;))    # Value of NUM_FIELDS is 8
      do
        #Get relative value for Received packets, errs, drop, fifo, frame, compressed, multicast.
        RELATIVE_VAL=`get_relative_value ${CUR_VAL[i]} ${PRE_VAL[i]} $0 NA`                       

        if [ $THROUGHPUT_MODE -eq 0 ];then
          echo $RELATIVE_VAL | awk -v delay=$INTERVAL_SECS '{printf("%0.3f ", ($1)/(delay))}'
        fi 
        i=`expr $i + 1`
        j=`expr $j + 1`
      done

      #This is the calculation for Transmit part of command "cat /proc/net/dev".
      RELATIVE_VAL=`get_relative_value ${CUR_VAL[i]} ${PRE_VAL[i]} $0 NA`

      # Note - using delay=$INTERVAL_SECS, we are passing shell variable value from $INTERVAL_SECS to awk variable delay
      # Calculate throughput in Kbps using
      #   (Bytes * 8)/(Interval * 1024)
      echo $RELATIVE_VAL | awk -v delay=$INTERVAL_SECS '{printf("%0.3f ", ($1 * 8)/(delay * 1024))}'  #Calculation for Transmitted bytes (Kbps)
      i=`expr $i + 1`
     
      for (( j = 1; j < $NUM_FIELDS;))   # Value of NUM_FIELDS is 8
      do
        #Get relative value for Transmitted packets, errs, drop, fifo, frame, compressed, multicast.
        RELATIVE_VAL=`get_relative_value ${CUR_VAL[i]} ${PRE_VAL[i]} $0 NA`

        if [ $THROUGHPUT_MODE -eq 0 ];then
          echo $RELATIVE_VAL | awk -v delay=$INTERVAL_SECS '{printf("%0.3f ", ($1)/(delay))}'
        fi
        i=`expr $i + 1`
        j=`expr $j + 1`
      done
      echo ""
      index=`expr $index + 1`
    done
  PRE_VAL=(${CUR_VAL[@]})
}

#if [ "X$#" = "X0" ];then
#  display_help_and_exit
#fi

while getopts i:d:v:D:X:L:T? arg
do
  case $arg in
    v) VECTOR_FLAG="1"
       export vector_prefix=$OPTARG
       ;;
    X) export vector_prefix=$OPTARG
       ;;
    L) if [ "X$OPTARG" = "Xheader" -o  "X$OPTARG" = "XHEADER" ];then
       VECTOR_FLAG="1"
       fi
       ;;
    i) INTERVAL_SECS=$OPTARG
       echo $INTERVAL_SECS | grep '^[0-9]*$' 2>&1 >/dev/null 
       if [ $? != 0 ];then
         echo "Integer expression must required with -i option !"
         exit -1
       fi
       ;;
    d) DEVICE=$OPTARG
       ;;
    D) DEBUG="1"
       ;;
    T) THROUGHPUT_MODE="1"     #only show "Received Throughtput" & "Transmitted Throughtput"
       ;;
    *) display_help_and_exit 
       ;;
    ?) display_help_and_exit 
       ;;
  esac
done

#if [ "X$VECTOR_FLAG" = "X1" -a "XX$INTERVAL_SECS" != "XX" ];then
#  display_help_and_exit
if [ "XX$DEVICE" != "XX"  -a "XX$INTERVAL_SECS" != "XX" ];then
  ETH_LIST="awk -F'${DEVICE}:' '{print \$2}' /proc/net/dev | grep -v ^$"
elif [ "XX$DEVICE" != "XX" -a "XX$INTERVAL_SECS" = "XX" ];then
  display_help_and_exit
else
  ETH_LIST="awk -F'${DEVICE}:' '{print \$2}' /proc/net/dev | grep -v ^$"
fi

#Save intial Data
init_netstat_data

#Calculate OS architecture in order to set value of MAX_UNSIGNED_LONG for 32 bits CPU architecture / 64 bits CPU architecture.
get_os_arch_data_model

declare -a vector_array

#To take vector list from netstat -ni command
 # will output iface entries 
  #grep -w "" /proc/net/dev | egrep -v "Inter|face" | awk '{print ENVIRON["vector_prefix"]$1}'|awk -F ':' '{printf $1" "}'
  #Fixed bug: 5733
if [ "X$vector_prefix" = "Xnoprefix" ]; then
    vector_array=(`grep -w "" /proc/net/dev | egrep -v "Inter|face"|tr -d ' '|awk -F ':' '{printf FNR-1":"$1" "}'`)
  else
    vector_array=(`grep -w "" /proc/net/dev | egrep -v "Inter|face" | tr -d ' '|awk -F ':' '{printf FNR-1":%s"$1" ",ENVIRON["vector_prefix"]}'`)
fi
if [ ! -f /proc/net/dev ];then
   echo "Error: Unable to get data from /proc/net/dev !"
   exit 1
fi

if [ "X$VECTOR_FLAG" = "X1" ];then
 echo "${vector_array[@]}"
#this part returns data on every specified interval
else
  while true
   do
    isTestOver $MON_TEST_RUN
    # Test is over. So exit with success status
    if [ $? = 1 ]; then
      exit 0
    fi

    lib_sleep $INTERVAL_SECS
    # will output iface data per interface 
    #netstat -ni|egrep -v "Kernel|Iface"|awk '{print $2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "$10" "$11}'
    get_relative_data
    if [ $? != 0 ];then
      echo "Error: Unable to get data from netstat !"
      exit 1
    fi
  #echo ""
   done
fi
exit 0
