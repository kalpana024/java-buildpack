################################################################################################
# Name  : cm_tcp_stats_hpux 
# Usage : cm_tcp_stats_hpux -i <time in sec>
# Purpose: This shell outputs the count of TCP states, run once
# Output : 
# 41 31 0 4 1 0 0 6 14 10 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 10 0 0 0 0 0 0 0 6 0 0        
# Initial version : Wednesday, Oct 31 2012
# Modification    :  
# Author Name     : Prachi Kumari

###############################################################################################
#Assuming all fields has unsigned long value
#ex. init value = 142352345
#    cur value  = 323434    which is lesser then init value
#    now difference will be calculated as MAX_UNSIGNED_LONG_32 -  init value  + cur value

#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh
INTERVAL_SECS=$MON_FREQUENCY

Usage()
{
  echo "$0 [ -i <time in secs> ]"
  exit 1
}

#call only at init time
init_netstat_data()
{
  Index=0
  READ=0
  INIT_NUM_VAL=0
  DATA=`netstat -s | awk '{print $1}'`
  #DATA=`cat hpux_tcp_data | awk '{print $1}'`
  #echo "DATA = $DATA"
  for i in `echo $DATA`
  do
     if [ "XX$i" = "XXtcp:" ];then  #HPUX
       READ=1
       continue;
     elif [ "XX$i" = "XXudp:" ];then  #HPUX
       READ=0
       break;
     fi
      
     if [ $READ = 1 ];then 
       #echo "Init: Sorting tcp data: index = $Index, data = $i" 
       DATA_ARRAY[Index]=$i 
       INIT_NUM_VAL=$Index
       Index=`expr $Index + 1` 
     fi
  done
}

#Tcp:
#    111510 active connections openings
#    15030 passive connection openings
#    209 failed connection attempts
#    2020 connection resets received
#    1 connections established
#    2653576 segments received
#    2776982 segments send out
#    13933 segments retransmited
#    1 bad segments received.
#    7618 resets sent
#Udp:
#    337178 packets received
#    1881 packets to unknown port received.
#    0 packet receive errors
#    338276 packets sent

#called at every interval to get relative data w.r.t data calculated by init_netstat_data
show_relative_netstat_data()
{
  Index=0
  READ=0
  CUR_NUM_VAL=0
  CUR_DATA=`netstat -s | awk '{print $1}'`
  #CUR_DATA=`cat hpux_tcp_data | awk '{print $1}'`

  for i in `echo $CUR_DATA`
  do
     if [ "XX$i" = "XXtcp:" ];then  #HPUX
       READ=1
       continue;
     elif [ "XX$i" = "XXudp:" ];then  #HPUX
       READ=0
       break;
     fi

     if [ $READ = 1 ];then  
       #echo "$i ${DATA_ARRAY[Index]}"
       # Data at index 4 is connections established which is current value. Hence diff is not to be taken. 
       if [ $Index -eq 4 ];then
         RELATIVE_DATA[Index]=$i
       else
         #echo "Relative: Sorting tcp data: index = $Index, data = $i" 
         RELATIVE_DATA[Index]=`get_relative_value $i ${DATA_ARRAY[Index]} $0 NA`
       fi
       CUR_NUM_VAL=$Index
       Index=`expr $Index + 1` 
     fi
  done
  if [ $INIT_NUM_VAL != $CUR_NUM_VAL ];then
    echo "Error: Got variable number of fields at init time($INIT_NUM_VAL) w.r.t. current ($CUR_NUM_VAL)."
    return
  fi
  
  echo ${RELATIVE_DATA[@]}
}

convert_interval_into_secs()
{
  #changing into seconds
  if [ "$INTERVAL_SECS" -lt 1000 ];then
    INTERVAL_SECS=`expr $INTERVAL_SECS \* 1000`
  fi

  INTERVAL_SECS=`expr $INTERVAL_SECS / 1000`
}

#############################################################################################

while getopts i:? c
do
  case $c in
    i) INTERVAL_SECS=$OPTARG     #has default 10000 msec
       convert_interval_into_secs ;;
    ?) Usage ;;
  esac
done


#Save initial data
init_netstat_data

#Calculate OS architecture in order to set value of MAX_UNSIGNED_LONG for 32 bits CPU architecture / 64 bits CPU architecture.
get_os_arch_data_model

while true;
do
    isTestOver $MON_TEST_RUN
    # Test is over. So exit with success status
    if [ $? = 1 ]; then
      exit 0
    fi

  lib_sleep $INTERVAL_SECS 
  show_relative_netstat_data
done
exit 0
