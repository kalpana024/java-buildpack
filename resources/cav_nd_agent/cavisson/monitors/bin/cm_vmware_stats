#!/usr/bin/python
#########################################################################################################################
#Purpose:This is vmguest library monitor
#Argument:./cm_vmware_stats -i [optional] -p [mandatory]
#          -i interval
#          -p python path
#Example: ./cm_vmware_stats -p /home/y954185/vmguestlib-master/build/lib
#Author name:Pitphilai Pandey
#Date:26-oct-2015
#########################################################################################################################

import optparse
import sys
import os
parser = optparse.OptionParser(usage='usage: %prog [-i] [-p]')
#parser.add_option( '-i', '--interval', action='store', type='int',default='10', dest='interval' )
#parser.add_option( '-p', '--path', action='store', type='string', default='/home/y954185/vmguestlib-master/build/lib', dest='path' )
parser.add_option( '-i', '--interval', action='store', type='int',default=int(os.environ['MON_FREQUENCY']) / 1000, dest='interval' )
parser.add_option( '-p', '--path', action='store', type='string', dest='path' )
(options, args) = parser.parse_args()

if not options.path:
  parser.error('Python path is mandatory argument')

sys.path.append(options.path)

import vmguestlib
from time import sleep
import ns_check_monitor_func

mon_test_run = os.environ['MON_TEST_RUN']

gl = vmguestlib.VMGuestLib()
gl.UpdateInfo()

OldElapsedMs = gl.GetElapsedMs()
OldStolenMs = gl.GetCpuStolenMs()
OldUsedMs = gl.GetCpuUsedMs()
while 1:
    sleep(options.interval)
    if not ns_check_monitor_func.isTestOver( TEST_RUN = mon_test_run ):
      break
    gl.UpdateInfo()

    NewElapsedMs = gl.GetElapsedMs()
    NewStolenMs = gl.GetCpuStolenMs()
    NewUsedMs = gl.GetCpuUsedMs()
    # Make sure that if time stands still we don't end up in infinity
    if NewElapsedMs == OldElapsedMs:
      UsedCpu = 0
      StolenCpu = 0
      EffectiveMhz = 0
    else:
      UsedCpu = (NewUsedMs - OldUsedMs) * 100.0 / (NewElapsedMs - OldElapsedMs)
      StolenCpu = (NewStolenMs - OldStolenMs) * 100.0 / (NewElapsedMs - OldElapsedMs)
      EffectiveMhz = gl.GetHostProcessorSpeed() * (NewUsedMs - OldUsedMs) / (NewElapsedMs - OldElapsedMs)
    CpuLimit = gl.GetCpuLimitMHz()

    OldElapsedMs = NewElapsedMs
    OldStolenMs = NewStolenMs
    OldUsedMs = NewUsedMs
    MemLimit = gl.GetMemLimitMB()

    print("%.2f %.2f %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d" % (UsedCpu,StolenCpu,EffectiveMhz,gl.GetHostProcessorSpeed(),gl.GetCpuReservationMHz(),gl.GetCpuShares(),gl.GetMemActiveMB(),gl.GetMemBalloonedMB(),gl.GetMemMappedMB(),gl.GetMemOverheadMB(),gl.GetMemSharedMB(),gl.GetMemSharedSavedMB(),gl.GetMemSwappedMB(),gl.GetMemTargetSizeMB(),gl.GetMemUsedMB(),gl.GetMemReservationMB(),gl.GetMemShares()))
    sys.stdout.flush()
        
gl.CloseHandle()


