###############################################################################################
# Name  : cm_lsof_stats
# Usage : cm_lsof_stats -r (generate report of open files) -i <interval in secs> -u <user_name> or -s (own files)
#         -i -> Interval in seconds. 
#         -r -> Flag to generate report of open files (user format). Default is monitor format.
#         -u -> To show open files count for a particular user only.
#         -s -> To show open files count of own
# Purpose : This monitor will show number of open files of type (IPV4,IPV6,PIPE,FIFO,DIR,LINK,BLK,CHR,REG,UNKNOWN)/other.
#           Currently showing count of these ( IPV4,IPV6,PIPE,FIFO,DIR,LINK,BLK,CHR,REG,UNKNOWN ) file types ONLY.
#           Count of files type other than ( IPV4,IPV6,PIPE,FIFO,DIR,LINK,BLK,CHR,REG,UNKNOWN ) will be covered under "other" graph.
#           This is run every time monitor.
# Output : 
#          Monitor format:
#          Total IPV4 IPV6  PIPE  FIFO  DIR   LINK  BLK CHR   REG   unknown   OTHERS
#          4931   0    0      0     9    20     0    0   26    68     327      4481
#       
#          User format: 
#          Fri Nov  8 10:00:29 IST 2013
#
#          File Type                 Count
#          IPV4                      0
#          IPV6                      0
#          PIPE                      0
#          FIFO                      9
#          DIR                       20
#          LINK                      0
#          BLK                       0
#          CHR                       26
#          REG                       68
#          unknown                   327
#          OTHERS                    4481
#          Count of All Files        4931
#
#
#
# Initial version : Thursday, November 08 2013
# Modification    : 
# Author Name     : Krishna
###############################################################################


#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d $HOME/cavisson/monitors ];then
    CAV_MON_HOME=$HOME/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

export CAV_MON_HOME

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

INTERVAL_SECS=$MON_FREQUENCY

OS_NAME=`uname`  
MAX_FILE_TYPES=13

debug_log()
{
  if [ $DEBUG -eq 1 ];then
    echo "`date +'%F %X'`|$*" >> $DEBUG_LOG_FILE
  fi
}

set_debug_log_file()
{
if [ "XX$CAV_MON_HOME" != "XX" ];then   
  DEBUG_LOG_FILE="$CAV_MON_HOME/logs/cm_lsof_stats_"$MON_TEST_RUN"_"$VECTOR_NAME"_debug.log"
else
  DEBUG_LOG_FILE="/tmp/cm_lsof_stats_"$MON_TEST_RUN"_"$VECTOR_NAME"_debug.log"  
  debug_log "CAV_MON_HOME is not exported, putting logs to /tmp/."
fi
}

Usage()
{
  echo "$*"
  echo "Usage: cm_lsof_stats -r (generate report of open files) -i <interval in secs> -u <user_name> or -s(own files)"
  exit -1
}



#lsof 
#command output
#
#COMMAND     PID     USER   FD      TYPE DEVICE SIZE/OFF     NODE NAME
#init          1     root  cwd   unknown                          /proc/1/cwd (readlink: Permission denied)
#bash      20417 ctrainee  cwd       DIR  253,2     4096 20185089 /home/ctrainee
#bash      20417 ctrainee  rtd       DIR  253,0     4096        2 /
#bash      20417 ctrainee  txt       REG  253,0   943360   163899 /bin/bash
#
#lsof -F t -u ctrainee ( -F prints the output in a format tha can be parsed by other program or command. t prints the file_type field only, where file_type is preceded                         by t for every entry and pid is preceded by p. -u user_name prints open files for user_name only)
#command output
#
#p20149  -> p represents process
#tDIR    -> t represents type of file
#tDIR
#tREG
#tREG
#
#
#lsof -F t -u ctrainee | sed '/^p[0-9]/d; s/^t//'  ( Removing t preceding file_type and pids.)
#command output
#
#DIR   
#DIR
#REG
#REG 
#
#lsof $OPTIONS | sed '/^p[0-9]/d; s/^t//' | sort | uniq -c
#command output
#
# 2 DIR
# 2 REG

#This function finds open files in system of all users all specific user based on arguments.
#
get_open_files_count()
{ 
  debug_log "Mehod Called: get_open_files_count()"

  #Initialize contents of array to 0 
  INDEX=0  
  while [ $INDEX -le $MAX_FILE_TYPES ]; do     
    openFile_count[$INDEX]=0
    INDEX=`expr $INDEX + 1`
  done
  debug_log "Array set to ${openFile_count[@]}  "  
    
  debug_log "Running lsof Command and result is stored in LSOF_OUTPUT"
  #using sed, lines containing process are deleted and character t preceding file_type is removed.
  LSOF_OUTPUT=`lsof $OPTIONS | sed '/^p[0-9]/d; s/^t//' | sort | uniq -c`
  debug_log "LSOF_OUTPUT: $LSOF_OUTPUT"
  

  #Storing count of different type of open files into array openFile_count.
  #
  debug_log "In for loop: to store count of files in Array"
  INDEX=0
  for FILE_TYPE in `echo $LSOF_OUTPUT`; do     
    REM=`expr $INDEX % 2`    
    if [ $REM -eq 0 ]; then
      COUNT=$FILE_TYPE              #COUNT will hold the count of one file_type
      debug_log "In if : INDEX=$INDEX   REM=$REM    COUNT=$COUNT"
      INDEX=`expr $INDEX + 1`
      continue
    fi
     
    debug_log "In case : INDEX=$INDEX   REM=$REM    FILE_TYPE=$FILE_TYPE"
    case $FILE_TYPE in 
      "IPv4")openFile_count[1]=$COUNT;;
      "IPv6")openFile_count[2]=$COUNT;;
      "PIPE")openFile_count[3]=$COUNT;;
      "FIFO")openFile_count[4]=$COUNT;;
      "DIR")openFile_count[5]=$COUNT;;
      "LINK")openFile_count[6]=$COUNT;;
      "BLK")openFile_count[7]=$COUNT;;
      "CHR")openFile_count[8]=$COUNT;;
      "REG")openFile_count[9]=$COUNT;;
      "unknown")openFile_count[10]=$COUNT;;
      "sock")openFile_count[11]=$COUNT;;
      "unix")openFile_count[12]=$COUNT;;
      *)openFile_count[13]=`expr ${openFile_count[13]} + $COUNT`;;  #Storing count of other files
    esac
    openFile_count[0]=`expr ${openFile_count[0]} + $COUNT`
    COUNT=0
    INDEX=`expr $INDEX + 1`
  done  

  debug_log "for loop terminated........count of open_files are stored in array..."
  
  debug_log "Mehod returned: get_open_files_count()"  
}

show_data()
{  
  
  debug_log "method called : show_data()"
  #Will print the output in monitor format
  if [ $RFLAG -eq 0 ]; then
    debug_log "In if : monitor mode is on"
    echo "${openFile_count[@]}"
  #Will print the output in user format
  else
    debug_log "in else: user mode is on"
    echo ""
    date
    echo ""
    echo "File Type                 Count"
    echo "IPV4                      ${openFile_count[1]}"
    echo "IPV6                      ${openFile_count[2]}"
    echo "PIPE                      ${openFile_count[3]}"
    echo "FIFO                      ${openFile_count[4]}"
    echo "DIR                       ${openFile_count[5]}"
    echo "LINK                      ${openFile_count[6]}"
    echo "BLK                       ${openFile_count[7]}"
    echo "CHR                       ${openFile_count[8]}"
    echo "REG                       ${openFile_count[9]}"
    echo "unknown                   ${openFile_count[10]}"
    echo "sock                      ${openFile_count[11]}"
    echo "unix                      ${openFile_count[12]}"
    echo "OTHERS                    ${openFile_count[13]}"
    echo "Count of All Files        ${openFile_count[0]}"
    echo ""
  fi
  debug_log "exiting method: show_data"
}

###################################################################


#initializing variables

UFLAG=0
RFLAG=0
SFLAG=0
IFLAG=0
DEBUG=0

#Validating Arguments
debug_log "....CM_LSOF_STATS MONITOR....STARTED" 
debug_log "validating arguments"

while getopts i:rsu:d? choice 2>/dev/null
do
  case $choice in
    i)INTERVAL_SECS=$OPTARG; IFLAG=1;;
    r)RFLAG=1;;     
    u)USER=$OPTARG; UFLAG=1;;   
    s)SFLAG=1;;
    d)DEBUG=1;;
    ?)Usage "Error: Invalid Arguments";;
  esac
done

set_debug_log_file 

#Checking whether all files's names are required or for specific user only.
#
if [ $UFLAG -eq 0 -a $SFLAG -eq 0 ];then # will be true if no user is specified...data will be printed for all users
  debug_log "In if:  to set options to print data for all users"
  OPTIONS="-n -F t"
  debug_log "OPTIONS = $OPTIONS"
else
  debug_log "In else: to set options to print data for specific user"

  if [ $SFLAG -eq 1 ]; then
    if [ $UFLAG -eq 1 ]; then
      Usage "Error: Either provide -u or -s"     #check whether user is also provided with -s
    else
      USER=`whoami`
    fi
  else
    #checking whether given user exists or not.
    grep -w "^$USER" /etc/passwd > /dev/null    
    if [ $? -eq 1 ]; then
      Usage "Error: User $USER doesn't exist"
    fi
  fi
  OPTIONS="-n -F t -u $USER"    #setting arguments for lsof
fi

debug_log "out of if...else."

if [ $RFLAG -eq 1 ]; then
  if [ $IFLAG -eq 1 ]; then
    echo "Warning: Interval is not needed in user format. Ignoring interval"  #printing warning if interval is provided with user format output
  elif [ -n "$MON_TEST_RUN" ]; then
    Usage "Cannot Print output in user format with netstorm. It should be executed stand alone"
  fi
  get_open_files_count  
  show_data
else
  #if output is to be printed in monitor format, then it will be printed in loop
  while true
  do
    isTestOver $MON_TEST_RUN
    #Test is over. So exit with success status
    if [ $? = 1 ]; then
      exit 0
    fi

    get_open_files_count
    show_data
    lib_sleep $INTERVAL_SECS
  done
fi

exit 0
