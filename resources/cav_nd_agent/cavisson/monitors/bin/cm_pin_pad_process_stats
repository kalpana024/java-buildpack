
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

INTERVAL_SECS=$MON_FREQUENCY
VECTOR_FLAG="0"
FILE_PATH=""     


show_data()
{
  i=0
  while [ $i -lt $NUM_OF_PROCESS ]
  do
    if [ "X$vector_prefix" = "X" -o "X$VECTOR_PREFIX" = "Xnoprefix" ] ; then
      echo ${PROCESS_NAME[$i]}"|"${CPU_USAGE[$i]}" "${MEM_USAGE[$i]}
    else
      echo $vector_prefix"_"${PROCESS_NAME[$i]}"|"${CPU_USAGE[$i]}" "${MEM_USAGE[$i]}
    fi
    i=`expr $i + 1`
  done
}

show_vectors()
{
  prefix="${vector_prefix}_"
  if [ "X$vector_prefix" = "X" ]; then
    echo ${PROCESS_NAME[@]}
  else
    echo ${PROCESS_NAME[@]/#/$prefix}
  fi
}    


#Creating array for each output fields
read_into_array()
{
  if [ "X$vector_prefix" = "X" ]; then
    data=`echo $line | awk -F'ProcessName' '{for(i=2;i<=NF;i++) print $i}'| awk -F'"' '{printf "%s %.1f %.1f\n",$2,($4/10),($6/10)}' | tr -d "(" | tr -d ")"`
  else
    data=`echo $line | awk -F'ProcessName' '{for(i=2;i<=NF;i++) print $i}'| awk -v "var=$vector_prefix" -F'"' '{printf "%s_%s %.1f %.1f\n",var,$2,($4/10),($6/10)}' | tr -d "(" | tr -d ")"`
  fi
 
  read -a general_arr<<<$data
  total_no_of_elements=`echo "${#general_arr[@]}"`
  flag=0
  i=0
  j=0
  while [ $i -lt $total_no_of_elements ]
  do
    counter[$j]=0           #Counter stores number of occurence of every process_name. If repeated the it's renamed to vector_1 and vector_2 and so on.
    
    k=0
    while [ $k -lt $j ]
    do
      if [ "X${general_arr[$i]}" = "X${PROCESS_NAME[$k]}" ]; then
        counter[$k]=`expr ${counter[$k]} + 1`              
        PROCESS_NAME[$j]=${PROCESS_NAME[$k]}"_"${counter[$k]}
        flag=1
        break
      fi
      k=`expr $k + 1`
    done
    if [ $flag -eq 0 ];then
      PROCESS_NAME[$j]=`echo ${general_arr[$i]}`
      CPU_USAGE[$j]=`echo ${general_arr[$((i+1))]}`
      MEM_USAGE[$j]=`echo ${general_arr[$((i+2))]}`
    else
      CPU_USAGE[$j]=`echo ${general_arr[$((i+1))]}`
      MEM_USAGE[$j]=`echo ${general_arr[$((i+2))]}`
      flag=0
    fi
    i=`expr $i + 3`
    j=`expr $j + 1`
  done

  NUM_OF_PROCESS=${#PROCESS_NAME[@]}
}   


process_data()
{
  flag=0

  echo $line | grep "^<ProcessUsage>" >/dev/null
  if [ $? -ne 0 ]; then
    continue
  fi
  while [ $flag -eq 0 ]
  do
    echo $line | grep "</ProcessUsage>$" >/dev/null     
    if [ $? -eq 0 ]; then
      read_into_array
  
      #We are missing the first sample of data because of sleep. It is done to avoid the duplicate breadcrumb message in monitor.log with the help of delay_flag variable.
      #if [ $delay_flag -eq 1 ]; then
        #sleep $INTERVAL_SECS                  
      #  delay_flag=0
      #fi

      show_data
      flag=1
    fi
  done
}


display_help_and_exit()
{
  echo -e "\n$1\n"
  echo "Usage: cm_pin_pad_process_stats [-v <vector_prefix> ] or [-i <Interval>]"
  echo "-f: option used for providing the file path from which datat is to be read"
  echo "-v: option used to get vector list, which will be process name"
  echo "-i: used for interval (in seconds)"
  echo "-X: used for <vector prefix/noprefix>"
  echo "-L: used for <header/data>"
  exit -1
}

#######################################################################################

while getopts i:vX:f:L:? arg
do
  case $arg in
    v) VECTOR_FLAG="1"
       export vector_prefix=$OPTARG
       ;;
    f) FILE_PATH=$OPTARG
       ;;
    X) export vector_prefix=$OPTARG
       ;;
    L) if [ "X$OPTARG" = "Xheader" -o "X$OPTARG" = "XHEADER" ]; then
         VECTOR_FLAG="1"
       fi
       ;;
    i) INTERVAL_SECS=$OPTARG
       echo $INTERVAL_SECS | grep '^[0-9]*$' 2>&1 >/dev/null
       if [ $? != 0 ];then
         echo "Integer expression must required with -i option!"
         exit -1
       fi
       ;;
    *) display_help_and_exit ;;
    ?) display_help_and_exit ;;
  esac
done

if [ "X$FILE_PATH" = "X" ]; then
  display_help_and_exit "File path is mandatory arguement"
fi
delay_flag=1

#To get vector list
if [ "X$VECTOR_FLAG" = "X1" ];then    
  #show_vectors
  echo "Warning: No vectors."
  exit 0
fi

while :
do
  if [ -f $FILE_PATH ]; then
    line=`tail -1 $FILE_PATH`
    if [ "X$line" != "X" ]; then
      process_data 
    fi
  else
    echo "File from which data is to be read does not exist. Filename = $FILE_PATH"
  fi
  sleep $INTERVAL_SECS
  unset PROCESS_NAME
  unset CPU_USAGE
  unset MEM_USAGE
  unset counter
done
exit 0
