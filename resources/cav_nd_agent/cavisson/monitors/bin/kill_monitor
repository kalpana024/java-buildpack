# Purpose: 
# Varaibles must be set CAV_MON_HOME 

#Notes:

# Define CAV_MON_PATTERN_FOR_KILL in sys/cmon.env to kill monitors using pkill/search using these
# pattern
# 2. How to register customer program to be executed after test is over
# Define CAV_MON_CLEANUP_PGM in sys/cmon.env. It must be full path and have executed permisson
#

#CAV_MON_PATTERN_FOR_KILL="vmstat top netstat"  ENVIRON
#CAV_MON_CLEANUP_PGM=""  ENVIRON


#PS_CMD_FOR_SEARCH=""
#PATTERN=""
PID=""
DEBUG_FLAG=0
#PATTERN_FOR_BUNDLED_MON="cm_actimize_svc_time cm_apache_svc_time cm_coherence_stats cm_df cm_eth_stats cm_file cm_free cm_iostat cm_java_gc cm_java_gc_ex cm_jstat_gc cm_mpstat cm_ps_data cm_spring_dm_stats cm_tcp_states_count cm_tcp_stats_aix cm_tcp_stats_linux cm_tcp_stats_solaris cm_uptime cm_weblogic_jdbc_stats cm_weblogic_qstats cm_weblogic_servlet cm_weblogic_svc_time cm_websphere_time chm_tcpdump"

CURRENT_OS=`uname`

#Set CAV_MON_HOME to allow testing from commnad line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    export CAV_MON_HOME="/export/cavisson/monitors"
  fi
fi

#Source in all cases
if [ -f $CAV_MON_HOME/sys/cmon.env ];then
. $CAV_MON_HOME/sys/cmon.env
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

# We are handling SIGTERM here as this shell sends SIGTERM to all childrens of given PID, but it may possible it can be a child of that PID, so it will kill itself
#trap ':' '15'    #NOTE:it doesn't work on AIX


debug_log()
{
  if [ "X$DEBUG_FLAG" = "X0" ]; then
    return
  fi
  echo "kill_monitor: "$*
}

Usage()
{
  echo "Usage:" 
  echo "$0 [ -P <ppid> ]"
  echo "$0 [ -s <pattern> ]"
  echo "$0 [ -D ]"
  exit 1
}


# NOTE:We can't use these funtion because pkill -x dont not take more than 15 character as pattern and ps -ef dont work on Solaris#  
#
#
#kill_children_using_pkill()
#{ 
#  debug_log "Begin to kill child process(s) with PPID=$PID."
#  pkill -P $PID   2>&1
#  if [ $? = 0 ]; then
#    echo "Killed all monitor(s) whose parent pid = $PID"
#  fi
#  debug_log "Finish Killing."
#}

#pkill -x do not take more the 15 character pattern
#kill_process_using_search_pkill()
#{
#pat=$1
#
#  debug_log "Begin to kill process with search pattern = $pat"
#  pkill -f $pat  2>&1
#  if [ $? = 0 ]; then
#   echo "Killed all monitor(s) with search pattern = $pat"
#  fi
#  debug_log "Finish Killing."
#
#}
#
#
#kill_all_pattern_using_pkill()
#{
#  debug_log echo "Begin to kill process(s) with PATTERN=$PATTERN"
#  for pat in $PATTERN
#  do
#    kill_process_using_search_kill $pat
#  done
#  debug_log "Finish Killing."
#  
#  debug_log echo "Begin to kill process(s) with PATTERN=$CAV_MON_PATTERN_FOR_KILL"
#  for pat in $CAV_MON_PATTERN_FOR_KILL
#  do
#    kill_process_using_search_kill $pat
#  done
#  debug_log "Finish Killing."
#}

# Argument
# Arg1 - Pattern or Child (Later)
# Arg2, 3, 4, 5, ... list of pids (Later)

# Arg1, 2, 3, 4, 5, ... list of pids 
kill_display_pid_processes()
{
  debug_log "Entering kill_display_pid_processes."
  #forWhich=$1 Later
  #shift Later
  #pid_list=( $* )

  #Manish: Why we are making pid list here???
  j=0
  for index in `echo $*`
  do
    pid_list[$j]=$index
    j=`expr $j + 1`
  done

  echo "kill_monitor: LIST of child pids which have to be killed [cmon pid = $PID]- ${pid_list[@]}"
  if [ "X$pid_list" = "X" ];then
    echo "kill_monitor: Error - Pid list empty can't process."
  else
    #for pid in ${pid_list[@]}
    #do 
    #  lib_kill_process_using_pid "kill_monitor" $pid
    #done
    
    lib_kill_process_using_pid_list "kill_monitor" "${pid_list[@]}"
  fi
  debug_log "Leaving kill_display_pid_processes."
}


#killing functions
kill_children_using_kill()
{ 
  echo "kill_monitor: Begin to kill child process(s) with PPID=$PID."
  OS_NAME=`nsi_get_linux_release_ex -d`

  debug_log "kill_children_using_kill(): OS_NAME = $OS_NAME, CURRENT_OS = $CURRENT_OS"
  if [ "X$OS_NAME" = "XFedora" -o "X$OS_NAME" = "XUbuntu" -o "X$OS_NAME" = "XRedhat" -o "X$CURRENT_OS" = "XSunOS" ]; then
    epids=`get_excp_pid_list`
    debug_log "Exception pid list = [$epids]"
    kill_display_pid_processes "`lib_get_proc_tree $PID \"kill_monitor\" $epids`" 
  else 
    #pid_list=( `$LIB_PS_CMD_FOR_SEARCH | grep -v kill_monitor | grep -v grep | grep -v awk| grep -w  $PID | awk -v pid=$PID '{ if(pid==$3) print $2 }'|grep -v $PID` )
  
    j=0
    for index in `$LIB_PS_CMD_FOR_SEARCH | grep -v kill_monitor | grep -v grep | grep -v awk| grep -w  $PID | awk -v pid=$PID '{ if(pid==$3) print $2 }'|grep -v $PID`
    do
      pid_list[$j]=$index
      j=`expr $j + 1`
    done
    kill_display_pid_processes "${pid_list[@]}" 
  fi
  echo "kill_monitor: Finish Killing."
}

#kill_process_using_search_kill()
#{
#  pat=$1
#  debug_log "Begin to kill process(s) with PATTERN=$pat"
#  if [ "X$CURRENT_OS" = "XSunOS" ]; then
#    #pattern_pid_list=( `$PS_CMD_FOR_SEARCH | grep -v kill_monitor | grep $pat | grep -v grep | grep -v awk |awk '{ print $2 }' 2>&1` )
#    j=0
#    for index in `$PS_CMD_FOR_SEARCH | grep -v kill_monitor | grep $pat | grep -v grep | grep -v awk |awk '{ print $2 }' 2>&1`
#    do
#      pattern_pid_list[$j]=$index
#      j=`expr $j + 1`
#    done
#  else
#    #pattern_pid_list=( `$PS_CMD_FOR_SEARCH | grep -v kill_monitor | grep $pat | grep -v grep | grep -v nawk |nawk '{ print $2 }' 2>&1` )
#    j=0
#    for index in `$PS_CMD_FOR_SEARCH | grep -v kill_monitor | grep $pat | grep -v grep | grep -v nawk |nawk '{ print $2 }' 2>&1`
#    do
#      pattern_pid_list[$j]=$index
#      j=`expr $j + 1`
#    done
#  fi
  
#  kill_display_pid_processes "${pattern_pid_list[@]}"  
  
#  debug_log "Finish Killing."
#}

#kill_all_pattern_using_kill()
#{ 
#  debug_log "Begin to kill process(s) with PATTERN=$PATTERN."
#  for pat in $PATTERN
#  do
#    kill_process_using_search_kill $pat
#  done
#  if [ "X$CAV_MON_PATTERN_FOR_KILL" = "X" ]; then
#    debug_log  "No pattern found to kill in CAV_MON_PATTERN_FOR_KILL."
#  else
#    #debug_log "Begin to kill process(s) with PATTERN=$CAV_MON_PATTERN_FOR_KILL."
#    for pat in $CAV_MON_PATTERN_FOR_KILL
#    do
#      kill_process_using_search_kill $pat
#    done
#    fi
#  debug_log "Leaving kill_all_pattern_using_kill(). "
#}

kill_no_args()
{
  #cmon show_pid
  #16783

  PID=`$CAV_MON_HOME/bin/cmon show_pid`
  if [ $? != 0 ];then
    debug_log "CavMonAgent pid not found."
    PID=""
  fi

  #PATTERN=$PATTERN_FOR_BUNDLED_MON
}

validate_cmon_pid()
{
  #Validate pid is valid and it is cmon's pid (so that is there is any bug in show_pid we do not kill incorrect processes)
  # Also trim PID
  # We have issue in one case where it found all processes running in the system.
  #12/12 08:24:24 PM|Process Tree of pid <Here pid is missing or space> kill_monitor......
  #***------------------------------ Process Tree Of Pid kill_monitor ---------------------------------------***
  #child_pid_list = [1 2 382 612 669 1093 1108 1133 1147 1159 1173 1188 1222 1285 1298 1309 1320 1331 1362 1380 1395 1409 2891 4021 5268 5349 5399 5647 5654 5731 5875 6021 6023 6025 6027 6029 6031 6059 8113 10139 10491 13911 14971 15474 20328 22168 26265 27105 28447 28807 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 59 60 62 63 66 67 68 69 307 314 323 371 554 706 746 747 748 749 750 751 752 753 754 755 1012 13662 6034 6035 29905 14758 1174 1223 3378 4827 4901 4981 8676 8777 10758 10870 11168 11582 11961 12112 12469 13439 14299 18242 19448 22597 1378 1381 1382 1383 1384 3689 3690 3691 3692 3693 3694 3695 3696 4517 4518 4519 4520 4521 4522 4523 4524 6061 26751 1246 1256 3381 4829 4903 4983 8679 8779 10760 10872 11171 11585 11964 12115 12471 13441 14301 18245 19585 22599 6071 3382 4830 4904 4984 8680 8780 10761 10873 11172 11778 12116 12472 15549 14302 18246 19586 22600 12103 12075 8881 10974 12226 15607 20993 8884 15698 15706]
  #
  #Check number of line in PID and wc - Should be one line and one word
  #And pid is running and it is java process
  #[root@cavisson-server work]# ps -p 16783
  #  PID TTY          TIME CMD
  #  16783 pts/0    00:00:04 java
 
  debug_log "Validating provided pid is cmon pid or not" 
  #validating PID has one line and one word
  num_line=`echo $PID | wc -l`
  num_word=`echo $PID | wc -w`
  debug_log "num_line = $num_line, num_word = $num_word"
  if [ $num_line -ne 1 -o $num_word -ne 1 ];then
    echo "kill_monitor: cmon pid $PID has more than one line or more than one word"
    exit 1 
  fi

  #triming space from PID
  PID=`echo $PID | sed 's/[ ]//g'` 
 
  #validating pid is numeric 
  echo $PID | grep '^[0-9]*$' >/dev/null 2>&1
  if [ $? != 0 ];then
    echo "kill_monitor: cmon pid $PID must be a numeric number."
    exit 1
  fi


  #validating pid is running 
  ps -p $PID
  if [ $? -ne 0 ];then
    echo "kill_monitor: cmon pid $PID is not running" 
    exit 1
  fi

  #valiading pid java process and is cmon pid
  #COMMAND
  #java -DPKG=cmon -DCAV_MON_HOME=/opt/cavisson/monitors -DCLASSPATH=/opt/cavisson/monitors/lib/java-getopt-1.0.9.jar:/opt/cavisson/monitors/bin:/
  PID_ARGS=`ps -p $PID -o 'args' |tail -1`
  PID_PRG=`echo $PID_ARGS | cut -d' ' -f 1` 
  PID_PKG=`echo $PID_ARGS | cut -d'=' -f 2 | cut -d' ' -f 1` 
  
  if [ "X$PID_PRG" != "Xjava" -o "X$PID_PKG" != "Xcmon" ];then
    echo "kill_monitor: pid $PID may be not java process or may be not cmon pid"
    exit 1
  fi
}

#remove_old_files()
#{ 
#  debug_log "cleaning log files"
#  find $CAV_MON_HOME/logs/ -name "*" -type f -mtime +7 -exec rm -f {} \;  >/dev/null 2>&1
#}

debug_log "Starting kill_monitor to kill hanging monitors if any"

while getopts s:P:D?  c
do
  case $c in 
    P) PID=$OPTARG ;;  #Parent process ID whose child need to be killed
    s) PATTERN=$OPTARG ;;
    D) DEBUG_FLAG=1;; 
    ?) Usage ;;
  esac
done

echo "kill_monitor: kill_monitor script called, PID = $PID, PATTERN = $PATTERN, DEBUG_FLAG = $DEBUG_FLAG"

#argument checking
if [ "X$PID" = "X" -a "X$PATTERN" = "X" ]; then
  #echo "No Argument :Setting Default PID and Pattern"
  kill_no_args
fi

#Setting PS_CMD_FOR_SEARCH as per current operating system  
lib_set_ps_cmd

validate_cmon_pid

if [ "X$PID" != "X" ]; then
  kill_children_using_kill
else
  echo "kill_monitor: cmon pid is not given or not found. so not killing child of cmon"
fi

#kill_all_pattern_using_kill

#function calls according to the operating system
#if [ "X$CURRENT_OS" = "XLinux" -o "X$CURRENT_OS" = "XSunOS" ]; then
#  if [ "X$PID" != "X" ]; then
#    kill_children_using_kill
#  fi
#  kill_all_pattern_using_kill
#else  #for AIX or others
#  if [ "X$PID" != "X" ];then
#    kill_children_using_kill
#  fi
#  kill_all_pattern_using_kill
#fi

if [ "X$CAV_MON_CLEANUP_PGM" != "X" ]; then
  debug_log "Staring customer cleanup program"
  #should be semicolon seperated list . 
  $CAV_MON_CLEANUP_PGM 
  if [ "X$?" = "X0" ]; then
    echo "Killed customer cleanup program"
  fi 
  debug_log "Completed customer cleanup program"
fi

# We do not need this as CavMon is remvoing files based on the retention period
# Removed by Neeraj in 3.9.2 B25
#remove_old_files

echo "kill_monitor: Completed kill_monitor"
exit 0
