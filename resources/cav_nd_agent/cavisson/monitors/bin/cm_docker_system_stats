#!/bin/bash
#
#NAME: cm_docker_system_stats
#PURPOSE: This is a sample dynamic custom monitor to get data from docker memory stats 
#It parses output of docker info and outputs all data in one line
#Option - 'Run Once'
#GDF - cm_docker_system_stats.gdf
#Keyword -
# DYNAMIC_VECTOR_MONITOR 192.168.1.66 NS cm_docker_system_stats.gdf 2 cm_docker_system_stats -i 10000 EOC cm_docker_system_stats -v
#Sample Output:
#           Container_name|data
#            elated_austin|0.05 .2042 8.326 2.51 0 0 0 0 
#      naughty_brahmagupta|0.05 .2002 8.326 2.46 0 0 0 0 
#             insane_gates|0.05 .1981 8.326 2.44 0 0 0 0 
#              cocky_hugle|0.00 .0004 8.326 0.01 0 0 0 0 
##############################################################################################################################33

if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
   echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh
INTERVAL_SECS=$MON_FREQUENCY
set_mon_shell
old_version_flag=0

display_help_and_exit()
{
  echo "$1"
  echo "Usage: cm_docker_system_stats [-v <vector_prefix> ] or [-i <Interval>]"
  echo "-v: option used to get vector list. Prefix will added before these vector names"
  echo "-i: used for interval (in seconds)"
  echo "-X: used for <vector prefix/noprefix>"
  echo "-L: used for <header/data>"
  echo "-f: Used for path where docker stats are present"
  exit -1
}

show_vectors()
{
  for ((i=0; i<${#vector_name_arr[@]}; i++))
  do
    echo -n "${vector_id_arr[${vector_name_arr[$i]}]}:$vector_prefix${vector_name_arr[$i]} "
  done
  echo ""
}

#This function will return 1 on failure and last character on success
check_last_char()
{
  given_value=$1

  #debug_log "check_last_char Method Called, given_value = [$given_value]"

  if [ "X$given_value" = "X" ];then
    echo "NULL" 
    return 1
  fi

  num_char=`echo "$given_value" | wc -c`
  num_char=`expr $num_char - 1`

  #debug_log "num_char = $num_char"
  echo "`echo "$given_value" | cut -c $num_char`"
}

convert_into_GB()
{
  in_val=$1
  #debug_log "convert_into_GB() Method Called, in_val = [$in_val]"

  last_char=`check_last_char $in_val`
  #debug_log "Last char: last_char = $last_char"
  if [ "X$last_char" = "XNULL" ];then
    return 1
  fi

  if [ "X$last_char" = "XG" -o "X$last_char" = "Xg" ];then
    in_val_without_MKG_suffix=`echo "${in_val%?}"`
    out_val=$in_val_without_MKG_suffix
  elif [ "X$last_char" = "XT" -o "X$last_char" = "Xt" ];then
     in_val_without_MKG_suffix=`echo "${in_val%?}"`
     if [ $BC_AVAILABLE -eq 1 ];then
       out_val=`echo "scale=4; $in_val_without_MKG_suffix * 1000" |bc`     #1TB= 1000GB 
     else
       out_val=`awk -v "var1=$in_val_without_MKG_suffix" 'BEGIN{printf "%.4f", (var1 * 1000)}'`
     fi
  elif [ "X$last_char" = "XM" -o "X$last_char" = "Xm" ];then
    in_val_without_MKG_suffix=`echo "${in_val%?}"`
    if [ $BC_AVAILABLE -eq 1 ];then
      out_val=`echo "scale=4; $in_val_without_MKG_suffix / 1024" |bc`      #1MB = 1/1024 GB
    else
      out_val=`awk -v "var1=$in_val_without_MKG_suffix" 'BEGIN{printf "%.4f", (var1 / 1024)}'`
    fi
  elif [ "X$last_char" = "XK" -o "X$last_char" = "Xk" ];then
    in_val_without_MKG_suffix=`echo "${in_val%?}"`
    if [ $BC_AVAILABLE -eq 1 ];then
      out_val=`echo "scale=4; $in_val_without_MKG_suffix / 1048576" |bc`   #1KB = 1/(1024 * 1024) GB
    else
      out_val=`awk -v "var1=$in_val_without_MKG_suffix" 'BEGIN{printf "%.4f", (var1 / 1048576)}'`
    fi
  else #if in byte
    if [ $BC_AVAILABLE -eq 1 ];then
      out_val=`echo "scale=4; $in_val / 1073741824" |bc`                      #1byte = 1/(1024 * 1024 *1024)
    else
      out_val=`awk -v "var1=$in_val" 'BEGIN{printf "%.4f", (var1 / 1073741824)}'`
    fi
  fi

  echo $out_val
}



check_unit_and_convert()
{
  value=$1
  if [ "X$value" = "X0" ]; then
    echo $value
    return
  fi
  next_value=${data[`expr $j + 1`]}
  if [ "X$next_value" = "XMB" -o "X$next_value" = "XMiB" ]; then
    convert_into_GB $value"M"
  elif [ "X$next_value" = "XkB" -o "X$next_value" = "XkiB" ]; then
    convert_into_GB $value"K"
  elif [ "X$next_value" = "XB" ]; then
    convert_into_GB $value
  elif [ "X$next_value" = "XGB" -o "X$next_value" = "XGiB" ]; then
    echo $value
  fi
  
}

check_unit_and_convert_into_day()
{
  value=$1
  unit=$2

  if [ "X$value" = "XAbout" ]; then
    about_unit=`echo $line | awk 'BEGIN{FS="Up"} {print $2}' | awk -F ' ' '{print $3}'`
    if [ "X$about_unit" = "Xhour" ]; then
      check_unit_and_convert_into_day "1" "hours"
    elif [ "X$about_unit" = "Xminute" ]; then
      check_unit_and_convert_into_day "1" "minutes"
    fi
  elif [ "X$unit" = "Xweeks" ];then
    echo "$value * 7" |bc
  elif [ "X$unit" = "Xhours" ]; then
    echo "scale=4; $value / 24" |bc
  elif [ "X$unit" = "Xminutes" ]; then
    echo "scale=4; $value / 1440" |bc
  elif [ "X$unit" = "Xseconds" ]; then
    echo "scale=4; $value / 86400" |bc
  else
    echo "$value"
  fi
}

SYS_SLICE_FOUND=0

check_for_file()
{
  if [ "X$FILE_PATH" = "X" ]; then
    if [ -e "$stats_path/blkio/docker" ];then
      FILE_PATH="$stats_path/blkio/docker"
    elif [ -e "$stats_path/blkio/system.slice" ];then
      FILE_PATH="$stats_path/blkio/system.slice"
      SYS_SLICE_FOUND=1
    fi
  else
    if [[ "$FILE_PATH" =~ "system.slice" ]] ;then
      SYS_SLICE_FOUND=1
    fi
  fi
}

calculate_uptime()
{
  container_id=$1 
  while read line
  do
    id=`echo $line | awk '{print $1}'`
    if [ "X$id" = "X$container_id" ]; then
      echo $line | grep "Up" >/dev/null 2>&1
      if [ $? -eq 0 ];then
        data=`echo $line | awk 'BEGIN{FS="Up"} {print $2}' | awk -F ' ' '{print $1}'`
        unit=`echo $line | awk 'BEGIN{FS="Up"} {print $2}' | awk -F ' ' '{print $2}'`
        ret=`check_unit_and_convert_into_day $data $unit`
        echo $ret
      else
        echo "0"
      fi
    fi
  done < $CAV_MON_HOME/docker_ps_output
}

show_data()
{
  docker ps | grep -v "CONTAINER" > $CAV_MON_HOME/docker_ps_output 2>/dev/null
  for ((i=0; i<${#vector_name_arr[@]}; i++))
  do
    if [ "X${vector_id_arr[${vector_name_arr[$i]}]}" = "X" ]; then
      vector_id_arr[${vector_name_arr[$i]}]=$index
      index=`expr $index + 1`
    fi
    
    if [ $old_version_flag -eq 0 ];then
      data=($(docker stats --no-stream ${id_arr[$i]} | tail -1 | tr -d '%/'))
    else
      data=($(docker stats --no-stream ${id_arr[$i]} | tail -1 | tr '%/' ' '))

      if [ $SYS_SLICE_FOUND -eq 1 ]; then
        COMPLETE_FILE_PATH="$FILE_PATH/docker-${id_arr[$i]}*.scope"
      else
        COMPLETE_FILE_PATH="$FILE_PATH/${id_arr[$i]}*"
      fi
      ls $COMPLETE_FILE_PATH > /dev/null

      if [ $? -eq 0 ];then
        read_arr1=($(cat $COMPLETE_FILE_PATH/blkio.throttle.io_service_bytes | sed -n '/Read/p'))
        write_arr1=($(cat $COMPLETE_FILE_PATH/blkio.throttle.io_service_bytes | sed -n '/Write/p'))
      fi
      if [ ${#read_arr1[@]} -eq 0 ];then
        read_arr1=( 0 0 0 )
      fi
      if [ ${#write_arr1[@]} -eq 0 ];then
        write_arr1=( 0 0 0 )
      fi
      if [ $BC_AVAILABLE -eq 1 ];then
        read_arr1[2]=$(echo "scale=4;${read_arr1[2]}/1073741824" | bc)
        write_arr1[2]=$(echo "scale=4;${write_arr1[2]}/1073741824" | bc)
      else
        read_arr1[2]=`awk -v "var1=${read_arr1[2]}" 'BEGIN{printf "%.4f", (var1 / 1073741824)}'`
        write_arr1[2]=`awk -v "var1=${write_arr1[2]}" 'BEGIN{printf "%.4f", (var1 / 1073741824)}'`
      fi
    fi

    echo -n "${vector_id_arr[${vector_name_arr[$i]}]}:$vector_prefix${vector_name_arr[$i]}|"
    for ((j=1; j<`expr ${#data[@]} - 1`; j++))
    do
      if [ $j -eq 2 -o $j -eq 4 -o $j -eq 7 -o $j -eq 9 -o $j -eq 11 -o $j -eq 13 ]; then
        ret=`check_unit_and_convert ${data[$j]}`
        j=`expr $j + 1`
        echo -n "$ret "
      else
        echo -n "${data[$j]} "
      fi
    done

    if [ $old_version_flag -eq 1 ];then
      printf "%0.4f %0.4f " ${read_arr1[2]} ${write_arr1[2]}
    fi

    uptime=`calculate_uptime ${id_arr[$i]}`
    if [ "X$uptime" = "X" ]; then
      uptime=0
    fi
    echo "$uptime"
  done
  rm -f $CAV_MON_HOME/docker_ps_output
}

get_version()
{
  version=`docker --version| cut -d' ' -f 3`
  if [ "X$version" == "X1.7.1," ];then
    old_version_flag=1
  fi
}

ls /cgroup >/dev/null 2>&1

if [ $? -eq 0 ];then
  stats_path="/cgroup"
else
  ls /sys/fs/cgroup >/dev/null 2>&1
  if [ $? -eq 0 ];then
    stats_path="/sys/fs/cgroup"
  else
    echo "cgroup directory not found"
    exit -1
  fi
fi

while getopts i:v:X:L:f:? arg
do
  case $arg in
    v) VECTOR_FLAG="1"
       export vector_prefix=$OPTARG
       ;;
    X) export vector_prefix=$OPTARG
       ;;
    L) if [ "X$OPTARG" = "Xheader" -o "X$OPTARG" = "XHEADER" ]; then
         VECTOR_FLAG="1"
       fi
       ;;
    i) INTERVAL_SECS=$OPTARG
       freq_option="1"
       echo $INTERVAL_SECS | grep '^[0-9]*$' 2>&1 >/dev/null
       if [ $? != 0 ];then
         echo "Integer expression must required with -i option!"
         exit -1
       fi
       ;;
    f) FILE_PATH=$OPTARG ;;
    *) display_help_and_exit ;;
    ?) display_help_and_exit ;;
  esac
done

if [ "X$vector_prefix" == "Xnoprefix" ];then
  vector_prefix=""
fi

get_version

check_for_file

declare -A vector_id_arr

id_arr=($(docker ps | grep -v CONTAINER|awk '{print $1}'))
vector_name_arr=($(docker ps |grep -v CONTAINER|awk '{print $NF}'))

index=0
while [ $index -lt ${#vector_name_arr[@]} ]
do
 vector_id_arr[${vector_name_arr[$index]}]=$index
 index=`expr $index + 1`
done

if [ "X$VECTOR_FLAG" = "X1" ];then  #To get vector list from iostat command
  show_vectors
else #To get data on every specified interval
  while :
  do
    isTestOver $MON_TEST_RUN
    # Test is over. So exit with success status
    if [ $? = 1 ]; then
      exit 0
    fi
    show_data
    prev_vector=(${vector_name_arr[@]})
    prev_id=(${id_arr[@]})
    lib_sleep $INTERVAL_SECS
    id_arr=($(docker ps| grep -v CONTAINER|awk '{print $1}'))
    vector_name_arr=($(docker ps|grep -v CONTAINER|awk '{print $NF}'))
    for((i=0; i<${#prev_id[@]}; i++))
    do
      echo ${id_arr[@]} | grep ${prev_id[$i]} >/dev/null 2>&1
      if [ $? -ne 0 ]; then
        id_arr[${#id_arr[@]}]=${prev_id[$i]}
        vector_name_arr[${#vector_name_arr[@]}]=${prev_vector[$i]}
      fi
    done
  done
fi

exit 0

