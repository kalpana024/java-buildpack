##############################################################################################################################################
# Name  : cm_tcp_queue_stats
# Usage : cm_tcp_queue_stats -i <interval in secs> -l <local ip:port> or -f <foreign ip:port>
#         This will work on any Linux.
# Purpose: This shell outputs no. of connections and stats of TCP Transmit Queue & Receive Queue, run once for option 2
# Output : No. of Connections Transmit_Queue Receive_Queue
#          4                  0              0
# Initial version : Saturday, October 06 2012
# Modification    : 
#                   Prachi - 11 Oct 2012, Fixed Bug: 4793
#
# Author Name     : Prachi
#
#Format /proc/net/tcp
#
#sl  local_address rem_address   st tx_queue rx_queue tr tm->when retrnsmt   uid  timeout inode                               
#0:  00000000:0203 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0  0 335 1 c1674320 300 0 0 0
#1:  00000000:0025 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0  0 310 1 c16799a0 300 0 0 0
#2:  00000000:0369 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0  0 316 1 c1677ca0 300 0 0 0
#
###############################################################################################################################################

DEBUG=0
LOCAL_IP_PORT=""
FOREIGN_IP_PORT=""
OS_NAME=`uname`
PID="$$"
count=0

#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh 


INTERVAL_SECS=$MON_FREQUENCY

set_proc_file()
{
  if [ "X$OS_NAME" = "XSunOS" ]; then
    PROC_FILE_FOR_DATA=""
  else #Linux,AIX
    PROC_FILE_FOR_DATA="/proc/net/tcp" 
  fi
}

Usage()
{ 
  echo "Usage:" 
  echo "cm_tcp_queue_stats [ -l | -f ] [-i \<time in seconds\>]"
  echo " -i for interval."
  echo " -l for local IP:Port."
  echo " -f for foreign IP:Port."
  echo "E.g."
  echo "cm_tcp_queue_stats -l 0.0.0.0:8249"
  exit -1
}

convert_value_in_hexa()
{
  value=$1
  IP_IN_DECIMAL=`echo $value | awk -F':' '{print $1}'`
  PORT_IN_DECIMAL=`echo $value | awk -F':' '{print $2}'`

  #storing each byte of IP in an array. so that it become easy to set the IP as little-endian four-byte hexadecimal numbers.
  IP_ARRAY_IN_DECI[0]=`echo $IP_IN_DECIMAL | awk -F'.' '{print $1}'`
  IP_ARRAY_IN_DECI[1]=`echo $IP_IN_DECIMAL | awk -F'.' '{print $2}'`
  IP_ARRAY_IN_DECI[2]=`echo $IP_IN_DECIMAL | awk -F'.' '{print $3}'`
  IP_ARRAY_IN_DECI[3]=`echo $IP_IN_DECIMAL | awk -F'.' '{print $4}'`
 
  for (( i=0; i<4; i++ ))
  do
    #converting each byte of IP from decimal to hexadecimal.
    if [ $BC_AVAILABLE -eq 1 ];then 
      IP_ARRAY_IN_HEXADECI[$i]=`echo "obase=16;${IP_ARRAY_IN_DECI[$i]}"|bc`
    else
      IP_ARRAY_IN_HEXADECI[$i]=`awk -v "var1=${IP_ARRAY_IN_DECI[$i]}" 'BEGIN{printf "%X", var1}'`
    fi
    #calculating number of digits. For 192 count will be 4. For 1 count will be 2.
    count=`echo ${IP_ARRAY_IN_HEXADECI[$i]} | wc -c`
    #if count is equal to 2 i.e. single digit then converting it to two digit. Eg: If "number=1" then it will become "01".
    if [ $count -eq 2 ]; then
      IP_ARRAY_IN_HEXADECI[$i]="0""${IP_ARRAY_IN_HEXADECI[$i]}"  
    fi   
  done

  #converting port from decimal to hexadecimal.
  #Check if port is given or not
  PORT_IN_HEXADECIMAL=""
  if [ "X$PORT_IN_DECIMAL" != "X" ];then
    if [ $BC_AVAILABLE -eq 1 ];then
      PORT_IN_HEXADECIMAL=`echo "obase=16;$PORT_IN_DECIMAL"|bc`
    else
      PORT_IN_HEXADECIMAL=`awk -v "var1=$PORT_IN_DECIMAL" 'BEGIN{printf "%X", var1}'`
    fi
  fi
  #Changing port value from format (ip:x, ip:xx, ip:xxx) -> (ip:000x, ip:00xx, ip:0xxx)
  count=`echo $PORT_IN_HEXADECIMAL | wc -c`
  if [ $count -lt 5 -a $count -gt 1 ]; then
    common_port_val="0""$PORT_IN_HEXADECIMAL"
    if [ $count -eq 3 ]; then
      PORT_IN_HEXADECIMAL="0""$common_port_val"
    elif [ $count -eq 2 ]; then
      PORT_IN_HEXADECIMAL="0""0""$common_port_val"
    else 
      PORT_IN_HEXADECIMAL="$common_port_val"
    fi
  fi

#set ip:port
#IP addresses in /proc/net/
#In the files offered by the /proc/net/ directory, IP addresses are often represented as little-endian four-byte hexadecimal numbers. These are easy to convert into the more usual dotted-decimal notation.
#For example, to convert the remote address and port of line 16 of the /proc/net/tcp output shown in this column, we'd do the following:
#. Take the rem_address field:
#   0100007F:0017
#. Reverse the ordering of the bytes in the IP address part:
#   7F000001:0017
#. Let's separate the bytes of the address for readability:
#   7F 00 00 01 : 0017
#. Perform a simple hexadecimal-to-decimal conversion on each:
#   127 0 0 1 : 23

  IP_PORT_IN_HEX="${IP_ARRAY_IN_HEXADECI[3]}""${IP_ARRAY_IN_HEXADECI[2]}""${IP_ARRAY_IN_HEXADECI[1]}""${IP_ARRAY_IN_HEXADECI[0]}":"$PORT_IN_HEXADECIMAL"
}

#No need to this as we are removing file immediately
#nohup nsi_kill_child_of_monitors -p $PID -i 10 -f $PROC_FILE 2>/dev/null&
PROC_FILE=$CAV_MON_TMP_DIR/cm_tcp_queue_stats_"$MON_TEST_RUN"_"$VECTOR_NAME".inp

get_data()
{
  RX_QUEUE=0
  TX_QUEUE=0
  NUM_CONNECTIONS=0

  if [ "X$LOCAL_IP_PORT" != "X" ]; then
    #Grep only specific "column" but display whole line
    #Here, firstly we are removing spaces from start of line and then searching in second column.
    sed -n 's/^ *//;/^[^ ]* '$IP_PORT_IN_HEX'/p' $PROC_FILE_FOR_DATA >$PROC_FILE 2>/dev/null
    #Check file size. The non zero output indicate that file is empty.
    [ -s $PROC_FILE ] 
    if [ $? -ne 0 ]; then
      ns_log_event "Warning" "Local IP:port ($LOCAL_IP_PORT) is not in connected state."
      rm -f $PROC_FILE 
      return
    fi
  elif [ "X$FOREIGN_IP_PORT" != "X" ]; then
    #Here, firstly we are removing spaces from start of line and then searching in third column.
    sed -n 's/^ *//;/^[^ ]* [^ ]* '$IP_PORT_IN_HEX'/p' $PROC_FILE_FOR_DATA >$PROC_FILE 2>/dev/null
    [ -s $PROC_FILE ]
    if [ $? -ne 0 ]; then
      ns_log_event "Warning" "Foreign IP:port ($FOREIGN_IP_PORT) is not in connected state."
      rm -f $PROC_FILE 
      return
    fi
  fi

  #Creating array of tx_queue.
  TX_QUEUE_IN_HEXA=(`cat $PROC_FILE | awk -F'[ :]' '{print $(8)}'`)
  #Creating array of rx_queue.
  RX_QUEUE_IN_HEXA=(`cat $PROC_FILE | awk -F'[ :]' '{print $(9)}'`)

  rm -f $PROC_FILE 

  #Here, to calculate NUM_CONNECTIONS either we can take array TX_QUEUE_IN_HEXA or array RX_QUEUE_IN_HEXA.
  NUM_CONNECTIONS=${#TX_QUEUE_IN_HEXA[@]}
 
  for (( idx=0; idx<$NUM_CONNECTIONS; idx++ ))
  do
    #Converting Hexadecimal -> Decimal
    TX_IN_DECI[$idx]=$((0x${TX_QUEUE_IN_HEXA[$idx]}))
    #Adding all the transmit queue sizes, in case we get multiple entries in $PROC_FILE for one IP:PORT.
    TX_QUEUE=`expr $TX_QUEUE + ${TX_IN_DECI[$idx]}`

    RX_IN_DECI[$idx]=$((0x${RX_QUEUE_IN_HEXA[$idx]}))
    #Adding all the receive queue sizes, in case we get multiple entries in $PROC_FILE for one IP:PORT.
    RX_QUEUE=`expr $RX_QUEUE + ${RX_IN_DECI[$idx]}`
  done 
}

show_data()
{
  echo "$NUM_CONNECTIONS $TX_QUEUE $RX_QUEUE"
}

debug_log()
{
  if [ $DEBUG -eq 1 ];then
    echo "`date +'%F %X'`|$*" >> $DEBUG_LOG_FILE
  fi
}

error_log()
{
  ns_log_event "Major" "$*"
  echo "`date +'%F %X'`|$*" >> $ERROR_LOG_FILE
}

error_log_and_exit()
{
  ns_log_event "Major" "$*"
  echo "`date +'%F %X'`|$*" >> $ERROR_LOG_FILE
  exit -1
}

set_error_log_file()
{
  if [ "XX$CAV_MON_HOME" != "XX" ];then
    DEBUG_LOG_FILE="$CAV_MON_HOME/logs/cm_tcp_queue_stats_"$MON_TEST_RUN"_"$VECTOR_NAME"_debug.log"
    ERROR_LOG_FILE="$CAV_MON_HOME/logs/cm_tcp_queue_stats_"$MON_TEST_RUN"_"$VECTOR_NAME"_error.log"
  else
    DEBUG_LOG_FILE="/tmp/cm_tcp_queue_stats_"$MON_TEST_RUN"_"$VECTOR_NAME"_debug.log"
    ERROR_LOG_FILE="/tmp/cm_tcp_queue_stats_"$MON_TEST_RUN"_"$VECTOR_NAME"_error.log"
    error_log "CAV_MON_HOME is not exported, putting logs to /tmp/."
  fi
}

#############################################################################################

#Must set error log file in the beginning
set_error_log_file

while getopts i:l:f:D? c  2>/dev/null
do
  case $c in
    i) INTERVAL_SECS=$OPTARG;;    
    l) LOCAL_IP_PORT=$OPTARG;;
    f) FOREIGN_IP_PORT=$OPTARG;;
    D) DEBUG=1;;
    ?) Usage ;;
    *) Usage ;;
  esac
done

debug_log "TCP Queue Stats monitor started."

#checking mandatory program arguments
if [ "X$LOCAL_IP_PORT" = "X" -a "X$FOREIGN_IP_PORT" = "X" ]; then
  error_log_and_exit "Any one of them (-l or -f) is mandatory argument."
fi

if [ "X$LOCAL_IP_PORT" != "X" -a "X$FOREIGN_IP_PORT" != "X" ]; then
  error_log_and_exit "Give any one argument ( -l or -f ). Not both."
fi

# Setting PROC_FILE_FOR_DATA depending upon OS.
set_proc_file

if [ "XX$MON_OPTION" = "XX" ]; then
  MON_OPTION=2                         #Run Once
fi

if [ $MON_OPTION -ne 2 ];then     
  error_log_and_exit "Error: $0 is not configured for Run Once option."
fi

if [ ! -f $PROC_FILE_FOR_DATA ];then
  error_log_and_exit "File $PROC_FILE_FOR_DATA not found. This monitor cannot be used in this system"
fi

if [ "X$LOCAL_IP_PORT" != "X" ]; then
  convert_value_in_hexa $LOCAL_IP_PORT
elif [ "X$FOREIGN_IP_PORT" != "X" ]; then
  convert_value_in_hexa $FOREIGN_IP_PORT
fi

#Run Once 
  lib_sleep $INTERVAL_SECS                 #Because first sample comes after freq given if not given default 10 second
  while true;
  do
    isTestOver $MON_TEST_RUN
    # Test is over. So exit with success status
    if [ $? -eq 1 ]; then
      exit 0
    fi

    get_data 
    show_data

      
    lib_sleep $INTERVAL_SECS
  done

debug_log "TCP Queue Stats monitor Stops"

exit 0
