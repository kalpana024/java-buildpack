#!/bin/bash

MPHR=60    # Minutes per hour.
HPD=24     # Hours per day.
EPOC_TIME=""
INTERVAL_SECS=3600
EXPIRY_DATE=""
DNS_NAME=""

#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d $HOME/cavisson/monitors ];then
    CAV_MON_HOME=$HOME/cavisson/monitors
  else
   echo "CAV_MON_HOME is not set"
   exit -1
  fi
fi

export CAV_MON_HOME

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

set_mon_shell
#1 Hours

CURRENT_OS=`uname`

#Usage of this tool
Usage()
{
  echo "Usage:"
  echo "cm_dns_expiry -i <INTERVAL_SECS> -d <domain name>"
  echo "e.g cm_dns_expiry -i <2> -d <google.com>"
  echo "Where -i denotes interval in seconds if not given taken default 1 hour"
  echo "And -d denotes domain name this field is mandotory"
  exit -1
}

# Get diff of of 2 dates in seconds
date_diff_secs () 
{
  printf '%s' $(( $(date -u -d"$EXPIRY_DATE" +%s) - $(date -u -d"$CURRENT" +%s)))
}


#get the validity of dns 
get_dns_expiry()
{
    #get the expiry date of the DNS_NAME

# Given example of output
# e.g whois "google.com"
#
# Output----->...........................................................................
#.......................................................................................
# Domain Name: GOOGLE.COM
# Registry Domain ID: 2138514_DOMAIN_COM-VRSN
# Registrar WHOIS Server: whois.markmonitor.com
# Registrar URL: http://www.markmonitor.com
# Updated Date: 2011-07-20T16:55:31Z
# Creation Date: 1997-09-15T04:00:00Z
# Registry Expiry Date: 2020-09-14T04:00:00Z
# Registrar: MarkMonitor Inc.
# Registrar IANA ID: 292
# Registrar Abuse Contact Email: abusecomplaints@markmonitor.com
# Registrar Abuse Contact Phone: +1.2083895740
# Domain Status: clientDeleteProhibited https://icann.org/epp#clientDeleteProhibited
# Domain Status: clientTransferProhibited https://icann.org/epp#clientTransferProhibited
# Domain Status: clientUpdateProhibited https://icann.org/epp#clientUpdateProhibited
# Domain Status: serverDeleteProhibited https://icann.org/epp#serverDeleteProhibited
# Domain Status: serverTransferProhibited https://icann.org/epp#serverTransferProhibited
# Domain Status: serverUpdateProhibited https://icann.org/epp#serverUpdateProhibited
# Name Server: NS1.GOOGLE.COM
# Name Server: NS2.GOOGLE.COM
# Name Server: NS3.GOOGLE.COM
# Name Server: NS4.GOOGLE.COM
# DNSSEC: unsigned
# URL of the ICANN Whois Inaccuracy Complaint Form: https://www.icann.org/wicf/
#>>> Last update of whois database: 2017-08-02T10:00:18Z <<<
#.......................................................................................
    
   WhoIsOutput=(`whois $1 -H 2>&1`)

   #Loop through the WhoIsOutput and extract the Expiration date from array
   i=0 
   while [ $i -lt ${#WhoIsOutput[@]} ]
   do
      #if matched then store the date into EXPIRY_DATE and break the loop 
      echo ${WhoIsOutput[$i]} | egrep  -q -i "Registry" >/dev/null
      if [ $? -eq 0 ]; then
        i=`expr $i + 1`
        if [ "X${WhoIsOutput[$i]}" = "XExpiry" ]; then
          i=`expr $i + 1`
          if [ "X${WhoIsOutput[$i]}" = "XDate:" ]; then
            i=`expr $i + 1`
            EXPIRY_DATE=$(echo ${WhoIsOutput[$i]} | cut -f1 -s -d'T')
            break
          fi
        fi
      fi
      i=`expr $i + 1`
   done

   # Check if expiry date is found or not
   if [ "X$EXPIRY_DATE" == "X" ]; then
     ns_log_event "Major" "Expiry date is not present in the output of whois $1 command."
     echo "Nan"
     return
   fi

   # Check if expirty date is in correct format change into timestamp and vallidate
   EPOC_TIME=$(date -u -d"$EXPIRY_DATE" +%s)

   if [ $EPOC_TIME -le 0 ]; then
     ns_log_event "Major" "Expiry date ($Expirtdata) is not correct format in the output of whois $1 command."
     echo "Nan"
     return
   fi

   
   #current date and time in GMT format
   CURRENT=$(TZ=GMT date +"%b %d %H:%M:%S %Y %Z")

   # CHeck if command is pass or fail
   if [ $? != 0 ]; then
     ns_log_event "Major" "Error in Geting current time . Command output is $CURRENT"
     echo "Nan"
     return
   fi
   
   #calculate the total days left to expire from now 
   DAYS=$(( $(date_diff_secs) / $MPHR / $MPHR / $HPD ))
   
   echo "$DAYS"
}

#Taking DNS_NAME from user to check EXPIRY_DATE
while getopts i:d:? options
do
  case $options in
    d) DNS_NAME=$OPTARG;;
    i) INTERVAL_SECS=$OPTARG ;;
    *) Usage ;;
    ?) Usage ;;
  esac
done

#vallidate argument is present or not
if [ "X$DNS_NAME" = "X" ]; then
  echo "No argument is present please refer usage"
  Usage
fi

while :
do
  isTestOver $MON_TEST_RUN
  # Test is over. So exit with success status
  if [ $? = 1 ]; then
    exit 0
  fi

  get_dns_expiry "$DNS_NAME"
  sleep $INTERVAL_SECS
done
