# Name - cm_iostat_ex (CPU statistics)
# Purpose - This is a dynamic custom monitor to get data from iostat command
# It parses output of iostat -d -x -k 5 and outputs all data in one line
# Option - 'Run Once'
# GDF - cm_iostat_ex.gdf 
# Keyword -
# DYNAMIC_VECTOR_MONITOR 192.168.1.66 NS cm_iostat_ex.gdf 2 cm_iostat_ex -i 10 EOC cm_iostat_ex -v NS_
#
# iostat -d -x -k  10 
# Linux 2.6.35.13-92.CAV14.fc14.x86_64 05/11/2013      _x86_64_        (4 CPU)
#
# Device:  rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await  svctm  %util
# sda      5.61    44.58    6.31    8.07    93.80   209.51    42.17     0.79   55.14   2.00   2.88
# dm-0     0.00     0.00    1.22   13.77    20.01    55.09    10.02     0.67   44.44   0.58   0.87
# dm-1     0.00     0.00    3.68    2.62    14.73    10.47     8.00     1.74  275.84   1.58   1.00
# dm-2     0.00     0.00    7.08   35.99    58.95   143.95     9.42     0.52   12.00   0.47   2.01
#

#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

set_mon_shell

INTERVAL_SECS=$MON_FREQUENCY
VECTOR_FLAG="0"
PID="$$"
OS=""
IOSTAT_OUT_FILE=$CAV_MON_TMP_DIR/iostat.out$$

#Set the netstat command for Linux/AIX/SunOS
init_mon()
{
  #calling nsi_get_linux_release_ex becoz in ubuntu, uname gives Linux as output
  #./nsi_get_linux_release_ex
  #1204
  #root@UbuntuNS60:/home/netstorm/work/tools# 
  #root@UbuntuNS60:/home/netstorm/work/tools# uname
  #Linux
  #OS=`nsi_get_linux_release_ex`

  IOSTAT_CMD="iostat -d -x -k"
}

show_data()
{
  #First sample of iostat comes immediately and should be ignored as this from the start of system
  #nohup $UNIX_SHELL nsi_kill_child_of_monitors -p $PID -i 10 -f $IOSTAT_OUT_FILE 2>/dev/null&

  # Allow sometime for output to be created
  # There are three lines including header to be ingored (iostat -d -k)
  # 1. Linux 2.6.35.13-92.CAV14.fc14.x86_64 (cavisson-server)  05/11/2013      _x86_64_        (4 CPU)
  # 2.
  # 3. Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn

  SKIP_LINES=`expr ${#Vector_List[@]} + 6`

  #Note -> There is one empty line coming after output. How to exclude this
  while true
  do
    isTestOver $MON_TEST_RUN
    # Test is over. So exit with success status
    if [ $? = 1 ]; then
      exit 0
    fi

#LINUX: 12 fields
#[netstorm@cavisson-server-ns1 Controller_prachi]$ iostat -d -x -k  10 2
#Linux 2.6.35.13-92.CAV14.fc14.x86_64 (cavisson-server-ns1)   Monday 24 June 2013   _x86_64_  (4 CPU)
#
#Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util
#sda               0.07     1.75    3.66    1.60   175.05   155.87   125.81     0.27   51.15   18.29  126.40   5.32   2.80
#dm-0              0.00     0.00    1.30   34.43    21.38   137.70     8.90     1.28   35.69    0.36    1.27   2.34   1.44
#dm-1              0.00     0.00    1.20    1.46     4.82     5.85     8.00     0.77  290.48    1.99    0.53   1.54   1.65

#Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util
#sda               0.00     4.20    2.40    3.10    30.80  1046.40   391.71     0.37   68.07   44.67   86.19  21.67  11.92
#dm-0              0.00     0.00    1.30   34.43    21.38   137.70     8.90     1.28   35.69    0.36    1.27   2.34   1.44
#dm-1              0.00     0.00    1.20    1.46     4.82     5.85     8.00     0.77  290.48    1.99    0.53   1.54   1.65
#

#Here SKIP_LINES is the number of lines we need to skip for calculating data. We are not using lib_sleep $INTERVAL_SECS anymore because of the executing command. iostat -d -x -k $INTERVAL_SECS 2 is the command we are running and it will bring the second data after the INTERVAL_SECS mentioned. This command will bring boot data in its initial interval, and after that it will bring the actual data for which we are interested. 

    #Ignoring fields r_await & w_await
    if [ "X$vector_prefix" = "Xnoprefix" ]; then
      if [ $no_of_fields -eq 14 ]; then
        $IOSTAT_CMD $INTERVAL_SECS 2 | tail -n +$SKIP_LINES | $AWK_CMD '{if( NF==14 && $1 != "Device:") {printf FNR-1":"$1"|"$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "$10" "$13" "$14"\n"}}'
      else
        $IOSTAT_CMD $INTERVAL_SECS 2 | tail -n +$SKIP_LINES | $AWK_CMD '{if( NF==12 && $1 != "Device:") {printf FNR-1":"$1"|"$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "$10" "$11" "$12"\n"}}'
      fi
    else
      if [ $no_of_fields -eq 14 ]; then
        $IOSTAT_CMD $INTERVAL_SECS 2 | tail -n +$SKIP_LINES | $AWK_CMD '{if( NF==14 && $1 != "Device:") {printf FNR-1":""'"$vector_prefix"'"$1"|"$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "$10" "$13" "$14"\n"}}'
      else
        $IOSTAT_CMD $INTERVAL_SECS 2 | tail -n +$SKIP_LINES | $AWK_CMD '{if( NF==12 && $1 != "Device:") {printf FNR-1":""'"$vector_prefix"'"$1"|"$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "$10" "$11" "$12"\n"}}'
      fi
    fi

  done
}

# This will show all devices in single line
#sda dm-0 dm-1 dm-2
#
show_vectors()
{
  for((i=0;i<${#Vector_List[@]};i++))
  {
    echo -n "$i:${Vector_List[$i]} "
  }
  echo ""
}


display_help_and_exit()
{
  echo "Usage: cm_iostat_ex [-v <vector_prefix> ] or [-i <Interval in secs>]"
  echo "-v: option used to get vector list for Command. Prefix will added before these vector names"
  echo "-i: used for interval (in seconds)"
  echo "-X: used for <vector prefix/noprefix>"
  echo "-L: used for <header/data>"
  exit -1
}


#if [ "X$#" = "X0" ];then
#  display_help_and_exit
#  exit -1
#fi

while getopts i:v:X:L:? arg
do
  case $arg in
    v) VECTOR_FLAG="1"
       export vector_prefix=$OPTARG
       ;;
    X)  export vector_prefix=$OPTARG
       ;;
    L) if [ "X$OPTARG" = "Xheader" -o "X$OPTARG" = "XHEADER" ];then
         VECTOR_FLAG="1"
       fi
       ;;
    i) INTERVAL_SECS=$OPTARG
       #freq_option="1"
       echo $INTERVAL_SECS | grep '^[0-9]*$' 2>&1 >/dev/null
       if [ $? != 0 ];then
         echo "Interval is not correct. It should be numeric (> 1 secs)"
         exit -1
       fi
       ;;
    *) display_help_and_exit ;;
    ?) display_help_and_exit ;;
  esac
done

#if [ "X$VECTOR_FLAG" = "X1" -a "XX$freq_option" != "XX" ];then
#    display_help_and_exit
#fi

init_mon

no_of_fields=`iostat -d -x -k| sed '/^$/d'|$AWK_CMD 'END {if($1 != "Device:" && $1 != "" && $1 != "Linux") print NF}'`

if [ "X$vector_prefix" = "Xnoprefix" ]; then
  Vector_List=(`$IOSTAT_CMD | $AWK_CMD '{if( NF=="'"$no_of_fields"'" && $1 != "Device:") printf "%s ", $1}'|awk 'BEGIN{RS=" "} {printf $1" "}'`)
else
  Vector_List=(`$IOSTAT_CMD | $AWK_CMD '{if( NF=="'"$no_of_fields"'" && $1 != "Device:") printf "%s%s ", ENVIRON["vector_prefix"], $1}'|awk 'BEGIN{RS=" "} {printf $1" "}'`)
fi

if [ "X$vector_prefix" = "Xnoprefix" ]; then
   if [ $no_of_fields -eq 14 ]; then
     Vector_List=(`$IOSTAT_CMD | $AWK_CMD '{if( NF==14 && $1 != "Device:") printf "%s ", $1}'|awk 'BEGIN{RS=" "} {printf $1" "}'`)
   else
     Vector_List=(`$IOSTAT_CMD | $AWK_CMD '{if( NF==12 && $1 != "Device:") printf "%s ", $1}'|awk 'BEGIN{RS=" "} {printf $1" "}'`) 
   fi
else
   if [ $no_of_fields -eq 14 ]; then
     Vector_List=(`$IOSTAT_CMD | $AWK_CMD '{if( NF==14 && $1 != "Device:") printf "%s%s ", ENVIRON["vector_prefix"], $1}'|awk 'BEGIN{RS=" "} {printf $1" "}'`)
   else
     Vector_List=(`$IOSTAT_CMD | $AWK_CMD '{if( NF==12 && $1 != "Device:") printf "%s%s ", ENVIRON["vector_prefix"], $1}'|awk 'BEGIN{RS=" "} {printf $1" "}'`)
   fi
fi


if [ "X$VECTOR_FLAG" = "X1" ];then  #To get vector list from iostat command
  show_vectors
else #To get data on every specified interval
  show_data
fi


exit 0
