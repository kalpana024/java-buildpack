#!/bin/bash
#set -x
#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d $HOME/cavisson/monitors ];then
    CAV_MON_HOME=$HOME/cavisson/monitors
  else
   echo "CAV_MON_HOME is not set"
   exit -1
  fi
fi

export CAV_MON_HOME

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

set_mon_shell
INTERVAL_SECS=3600
PORT=443
CURRENT_OS=`uname`
MPHR=60    # Minutes per hour.
HPD=24     # Hours per day.

Usage()
{
  echo "Usage:"
  echo "cm_cert_expiry -f <file_location> -h <host_name> -i <interval> -p <port>"
  echo "Optional Args"
  echo " -f : CRT File location"
  echo " -i : Interval time . Default is 3600"
  echo " -p : Port number. Default is 443"
  echo "Mandatory Args"
  echo " -h : Host name"
  exit -1
}

diff()
{
   printf '%s' $(( $(date -u -d"$TARGET" +%s) - $(date -u -d"$CURRENT" +%s)))
#  %d = day of month.
}

get_cert_exp()
{
  if [ "X$FILE_PATH" = "X" ] ; then
    TARGET=$(openssl s_client -showcerts -connect $host_name:$PORT < /dev/null 2>/dev/null)
    if [ $? != 0 ] ; then
      ns_log_event "Major" "Error in running command to verify ssl certificates for host <$host_name>"
      echo "Nan"
      return
    fi
    TARGET=$(echo "$TARGET" | openssl x509 -enddate -noout | cut -d '=' -f 2)

  else
    TARGET=$(openssl s_client -showcerts -connect $host_name:$PORT -CAfile $FILE_PATH < /dev/null 2>/dev/null)
    if [ $? != 0 ] ; then
      ns_log_event "Major" "Error in running command to verify ssl certificates for host <$host_name>"
      echo "Nan"
      return
    fi
    TARGET=$(echo "$TARGET" | openssl x509 -enddate -noout | cut -d '=' -f 2)

  fi

  if [ $? != 0 ]; then
    ns_log_event "Major" "Error in running command to verify ssl certificates for host <$host_name>"
    echo "Nan"
    return
  fi

  EPOC_TIME=`date -u -d "$TARGET" +%s`

  if [ $EPOC_TIME -le 0 ]; then
    ns_log_event "Major" "Expiry date ($TARGET=) is not correct format in the output of openssl command."
    echo "Nan"
    return
  fi
  
  CURRENT=$(TZ=GMT date +"%b %d %H:%M:%S %Y %Z")
  DAYS=$(( $(diff) / $MPHR / $MPHR / $HPD ))
  echo $DAYS
}

while getopts f:i:h:p:? args
do
  case $args in
    f) FILE_PATH=$OPTARG
       ;;
    h) host_name=$OPTARG ;;
    i) INTERVAL_SECS=$OPTARG ;;
    p) PORT=$OPTARG ;;
    *) Usage ;;
    ?) Usage ;;
  esac
done

#checking if there is no argument
if [ $OPTIND -eq 1 ];then
  Usage
fi

if [ "X$host_name" = "X" ]; then
  echo " Host name is missing"
  Usage
fi

if [ -n "$FILE_PATH" ];then
  if [ ! -e $FILE_PATH ];then
    echo "File Not Exist  -f"
    Usage
  fi
fi	

while :
do
  isTestOver $MON_TEST_RUN
  #Test is over. So exit with success status
  if [ $? -eq 1 ];then
    exit 0
  fi

  get_cert_exp
  sleep $INTERVAL_SECS
done
