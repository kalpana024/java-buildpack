# Name - cm_redis_latency
# Purpose - This is a sample dynamic monitor to get "get" and "set" request time from redis-benchmark command
# It parses output of redis-benchmark command and outputs "get" and "set" time for single request in one line
# Option - 'Run Every Time'
# GDF - cm_redis_latency.gdf in netstorm machine ($NS_WDIR/samples)
#       Copy it to $NS_WDIR/sys to use this GDF file
# Keyword -
# CUSTOM_MONITOR /opt/cavisson/monitors/bin/cm_redis_latency cm_redis_latency.gdf 1
#
# redis-benchmark command and output -
#[netstorm@netstorm1 src]$ redis-benchmark -h 10.10.60.11 -p 6379  -n 100 -d 640000 -t set,get --csv
# "SET","2040.82"
# "GET","50000.00"


HOSTNAME="127.0.0.1"
PORT="6379"
PACKET_COUNT=50
PACKET_SIZE=64
REQUEST_TYPE="SET,GET"

#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d $HOME/cavisson/monitors ];then
    CAV_MON_HOME=$HOME/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

export CAV_MON_HOME

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

set_mon_shell
INTERVAL_SECS=$MON_FREQUENCY

#"PING_INLINE","50000.00"
#"PING_BULK","50000.00"
#"SET","inf"
#"GET","50000.00"
#"INCR","50000.00"
#"LPUSH","50000.00"
#"LPOP","50000.00"
#"SADD","50000.00"
#"SPOP","50000.00"
#"LPUSH (needed to benchmark LRANGE)","50000.00"
#"LRANGE_100 (first 100 elements)","4166.67"
#"LRANGE_300 (first 300 elements)","50000.00"
#"LRANGE_500 (first 450 elements)","50000.00"
#"LRANGE_600 (first 600 elements)","50000.00"
#"MSET (10 keys)","50000.00"
infinity_flag=0
VECTOR_FLAG=0
VECTOR_PREFIX=""
declare -A final_data
aflag=0
kflag=0
tflag=0
REDIS_PATH="/usr/bin/redis-benchmark"
CMD_ARGS=""

process_vector()
{
  CMD_OUTPUT=($($REDIS_PATH $CMD_ARGS|tr -d '"\| '|tr -d '(\|)' 2>/dev/null))
  i=0
  while [ $i -lt ${#CMD_OUTPUT[@]} ]
  do
    echo -n "$i:$VECTOR_PREFIX`echo ${CMD_OUTPUT[$i]} | awk -F',' '{print $1}'` "
    i=`expr $i + 1`
  done
  if [ $kflag -eq 1 ];then
    echo -n "$i:${VECTOR_PREFIX}MGET"
  fi
  echo ""
}

process_data()
{
  CMD_OUTPUT=($($REDIS_PATH $CMD_ARGS|tr -d '"\| '|tr -d '(\|)' 2>/dev/null))
  
  i=0
  if [ $kflag -eq 1 ];then 
    CMD_OUTPUT[${#CMD_OUTPUT[@]}]=`$REDIS_PATH $CMD_ARGS_FOR_MGET|tr -d '"\'|tr ' ' '_'|tr -d '(\|)'`
  fi
  while [ $i -lt ${#CMD_OUTPUT[@]} ]
  do
    vector[$i]=`echo ${CMD_OUTPUT[$i]} | awk -F',' '{print $1}'`
    data=`echo ${CMD_OUTPUT[$i]} | awk -F',' '{print $2}'`
    if [ "XX$data" == "XXinf" ];then
      final_data[${vector[$i]}]=0;
    else
      if [ $BC_AVAILABLE -eq 1 ] ; then
        final_data[${vector[$i]}]=`echo "scale=2;1000/$data" | bc`
      else
        final_data[${vector[$i]}]=`awk -v "var1=$data" 'BEGIN{printf "%.3f", (1000/var1)}'`
      fi
    fi
    i=`expr $i + 1`
  done
  i=0
  while [ $i -lt ${#vector[@]} ]
  do
    echo "$i:$VECTOR_PREFIX${vector[$i]}|${final_data[${vector[$i]}]}"
    i=`expr $i + 1`
  done
}

display_help_and_exit()
{
  echo "$1"
  echo "Usage: cm_redis_latency -h <Hostname>[Default: 127.0.0.1] -p <port>[Default: 6379] -n <No. of requests>[Default: 50] -d <packet_size>[Default: 64] -t <comma seprated request type>"
  echo "-h: Server hostname (default 127.0.0.1)"
  echo "-p: Server port (default 6379)"
  echo "-n: Total number of requests (default 50)"
  echo "-d: Data size of SET/GET value in bytes (default 64)"
  echo "-t: comma seprated request type (ex: -t set,get) [Use -k with keyes for MGET]"
  echo "-i: used for interval (in seconds)"
  echo "-b: path of redis_benchmark binary"
  echo "-k: keys to be passed with mget(ex: -k key1,key2,key3.....,key10...)"
  echo "-a: redis authentication password"
  exit -1
}

if [ "X$MON_OPTION" = "X1" ]; then
  RUN_OPTION=run_every_time
else
  RUN_OPTION=run_once
fi

while getopts i:h:p:n:t:d:X:v:a:b:k:L:? arg
do
  case $arg in
    h) HOSTNAME=$OPTARG
       ;;
    p) PORT=$OPTARG
       ;;
    n) PACKET_COUNT=$OPTARG
       ;;
    d) PACKET_SIZE=$OPTARG
       ;;
    a) PASSWORD=$OPTARG
       aflag=1
       ;;
    b) REDIS_PATH="${OPTARG}/redis-benchmark"
       ;;
    t) REQUEST_TYPE=$OPTARG
       tflag=1
       ;;
    k) KEYS=`echo $OPTARG|tr ',' ' '`
       kflag=1
       ;;
    X) if [ "XX$OPTARG" == "XXnoprefix" ];then
         VECTOR_PREFIX=""
       else
         VECTOR_PREFIX=$OPTARG
       fi
       ;;
    L) if [ "XX$OPTARG" == "XXheader" -o "XX$OPTARG" == "XXHeader" ]; then
         VECTOR_FLAG=1
       else
         VECTOR_FLAG=0
       fi
       ;;
    v) if [ "XX$OPTARG" == "XXnoprefix" ];then
         VECTOR_PREFIX=""
       else
         VECTOR_PREFIX=$OPTARG
       fi
       VECTOR_FLAG=1
       ;;
    i) INTERVAL_SECS=$OPTARG
       freq_option="1"
       echo $INTERVAL_SECS | grep '^[0-9]*$' 2>&1 >/dev/null
       if [ $? != 0 ];then
         echo "Integer expression must required with -i option!"
         exit -1
       fi
       ;;
    *) display_help_and_exit ;;
    ?) display_help_and_exit ;;
  esac
done

if [ $kflag == 1 ];then
  if [ $aflag == 1 ];then
    CMD_ARGS_FOR_MGET="-h $HOSTNAME -p $PORT -a $PASSWORD -n $PACKET_COUNT -d $PACKET_SIZE --csv MGET $KEYS"
  else
    CMD_ARGS_FOR_MGET="-h $HOSTNAME -p $PORT -n $PACKET_COUNT -d $PACKET_SIZE --csv MGET $KEYS"
  fi
fi

if [ $aflag == 1 ];then
  CMD_ARGS="-h $HOSTNAME -p $PORT -a $PASSWORD -n $PACKET_COUNT -d $PACKET_SIZE --csv"
else
  CMD_ARGS="-h $HOSTNAME -p $PORT -n $PACKET_COUNT -d $PACKET_SIZE --csv"
fi
if [ $tflag == 1 ];then
  CMD_ARGS="$CMD_ARGS -t $REQUEST_TYPE"
fi


if [ "X$RUN_OPTION" = "Xrun_every_time" ]; then
  process_data
  exit 0
else
  if [ $VECTOR_FLAG -eq 0 ];then
    while :
    do
      process_data
      sleep $INTERVAL_SECS
    done
  else
    process_vector
  fi
fi

