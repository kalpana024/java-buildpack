# --------------------------------------------------------------------
#  Name: chm_get_server_logs.bat
#  Purpose: To ftp file or directory
#  Author:abhishek sharan
#
#
#  How to use in mprof
#
#  CHECK_MONITOR STG-RBApp01 RB01 90 NA 2 NA NA NA /opt/cavisson/monitors/bin/chm_get_server_logs -f "C:\Redbox\logs\example.txt" -n KioskRB01Logs
#  CHECK_MONITOR STG-RBApp02 RB02 90 NA 2 NA NA NA /opt/cavisson/monitors/bin/chm_get_server_logs -d "C:\Redbox\logs" -n KioskRB02Logs
#  CHECK_MONITOR STG-RBApp03 RB03 90 NA 2 NA NA NA /opt/cavisson/monitors/bin/chm_get_server_logs -d "C:\Redbox\logs" -n KioskRB03Logs
#  CHECK_MONITOR STG-RBApp04 RB04 90 NA 2 NA NA NA /opt/cavisson/monitors/bin/chm_get_server_logs -d "C:\Redbox\logs" -n KioskRB04Logs
#  
#  Modification - Prachi: 7 Nov 2012 for HPUX
# --------------------------------------------------------------------

DIR=""  
FILEPATH=""
TARNAME=""
SIZE=""
WDIR=""
FILE=""
CURRENT_OS=`uname`
StartDelay=0
DEBUG=0
TAR_CMD_OUTPUT=""
TARFILESIZE=""
FILESIZE=""

#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  elif [ -d /tmp/cavisson/monitors ];then
    export CAV_MON_HOME="/tmp/cavisson/monitors"
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh 


error_log()
{
  ns_log_event "Major" "$*"
  echo "`date +"%F %X"`|$*" >> $ERROR_LOG_FILE
} 

get_file_size()
{
  if [ "X$CURRENT_OS" = "XSunOS" -o "X$CURRENT_OS" = "XAIX" ];then
    TARFILESIZE=`ls -l /tmp/$TAR_COMPRESSED_FILE_NAME|grep $TAR_COMPRESSED_FILE_NAME | awk '{print $5}'`
    if [ "X$DIR" != "X" ]; then
      FILESIZE=`ls -l $DIR|grep $DIR | awk '{print $5}'`
    else
      FILESIZE=`ls -l $FILEPATH|grep $FILEPATH | awk '{print $5}'`
    fi
  else
    TARFILESIZE=`du -b /tmp/$TAR_COMPRESSED_FILE_NAME | awk '{print $1}'`
    if [ "X$DIR" != "X" ]; then
      FILESIZE=`du -b $DIR | awk '{print $1}'`
    else
      FILESIZE=`du -b $FILEPATH | awk '{print $1}'`
    fi
  fi
}

error_log_and_exit()
{
  #Search string 'file changed as we read it' in tar output because tar command gives error 'tar: /tmp/testtar: file changed as we read it' 
  # on making tar of file which is continously updating.
  # Altough it creates the tar file but gives this error with status $? fail i.e. 1
  # In this case we need not to fail the monitor 
  echo $TAR_CMD_OUTPUT | grep "file changed as we read it" >/dev/null
  if [ "X$?" != "X0" ]; then
    error_log "$*"
    cleanup
    ns_check_mon_fail_and_exit
  else
    get_file_size
    ns_log_event "Warning" "File is updating continously during the testrun. Current File/Dir size is $FILESIZE bytes and its tar file size is $TARFILESIZE bytes."
  fi
}

debug_log()
{   
  if [ "X$DEBUG" = "X0" ]; then
    return
  else
    #echo "$*"
    echo "`date +"%F %X"`|$*" >> $DEBUG_LOG_FILE
  fi
} 

set_error_log_file()
{
  if [ "XX$CAV_MON_HOME" != "XX" ];then
    DEBUG_LOG_FILE="$CAV_MON_HOME/logs/chm_get_server_logs_"$MON_TEST_RUN"_"$VECTOR_NAME"_debug.log"
    ERROR_LOG_FILE="$CAV_MON_HOME/logs/chm_get_server_logs_"$MON_TEST_RUN"_"$VECTOR_NAME"_error.log"
  else
    DEBUG_LOG_FILE="/tmp/chm_get_server_logs_"$MON_TEST_RUN"_"$VECTOR_NAME"_debug.log"
    ERROR_LOG_FILE="/tmp/chm_get_server_logs_"$MON_TEST_RUN"_"$VECTOR_NAME"_error.log"
    error_log "CAV_MON_HOME is not exported, putting logs to /tmp/."
  fi
}

cleanup()
{
  #Removing tar
 rm -f /tmp/$TAR_COMPRESSED_FILE_NAME
}

#+++++++++++++++++Functions+++++++++++++++++
#Function create_folder_tar_as() works for both AIX and SOLRIS
create_folder_tar_as()
{
  WDIR=`dirname $DIR`
  TDIR=`basename $DIR`
  cd $WDIR
  TAR_CMD_OUTPUT=`tar -cvf - $TDIR | gzip -9 -c > /tmp/$TAR_COMPRESSED_FILE_NAME 2>&1` 
  if [ "X$?" != "X0" ]; then
    error_log_and_exit "Error in making tar of directory $TDIR" 
  fi
}

# For linux
create_folder_tar_l()
{
  WDIR=`dirname $DIR`
  TDIR=`basename $DIR`
  cd $WDIR
  TAR_CMD_OUTPUT=`tar -cvzf /tmp/$TAR_COMPRESSED_FILE_NAME $TDIR 2>&1`
  if [ "X$?" != "X0" ]; then
    error_log_and_exit "Error in making tar of directory $TDIR" 
  fi
}

# For HPUX
create_folder_tar_2()
{
  WDIR=`dirname $DIR`
  TDIR=`basename $DIR`
  cd $WDIR
  TAR_CMD_OUTPUT=`tar -cvf /tmp/$TAR_COMPRESSED_FILE_NAME $TDIR 2>&1`
  if [ "X$?" != "X0" ]; then
    error_log_and_exit "Error in making tar of directory $TDIR"
  fi
}

#Function create_file_tar_as() works for both AIX and SOLRIS

create_file_tar_as()
{ 
  WDIR=`dirname $FILEPATH`
  FILE=`basename $FILEPATH`
  cd $WDIR
  TAR_CMD_OUTPUT=`tar -cvf - $FILE | gzip -9 -c > /tmp/$TAR_COMPRESSED_FILE_NAME 2>&1`
  if [ "X$?" != "X0" ]; then
    error_log_and_exit "Error in making tar of file $FILEPATH" 
  fi
}

# For linux
create_file_tar_l()
{
  WDIR=`dirname $FILEPATH`
  FILE=`basename $FILEPATH`
  cd $WDIR
  TAR_CMD_OUTPUT=`tar -cvzf /tmp/$TAR_COMPRESSED_FILE_NAME $FILE 2>&1`
  if [ "X$?" != "X0" ]; then
    error_log_and_exit "Error in making tar of file $FILEPATH" 
  fi
}

#For HPUX
create_file_tar_2()
{
  WDIR=`dirname $FILEPATH`
  FILE=`basename $FILEPATH`
  cd $WDIR
  TAR_CMD_OUTPUT=`tar -cvf /tmp/$TAR_COMPRESSED_FILE_NAME $FILE 2>&1`
  if [ "X$?" != "X0" ]; then
    error_log_and_exit "Error in making tar of file $FILEPATH"
  fi
}

#Function get_size_ftp_tar_s() works for both AIX and SOLRIS

get_size_ftp_tar_as()
{ 
  if [ -e /tmp/$TAR_COMPRESSED_FILE_NAME ]; then
    #Solaris does not support -b option in du to get the size in bytes
    SIZE=`ls -l /tmp/$TAR_COMPRESSED_FILE_NAME|grep $TAR_COMPRESSED_FILE_NAME | awk '{print $5}'`
    echo "FTPFile:$TAR_COMPRESSED_FILE_NAME:$SIZE"
    cat /tmp/$TAR_COMPRESSED_FILE_NAME
  else
  # It should not come here
    error_log_and_exit "Tar file /tmp/$TAR_COMPRESSED_FILE_NAME is not present"
  fi
}

# For linux
get_size_ftp_tar_l()
{
  if [ -e /tmp/$TAR_COMPRESSED_FILE_NAME ]; then
    SIZE=`du -b /tmp/$TAR_COMPRESSED_FILE_NAME | awk '{print $1}'`
    echo "FTPFile:$TAR_COMPRESSED_FILE_NAME:$SIZE"
    cat /tmp/$TAR_COMPRESSED_FILE_NAME
  else
  # It should not come here
    error_log_and_exit "Tar file /tmp/$TAR_COMPRESSED_FILE_NAME is not present"
  fi
}

#ns_check_mon_pass_and_exit()
#{
#  echo "CheckMonitorStatus:Pass"
#  exit 0
#}
#
#ns_check_mon_fail_and_exit()
#{
#  echo "CheckMonitorStatus:Fail"
#  exit -1
#}

Usage()
{ 
  error_log "$*"
  error_log "Usage: chm_get_server_logs -f <file name with full path> or -d <directory path> -n <tar file name> [-S <start delay in secs] [-D <debug level>]"
  ns_check_mon_fail_and_exit
}

chk_opt()
{
  if [ "X$DIR" != "X" -a "X$FILEPATH" != "X" ]; then
    Usage "Both -f and -d cannot not used. Only -f or -d is required"
  fi

  if [ "X$DIR" = "X" -a "X$FILEPATH" = "X" ]; then
    Usage "Mandatory argument is missing. -f or -d is required"
  fi

  if [ "X$TARNAME" = "X" ]; then
    Usage "Mandatory argument is missing. -n <tar name> is required"
  fi

  if [ "X$FILEPATH" != "X" ]; then
    if [ -d  $FILEPATH ]; then
      error_log_and_exit "File $FILEPATH is a directory"
    fi
    if [ ! -f  $FILEPATH ]; then
      error_log_and_exit "File $FILEPATH is not present"
    fi
  fi

  if [ "X$DIR" != "X" ]; then
    if [ -f  $DIR ]; then
      error_log_and_exit "Directory $DIR is is a file"
    fi
    if [ ! -d  $DIR ]; then
      error_log_and_exit "Directory $DIR is not present"
    fi
  fi

}


#############################################################################################

#Must set debug/error log file in the beginning
set_error_log_file

while getopts S:d:f:n:D:? c
do
  case $c in
    #Start Delay
    S) StartDelay=$OPTARG;;
    d) DIR=$OPTARG;;
    f) FILEPATH=$OPTARG;;
    n) TARNAME=$OPTARG;;
    D) DEBUG=$OPTARG;;
    ?) Usage ;;
  esac
done

debug_log "OS Name $CURRENT_OS:"

#checking wrong option combination 
chk_opt

if [ "X$StartDelay" != "X0" ]; then
  lib_sleep $StartDelay
fi

#FUNCTION CALLS

TAR_COMPRESSED_FILE_NAME=$TARNAME.tar.gz

if [ "X$DIR" != "X" ]; then
  if [ "X$CURRENT_OS" = "XSunOS" ];then
    create_folder_tar_as
    get_size_ftp_tar_as
  elif [ "X$CURRENT_OS" = "XAIX" ];then
    create_folder_tar_as
    get_size_ftp_tar_as
  elif [ "X$CURRENT_OS" = "XHP-UX" ];then
    create_folder_tar_2
    get_size_ftp_tar_l
  else 
    create_folder_tar_l
    get_size_ftp_tar_l
  fi

elif [ "X$FILEPATH" != "X" ]; then 
  if [ "X$CURRENT_OS" = "XSunOS" ];then
    create_file_tar_as
    get_size_ftp_tar_as
  elif [ "X$CURRENT_OS" = "XAIX" ];then  
    create_file_tar_as
    get_size_ftp_tar_as
  elif [ "X$CURRENT_OS" = "XHP-UX" ];then
    create_file_tar_2
    get_size_ftp_tar_l
  else 
    create_file_tar_l
    get_size_ftp_tar_l
   fi 
else
#Should not come here
  Usage "Invalid arguments"
fi

cleanup
ns_check_mon_pass_and_exit
 
