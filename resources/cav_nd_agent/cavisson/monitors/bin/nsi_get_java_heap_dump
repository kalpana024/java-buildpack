#!  /bin/sh
# Name    : nsi_get_java_heap_dump
# Purpose : To take java heap dump
#
# Modification: 
#
#

WAIT_TIME_FOR_HEAP_DUMP=900
DEBUG=0
CMD_OUT_FILE="/tmp/nsi_get_java_heap_dump.$$"
FORCE_FLAG=0

PREV_LAST_HEAP_DUMP_START_LINE=" "
LAST_HEAP_DUMP_START_LINE=" "
LAST_HEAP_DUMP_START_LINE_NUM=0

JRCMD=$JAVA_HOME/bin/jrcmd
JMAP=$JAVA_HOME/bin/jmap
OS_NAME=`uname`
USERNAME=NA
CHECK_TIME=2
#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d $HOME/cavisson/monitors ];then
    CAV_MON_HOME=$HOME/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

export CAV_MON_HOME

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh
              

debug_log()
{
  if [ $DEBUG -eq 1 ];then
    echo "`date +'%F %X'`|$*" >>$DEBUG_LOG_FILE
  fi
}

error_log()
{
  ns_log_event "Major" "$*"
  echo "`date +'%F %X'`|$*" >>$ERROR_LOG_FILE
}

error_log_and_exit()
{
  ns_log_event "Major" "$*"
  echo "`date +'%F %X'`|$*" >>$ERROR_LOG_FILE
  exit -1
}

error_log_and_console_exit()
{
  echo "Error in getting heap dump due to following error:"
  echo "$*"
  exit -1
  #error_log "$*"
}

error_log_and_console()
{
  echo "Error in getting heap dump due to following error:"
  echo "$*"
}

set_debug_log_file()
{
  if [ "XX$CAV_MON_HOME" != "XX" ];then
    DEBUG_LOG_FILE="$CAV_MON_HOME/logs/nsi_get_java_heap_dump_debug.log"
    ERROR_LOG_FILE="$CAV_MON_HOME/logs/nsi_get_java_heap_dump_error.log"
  else
    DEBUG_LOG_FILE="/tmp/nsi_get_java_heap_dump_debug.log"
    ERROR_LOG_FILE="/tmp/nsi_get_java_heap_dump_error.log"
    debug_log "CAV_MON_HOME is not exported, putting logs to /tmp/."
  fi
}

display_help_and_exit()
{
  error_log_and_console "Incorrect usage. $*. Usage: nsi_get_java_heap_dump -p <pid> [-u <username> ] -l <log file name> [ -w <wait time in secs> -D ]"
  
  echo "  -p: option to specify the pid of the process whose heap dump is to be taken."
  echo "  -l: option to specify the log file name with full path where heap dump will be saved" 
  echo "  -u: option to specify the username."
  echo "  -w: option to specify wait time in secs for heap dump to be ready. For future use. Default is 300 seconds"
  echo "  -D: option is to enable debug."
  exit 1
}

set_ps_cmd()
{
  debug_log "set_ps_cmd() Called"
  if [ "X$OS_NAME" = "XSunOS" ]; then
    PS_CMD_FOR_DATA="/usr/bin/ps"
  else #Linux,AIX,HP-UX
    PS_CMD_FOR_DATA="ps"
  fi
}

#This function will return 1 on failure and last character on success
check_last_char()
{
  given_value=$1

  debug_log "check_last_char() Method Called, given_value = [$given_value]"

  if [ "X$given_value" = "X" ];then
    echo "NULL" 
    return 1 
  fi

  num_char=`echo "$given_value" | wc -c`
  num_char=`expr $num_char - 1`

  debug_log "num_char = $num_char"
  echo "`echo "$given_value" | cut -c $num_char`"
}

#This function will convet given data into MB or return 1 on failure
convert_into_GB()
{
  in_val=$1
  debug_log "convert_into_GB() Method Called, in_val = [$in_val]"

  last_char=`check_last_char $in_val`
  debug_log "Last char: last_char = $last_char"
  if [ "X$last_char" = "XNULL" ];then
    return 1 
  fi

  if [ "X$last_char" = "XG" -o "X$last_char" = "Xg" ];then
    in_val_without_MKG_suffix=`echo "${in_val%?}"`
    out_val=$in_val_without_MKG_suffix
  elif [ "X$last_char" = "XT" -o "X$last_char" = "Xt" ];then
     in_val_without_MKG_suffix=`echo "${in_val%?}"`
     if [ $BC_AVAILABLE -eq 1 ];then 
       out_val=`echo "scale=4; $in_val_without_MKG_suffix * 1000" |bc`     #1TB= 1000GB 
     else
       out_val=`awk -v "var1=$in_val_without_MKG_suffix" 'BEGIN{printf "%.4f", (var1 * 1000)}'`
     fi
  elif [ "X$last_char" = "XM" -o "X$last_char" = "Xm" ];then
    in_val_without_MKG_suffix=`echo "${in_val%?}"`
    if [ $BC_AVAILABLE -eq 1 ];then
      out_val=`echo "scale=4; $in_val_without_MKG_suffix / 1024" |bc`      #1MB = 1/1024 GB
    else
      out_val=`awk -v "var1=$in_val_without_MKG_suffix" 'BEGIN{printf "%.4f", (var1 / 1024)}'`
    fi
  elif [ "X$last_char" = "XK" -o "X$last_char" = "Xk" ];then
    in_val_without_MKG_suffix=`echo "${in_val%?}"`
    if [ $BC_AVAILABLE -eq 1 ];then
      out_val=`echo "scale=4; $in_val_without_MKG_suffix / 1048576" |bc`   #1KB = 1/(1024 * 1024) GB
    else
      out_val=`awk -v "var1=$in_val_without_MKG_suffix" 'BEGIN{printf "%.4f", (var1 / 1048576)}'`
    fi
  else #if in byte
    if [ $BC_AVAILABLE -eq 1 ];then
      out_val=`echo "scale=4; $in_val / 1073741824" |bc`                      #1byte = 1/(1024 * 1024 *1024)
    else
      out_val=`awk -v "var1=$in_val" 'BEGIN{printf "%.4f", (var1 / 1073741824)}'`
    fi
  fi
 
  echo $out_val
}

get_used_heap_size()
{
  debug_log "used_heap() Called." 
  debug_log "PS_CMD_FOR_DATA = $PS_CMD_FOR_DATA, PROCESS_ID = $PROCESS_ID"
  #USED_HEAP_SIZE=`$PS_CMD_FOR_DATA -p $PROCESS_ID -o 'args' | grep -v COMMAND | awk -F' ' '{print $7}' | awk -F'-Xmx' '{print $2}'`
  USED_HEAP_SIZE=`$PS_CMD_FOR_DATA -p $PROCESS_ID -o 'args' | grep -v COMMAND | awk -F'-Xmx' '{print $2}' | cut -d ' ' -f 1`

  #handling = sign in -Xmx field
  first_char=`echo $USED_HEAP_SIZE | cut -c 1`
  if [ "X$first_char" = "X=" ];then
    USED_HEAP_SIZE=`echo $USED_HEAP_SIZE | awk -F'=' '{print $2}'` 
  fi

  if [ "X$USED_HEAP_SIZE" = "X" ];then 
    #echo "For given process id $PROCESS_ID -Xmx not found." 
    USED_HEAP_SIZE=4 #DISK_SPACE_NEEDED=4
    return
  fi

  debug_log "Before convert into GB, Heap Size= [$USED_HEAP_SIZE]"
  tmp_value=$USED_HEAP_SIZE
  USED_HEAP_SIZE=`convert_into_GB $tmp_value`
  debug_log "After convert into GB, Heap Size = [$USED_HEAP_SIZE]"
}

check_disk_free()
{
  DISK_SPACE_NEEDED=4

  # Get process -Xmx6144m and what is the max heap allocation
  # -Xmx6144m or  -Xmx6g ???
  #
  #ps -o xxxxxx
  #extra
  
  set_ps_cmd
  get_used_heap_size
  debug_log "Heap Size= [$USED_HEAP_SIZE] in GB"

  #AVAILABLE_DISK_SPACE=`df -h --total $HEAP_DUMP_DIR | tail -1 | awk '{print $4}'`
  AVAILABLE_DISK_SPACE=`df -hP $HEAP_DUMP_DIR | tail -1 | awk '{print $4}'`

  debug_log "Before convert into GB, AVAILABLE_DISK_SPACE= [$AVAILABLE_DISK_SPACE]"
  tmp_value=$AVAILABLE_DISK_SPACE
  AVAILABLE_DISK_SPACE=`convert_into_GB $tmp_value`
  debug_log "After convert into GB, AVAILABLE_DISK_SPACE = [$AVAILABLE_DISK_SPACE]"

  if [ $BC_AVAILABLE -eq 1 ];then
    RET=$(echo "$USED_HEAP_SIZE > $AVAILABLE_DISK_SPACE" | bc -l)
  else
    RET=`awk -v "var1=$USED_HEAP_SIZE" -v "var2=$AVAILABLE_DISK_SPACE" 'BEGIN{ret=var1>var2;printf "%d", ret}'`
  fi

  if (( $RET ));then
    error_log_and_console_exit "Disk space available $AVAILABLE_DISK_SPACE is less than space needed $USED_HEAP_SIZE  for taking heap dump"
  fi
}

#This will take dump using JRockit Cmd jrcmd.
#Assumption is that application and cmon are using JRockit JVM
take_heap_dump_using_jrcmd()
{

  debug_log "Getting heap dump using $JRCMD $PROCESS_ID hprofdump filename=$HEAP_DUMP_LOG_FILE"

  #Run command to get thread dump. Output will come on stdout of this command
  lib_run_command_with_wait "$JRCMD $PROCESS_ID hprofdump filename=$HEAP_DUMP_LOG_FILE" $CMD_OUT_FILE $WAIT_TIME_FOR_HEAP_DUMP $CHECK_TIME 
  
  #Check if success message came from command or not
  grep "Wrote dump to" $CMD_OUT_FILE 1>/dev/null
  if [ $? != 0 ]; then
    error_log_and_console "Head dump not created"
    cat $CMD_OUT_FILE
    rm -f $CMD_OUT_FILE
    exit 1
  fi

}

heap_run_command_with_wait()
{
  LOC_RUN_CMD=$1
  LOC_RUN_CMD_FORCEFULLY=$2
  LOC_CMD_OUT_FILE=$3
  LOC_WAIT_TIME=$4
  LOC_CHECK_TIME=$5

  debug_log "Running command $LOC_RUN_CMD. Output file = $LOC_CMD_OUT_FILE, Wait Time = $LOC_WAIT_TIME, Check Time = $LOC_CHECK_TIME, LOC_RUN_CMD_FORCEFULLY = $LOC_RUN_CMD_FORCEFULLY"

  eval nohup $LOC_RUN_CMD 1>>$LOC_CMD_OUT_FILE 2>/dev/null &
  #Save exit status
  EXIT_STATUS=$?
  #Get pid of the command
  CMD_PID=$!
  #sleep 1
  #cat $LOC_CMD_OUT_FILE
  #Note - nohup exit status is based on whether is was able to run the command or not. Command exit status is not returned
  if [ $EXIT_STATUS != 0 ]; then
      error_log_and_console "Error in running command $LOC_RUN_CMD. Exit status = $EXIT_STATUS"
      cat $LOC_CMD_OUT_FILE
      rm -f $LOC_CMD_OUT_FILE
    exit $EXIT_STATUS
  fi

  LOC_TOTAL_TIME=0
  debug_log "Command started OK. Going to wait for the command to complete with wait time of $LOC_WAIT_TIME seconds"

  while [ $LOC_TOTAL_TIME -lt $LOC_WAIT_TIME ];
  do
    ps -p $CMD_PID >/dev/null 2>&1
    if [ $? != 0 ]; then
      #Wait is used to get the exit status of the command as nohup does not give this
      wait $CMD_PID
      EXIT_STATUS=$?
      if [ $EXIT_STATUS != 0 ]; then
        if [ $FORCE_FLAG -eq 1 ]; then
          error_log_and_console "Error in running command $LOC_RUN_CMD_FORCEFULLY. Exit status = $EXIT_STATUS"
          cat $LOC_CMD_OUT_FILE
          rm -f $LOC_CMD_OUT_FILE
          exit $EXIT_STATUS
        fi
        #echo "Taking heap dump forcefully using command: $LOC_RUN_CMD_FORCEFULLY"
        debug_log "Running jmap forcefully. Command is $LOC_RUN_CMD_FORCEFULLY"
        eval nohup $LOC_RUN_CMD_FORCEFULLY 1>>$LOC_CMD_OUT_FILE 2>/dev/null  &
        #Save exit status
        EXIT_STATUS=$?
        #Get pid of the command
        CMD_PID=$!
        if [ $EXIT_STATUS != 0 ]; then
          error_log_and_console "Error in running command $LOC_RUN_CMD_FORCEFULLY. Exit status = $EXIT_STATUS"
          cat $LOC_CMD_OUT_FILE
          rm -f $LOC_CMD_OUT_FILE
          exit $EXIT_STATUS
        else
          FORCE_FLAG=1
          LOC_TOTAL_TIME=0
          continue
        fi
      fi

      debug_log "Command is over with success status"
      cat $LOC_CMD_OUT_FILE
      rm -f $LOC_CMD_OUT_FILE
      break
    fi
    LOC_TOTAL_TIME=`expr $LOC_TOTAL_TIME + 1`
debug_log "Command is still running with PID $CMD_PID. Sleeping for $LOC_CHECK_TIME seconds. Total wait time so far is $LOC_TOTAL_TIME"
    sleep $LOC_CHECK_TIME
  done

  if [ $LOC_TOTAL_TIME -ge $LOC_WAIT_TIME ]; then
    #Killing hanging command
    kill -9 $CMD_PID
    error_log_and_console_exit "Error in getting output of command in maximum wait time of $LOC_WAIT_TIME seconds"
    rm -f $LOC_CMD_OUT_FILE
  fi

  debug_log "Total time taken by command to execute = $LOC_TOTAL_TIME seconds."
}

take_heap_dump_using_jmap()
{
  debug_log "Getting heap dump using $JMAP -l $PROCESS_ID"
  
  COMMON_COMMAND="-dump:live,format=b,file=$HEAP_DUMP_LOG_FILE $PROCESS_ID"

  #Run command to get heap dump. Output will come on stdout of this command
  #lib_run_command_with_wait "$JMAP -F -dump:live,format=b,file=$HEAP_DUMP_LOG_FILE $PROCESS_ID" $CMD_OUT_FILE $WAIT_TIME_FOR_HEAP_DUMP $CHECK_TIME 

  heap_run_command_with_wait "$JMAP $COMMON_COMMAND" "$JMAP -F $COMMON_COMMAND" $CMD_OUT_FILE $WAIT_TIME_FOR_HEAP_DUMP $CHECK_TIME 

  #Check if success message came from command or not
#  grep "Heap dump file created" $CMD_OUT_FILE 1>/dev/null
#  if [ $? != 0 ]; then
#    error_log_and_console "Head dump not created"
#    cat $CMD_OUT_FILE
#    rm -f $CMD_OUT_FILE
#    exit 1
#  fi
}

# this method will take pattern list 
# Pattern: lib_kill_ps_tree_by_pattern <function name> <shell name> <user_name> <process_id>
# Eg :- lib_kill_ps_tree_by_pattern <nsi_get_java_heap_dump> <nsi_get_java_heap_dump> <root> <1345>
check_and_kill_prev_hanging_cmd()
{
  lib_kill_ps_tree_by_pattern "nsi_get_java_heap_dump" "nsi_get_java_heap_dump" "\"\-u $USERNAME\"" "\"\-p $PROCESS_ID\""
}

#This method to check options if used more
check_if_p_and_s_option()
{
  if [ "X$PFLAG" = "X1" -a "X$SFLAG" = "X1" ]; then
    display_help_and_exit "nsi_get_java_heap_dump: -p can not be use with -s option."
  fi
}

###########################################################################################################################################

if [ $# -eq 0 ];then
 display_help_and_exit "Mandatory arguments are missing"
fi


#Must set debug log file in the beginning
set_debug_log_file

SEARCH_PATTERN_LIST=""
#TODO; Add more options like cm_ps_data
while getopts p:l:u:s:w:D? arg
do
  case $arg in
    p) PROCESS_ID=$OPTARG;;
    u) USERNAME="$OPTARG";;  		    #Username (Default = Self).
    w) WAIT_TIME_FOR_HEAP_DUMP="$OPTARG";;  #Wait time in secs for heap dump to be ready
    l) HEAP_DUMP_LOG_FILE="$OPTARG";;       #Log file where heap dump will be stored
    D) DEBUG=1;;
    s) SFLAG=1;
       SEARCH_PATTERN="$OPTARG";
       SEARCH_PATTERN_LIST="`echo $SEARCH_PATTERN_LIST` -s `echo $SEARCH_PATTERN`";;
    ?) display_help_and_exit "Invalid argument passed" ;;
  esac
done

check_if_p_and_s_option

if [ "X$SFLAG" = "X1" ]; then
{
  PROCESS_ID=`get_ps_arg_value $SEARCH_PATTERN_LIST -o show-pid`
  echo $PROCESS_ID | grep ' ' > /dev/null
  ret=$?
  if [ $ret = 0 ]; then
    display_help_and_exit "Multiple process id for search pattern is not allowed"
  fi      
}
fi

if [ "X$PROCESS_ID" = "X" ]; then
  if [ $SFLAG -eq 1 ];then
    display_help_and_exit "Search pattern is not running"
  else
    display_help_and_exit "Mandatory argument process id is missing"
  fi
fi

if [ "X$HEAP_DUMP_LOG_FILE" = "X" ]; then
  display_help_and_exit "Mandatory argument heap log file name is missing"
fi

HEAP_DUMP_DIR=`dirname $HEAP_DUMP_LOG_FILE`

if [ "X$HEAP_DUMP_DIR" = "X." ]; then
  if [ "X$CAV_MON_HOME" != "X" ]; then
    HEAP_DUMP_LOG_FILE="$CAV_MON_HOME/logs/heapdump/$HEAP_DUMP_LOG_FILE"
    HEAP_DUMP_DIR=`dirname $HEAP_DUMP_LOG_FILE`
  else
    echo "CAV_MON_HOME is not set. So exiting"
    exit -1
  fi
else
  echo $HEAP_DUMP_DIR | grep "^/" 2>/dev/null 1>&2
  if [ $? -ne 0 ]; then
    HEAP_DUMP_LOG_FILE="$CAV_MON_HOME/logs/heapdump/$HEAP_DUMP_LOG_FILE"
    HEAP_DUMP_DIR=`dirname $HEAP_DUMP_LOG_FILE`
  fi
fi



if [ ! -d $HEAP_DUMP_DIR ]; then
  error_log "$HEAP_DUMP_DIR does not exist. Hence creating the path."
  mkdir -p $HEAP_DUMP_DIR
fi

if [ "X$JAVA_HOME" == "X" ];then
  error_log_and_console_exit "$JAVA_HOME not set"
fi

if [ -f $JRCMD ]; then
  check_disk_free
  # Remove file as heap dump may give error file exist
  rm -f $HEAP_DUMP_LOG_FILE
  check_and_kill_prev_hanging_cmd
  take_heap_dump_using_jrcmd
elif [ -f $JMAP ]; then
  check_disk_free
  # Remove file as heap dump may give error file exist
  rm -f $HEAP_DUMP_LOG_FILE
  check_and_kill_prev_hanging_cmd
  take_heap_dump_using_jmap  

else
  error_log_and_console_exit "No java command avalable in $JAVA_HOME for taking heap dump."
fi

if [ -s $HEAP_DUMP_LOG_FILE ]; then
  echo "Heap Dump is SUCCESSFULL and saved. FILE_NAME:$HEAP_DUMP_LOG_FILE"
fi

rm -rf $CMD_OUT_FILE

exit 0
