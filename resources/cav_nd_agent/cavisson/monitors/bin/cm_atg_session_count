## Name - cm_atg_session_count
## Purpose - This is a monitor to get atg session count and global proxy count.
## Option - 'Run Once'
## GDF - cm_atg_session_count.gdf 
##
## Made By - Walgreens team for getting session counts and global proxy count of atg.
## Revised By - Maninder Singh , Made this monitor generic and added option username and password.


if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh

INTERVAL_SECS=$MON_FREQUENCY
DEBUG_LOG_FILE="/tmp/cm_atg_session_count.debug.$$"
DEBUG=0

get_data()
{

  if [ $u_flag -eq 1 ];then
    sessionCount=`curl -s -S http://${HOST_NAME}/dyn/admin/nucleus//atg/dynamo/servlet/sessiontracking/GenericSessionManager/ --user $USER:$PASSWORD | grep "propertyName=sessionCount" | egrep -o "pre'>[0-9]*<" | egrep -o [0-9]+`
    globalProxyCount=`curl -s -S http://${HOST_NAME}/dyn/admin/nucleus//atg/multisite/session/MultisiteSessionComponentProxyFactory/ --user $USER:$PASSWORD | grep "propertyName=globalProxyCount" | egrep -o "pre'>[0-9]*<" | egrep -o [0-9]+`
  else
    sessionCount=`curl -s -S http://${HOST_NAME}/dyn/admin/nucleus//atg/dynamo/servlet/sessiontracking/GenericSessionManager/ | grep "propertyName=sessionCount" | egrep -o "pre'>[0-9]*<" | egrep -o [0-9]+`
    globalProxyCount=`curl -s -S http://${HOST_NAME}/dyn/admin/nucleus//atg/multisite/session/MultisiteSessionComponentProxyFactory/ | grep "propertyName=globalProxyCount" | egrep -o "pre'>[0-9]*<" | egrep -o [0-9]+`
  fi

  if [ "X$sessionCount" == "X" -o "X$globalProxyCount" == "X" ];then
    echo "Error in running curl command"
    exit -1
  fi

  echo "$sessionCount $globalProxyCount"
}

display_help_and_exit()
{
  echo "Error: Incorrect Usage!"
  echo "Usage:"
  echo "cm_atg_session_count [-i <Interval>] [-h <Host>]"
  echo "-i: used for interval (in seconds)"
  echo "-h: used for host(Mandatory argument)"
  echo "-u: username"
  echo "-p: password"
  exit -1
}

u_flag=0

while getopts h:i:u:p:D? arg
do
  case $arg in
    h) HOST_NAME=$OPTARG
       ;;
    i) INTERVAL_SECS=$OPTARG
       echo $INTERVAL_SECS | grep '^[0-9]*$' 2>&1 >/dev/null
       if [ $? != 0 ];then
         echo "Integer expression must required with -i option!"
         exit -1
       fi
       ;;
    u) USER_NAME=$OPTARG
       u_flag=1
       ;;
    p) PASSWORD=$OPTARG
       ;;
    D) DEBUG=0;;
    *) display_help_and_exit ;;
    ?) display_help_and_exit ;;
  esac
done

if [ "X$HOST_NAME" == "X" ];then
  echo "Host name i.e. -h option is an mandatory option."
  display_help_and_exit
fi

if [ \( "X$USER_NAME" != "X" -a "X$PASSWORD" == "X" \) -o \( "X$USER_NAME" == "X" -a "X$PASSWORD" != "X" \) ];then
  echo "You need to give both Username and Password or neither of them."
  display_help_and_exit
fi

while true
 do
   # Test is over. So exit with success status
   isTestOver $MON_TEST_RUN
   if [ $? -eq 1 ]; then
     exit 0
   fi
   
   get_data
   
   lib_sleep $INTERVAL_SECS
 done
exit 0
