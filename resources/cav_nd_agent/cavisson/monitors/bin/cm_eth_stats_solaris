# Name    : cm_eth_stats_solaris
# Purpose : To Produce n(number of interfaces including loopback) Vector
#           and data of network connections of any particular machine.
# Usage   :
#  cm_eth_stats_solaris [-v] or [-i <Interval>]
#    -v: option used to get vector list of netstat -ni
#    -i: option used to get data on every specified interval
# For example:
#   cm_eth_stats_solaris -v (To get vector list eth0 eth1 lo )
#   cm_eth_stats_solaris -i 1000  (To get data after every interval of given milliseconds )
#
# Sample output for netstat -i
# Name  Mtu  Net/Dest      Address        Ipkts  Ierrs Opkts  Oerrs Collis Queue
# lo0   8232 loopback      localhost      659    0     659    0     0      0
# e1000g0 1500 Cavisson-Solaris Cavisson-Solaris 7131331 0     3836326 0     0      0
#
# Sample output of this shell with -v option
# lo0 e1000g0
#
# Sample output of this shell with -i option
#0.000 0.000 0.000 0.000 0.000 0.000
#5.000 0.000 0.000 0.000 0.000 0.000
#0.000 0.000 0.000 0.000 0.000 0.000
#4.500 0.000 7.000 0.000 0.000 0.000
#0.000 0.000 0.000 0.000 0.000 0.000
#4.500 0.000 7.000 0.000 0.000 0.000
#0.000 0.000 0.000 0.000 0.000 0.000
#7.500 0.000 7.000 0.000 0.000 0.000
#
#


#Set CAV_MON_HOME to allow testing from command line

if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh
INTERVAL_SECS=$MON_FREQUENCY

VECTOR_FLAG=""
DEVICE=""
ETH_LIST=""
NUM_FIELDS=7
DEBUG=""

display_help_and_exit()
{
  echo "Error: Incorrect Usage!"
  echo "Usage:"
  echo "cm_eth_stats [-v <vector_prefix>] or [-i <Interval>] or [-i <Interval> d <interface> ]"
  echo "   -v: option used to get vector list for Command (netstat -ni). Prefix will added before these vector names"
  echo "   -i: used for interval (in seconds)"
  echo "   -X: used for <vector prefix/noprefix>"
  echo "   -L: used for <header/data>"
  exit 1
}
#Store initial value in PRE_VAL.
init_netstat_data()
{
  PRE_VAL=(`eval $ETH_LIST`)
  NUM_PREV_VAL=${#PRE_VAL[@]}
}

#Calculate current value, take diff i.e. (current - initial).
##Make current value as previous value. then do (current - previous).
get_relative_data()
{
  CUR_VAL=(`eval $ETH_LIST`)
  NUM_CUR_VAL=${#CUR_VAL[@]}
  #Command:netstat -i
  #Output:                                               
  #Name  Mtu  Net/Dest      Address        Ipkts  Ierrs Opkts  Oerrs Collis Queue
  i=0
  index=0
  while [ $i -lt  $NUM_PREV_VAL ]
  do
    if [ "X$i" = "X$NUM_FIELDS" -o "X$i" = "X0" ]; then
       if [ "X$i" != "X0" ];then
         echo ""
       fi
       echo -n "${vector_array[$index]}|"
       index=`expr $index + 1`
    fi
    #To print interfaces name that are stored in array 
    mod=`expr $i % $NUM_FIELDS`
    #if [ "$mod" = "0" ]; then
    #  echo -n ${CUR_VAL[i]}"|"
    #else
    if [ "$mod" != "0" ]; then
      #Get relative value for Input packets, Input errs,Output packets, Output errs,Collis,Queue.
      RELATIVE_VAL=`get_relative_value ${CUR_VAL[i]} ${PRE_VAL[i]} $0 NA`
      echo $RELATIVE_VAL | $AWK_CMD -v delay=$INTERVAL_SECS '{printf("%0.3f ", ($1)/(delay))}'
    fi
    i=`expr $i + 1`
  done
  echo " "
  PRE_VAL=(${CUR_VAL[@]})
}

while getopts i:v:X:L:? arg
do
 case $arg in
    v) VECTOR_FLAG="1"
       export vector_prefix=$OPTARG
       ;;
    X) export vector_prefix=$OPTARG
       ;;
    L) if [ "X$OPTARG" = "Xheader" -o  "X$OPTARG" = "XHEADER" ];then
       VECTOR_FLAG="1"
       fi
       ;;
    i) INTERVAL_SECS=$OPTARG
       echo $INTERVAL_SECS | grep '^[0-9]*$' 2>&1 >/dev/null
       if [ $? != 0 ];then
         echo "Integer expression must required with -i option !"
         exit -1
       fi
       ;;
    *) display_help_and_exit
       ;;
    ?) display_help_and_exit
       ;;
  esac
done

ETH_LIST="netstat -i | egrep -v \"Name|^$\" | $AWK_CMD '{printf\$1 \" \" \$5 \" \" \$6 \" \" \$7 \" \" \$8 \" \" \$9 \" \" \$10 \" \"}'"

#Save intial Data
init_netstat_data

declare -a vector_array

#Calculate OS architecture in order to set value of MAX_UNSIGNED_LONG for 32 bits CPU architecture / 64 bits CPU architecture.
get_os_arch_data_model

if [ "X$vector_prefix" = "Xnoprefix" ];then
    vector_array=(`netstat -i | egrep -v "Name|^$" | $AWK_CMD '{printf FNR-1":"$1 " "}'`)
  else
    vector_array=(`netstat -i | egrep -v "Name|^$" | $AWK_CMD '{printf FNR-1":"ENVIRON["vector_prefix"]$1 " "}'`)
fi

if [ "X$VECTOR_FLAG" = "X1" ];then
  echo "${vector_array[@]}"
#this part returns data on every specified interval
else
  index=0
  while true
  do
    isTestOver $MON_TEST_RUN
    #Test is over. So exit with success status
    if [ "$?" = "1" ];then
      exit 0
    fi
    lib_sleep $INTERVAL_SECS
    get_relative_data
    if [ "$?" != "0" ];then
      echo "Error: Unable to get data from netstat !"
      exit 1
    fi
  done
fi
exit 0
