################################################################################
# Name    : cm_memcached_stats 
# Purpose : This is a sample custom monitor to get data from memcached server using command: echo "stats" |memcached
#           It parses output of curl and outputs all data in one line
# Option  : 'Run Once'
# GDF     : cm_memcached_stats.gdf in netstorm machine ($NS_WDIR/sys)
# Keyword :
#           CUSTOM_MONITOR 192.168.147.171 cm_memcached_stats.gdf Memcached_Vector 2 cm_memcached_stats -i 10 
# Date    : Tuesday, 30 Aprial 2013 
###############################################################################

#Set CAV_MON_HOME to allow testing from command line
if [ "X$CAV_MON_HOME" = "X" ]; then
  if [ -d /opt/cavisson/monitors ];then
    export CAV_MON_HOME="/opt/cavisson/monitors"
  elif [ -d ~/cavisson/monitors ];then
    export CAV_MON_HOME=~/cavisson/monitors
  else
    echo "CAV_MON_HOME is not set"
    exit -1
  fi
fi

. $CAV_MON_HOME/bin/ns_check_monitor_func.sh
INTERVAL_SECS=$MON_FREQUENCY

PID=$$
DEBUG_LOG_FILE=$CAV_MON_TMP_DIR/cm_memcached_stats_$PID.log
ERROR_LOG_FILE=$CAV_MON_TMP_DIR/cm_memcached_stats.error.log
QUICK_DEBUG_LOG_FILE=$CAV_MON_TMP_DIR/cm_memcached_stats_$PID.out
DEBUG=0
NUM_FIELD=50
NC_CMD=""
PYTHON_CMD=""
NC_AVAILABLE=0   
PYTHON_AVAILABLE=0
total_hits=0
HOST="localhost"
PORT=11211

debug_log()
{
  if [ "X$DEBUG" = "X0" ]; then
    return
  else
    #echo "Debug: $*" 
    echo "`date +'%F %X'`|$*" >> $DEBUG_LOG_FILE
  fi
}

error_log()
{
  echo "`date +'%F %X'`|$*" >> $ERROR_LOG_FILE
} 

Usage()
{
  echo "$0 [ -i <time in secs> ]"
  exit 1
}

check_nc_available_and_set_cmd()
{
  type nc 1>/dev/null 2>&1
  if [ $? -eq 0 ]; then
    NC_AVAILABLE=1     #shows nc is installed
    NC_CMD="nc $HOST $PORT"
    debug_log "nc command: $NC_CMD"
  elif [ -f $CAV_MON_HOME/bin/nsi_nc.py ];then 
    NC_AVAILABLE=0    #Shows nc is not installed
    PYTHON_AVAILABLE=1
    PYTHON_CMD="python $CAV_MON_HOME/bin/nsi_nc.py $HOST $PORT stats"
    #DATA=$(python $CAV_MON_HOME/bin/nsi_nc.py localhost $PORT stats | awk -F' ' '{print $2","$3}')
    debug_log "Python command: $PYTHON_CMD"
  else
    debug_log "Neither nc is installed nor found python shell."
    NC_AVAILABLE=0    #Shows nc is not installed
    PYTHON_AVAILABLE=0 #python shell not found
    exit 0
  fi
}


#Issue - It may be possible that the sequence of the fields may differ in OS to OS.
#To avoid the above issue we are assuming field and their positions like following
#Index - FIELD
# 0  - curr_connections                    1  - total_connections	       2  - Connections/Sec
# 3  - connection_structures               4  - cmd_get                        5  - Memcache Get Hits/Sec	
# 6  - Get Hits (Pct)                      7  - Memcache Get Miss/Sec	       8  - Get Miss (Pct)
# 9  - bytes_read                          10 - Bytes Recieved  (Kbps)         11 - bytes_written
# 12 - Bytes Sent                          13 - bytes                          14 - curr_items
# 15 - total_items                         16 - Items Added/Sec                17 - cmd_set
# 18 - cmd_flush                           19 - cmd_touch                      20 - delete_misses
# 21 - delete_hits                         22 - incr_misses                    23 - incr_hits
# 24 - decr_misses                         25 - decr_hits                      26 - cas_misses
# 27 - cas_hits                            28 - cas_badval                     29 - touch_hits
# 30 - touch_misses                        31 - auth_cmds                      32 - auth_errors
# 33 - uptime                              34 - rusage_user                    35 - rusage_system
# 36 - expired_unfetched                   37 - evicted_unfetched              38 - evictions
# 39 - reclaimed                           40 - get_hits                       41 - get_misses
fill_init_data()
{
  debug_log "fill_init_data method called, Data line = [$1]"

  FIELD=`echo $1 | awk -F',' '{print $1}'`
  FIELD_VALUE=`echo $1 | awk -F',' '{print $2}' | tr -d "\r\n" | tr -d "\r" | tr -d "\n"`
 
  debug_log "FIELD = [$FIELD], FIELD_VALUE  = [$FIELD_VALUE]"

  if [ "XX$FIELD" = "XXcurr_connections" ];then  
    INIT_DATA[0]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXtotal_connections" ];then  
    INIT_DATA[1]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXconnection_structures" ];then  
    INIT_DATA[3]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXcmd_get" ];then  
    INIT_DATA[4]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXbytes_read" ];then  
    INIT_DATA[9]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXbytes_written" ];then  
    INIT_DATA[11]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXbytes" ];then  
    INIT_DATA[13]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXcurr_items" ];then  
    INIT_DATA[14]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXtotal_items" ];then  
    INIT_DATA[15]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXcmd_set" ];then  
    INIT_DATA[17]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXcmd_flush" ];then  
    INIT_DATA[18]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXcmd_touch" ];then  
    INIT_DATA[19]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXdelete_misses" ];then  
    INIT_DATA[20]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXdelete_hits" ];then  
    INIT_DATA[21]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXincr_misses" ];then  
    INIT_DATA[22]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXincr_hits" ];then  
    INIT_DATA[23]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXdecr_misses" ];then  
    INIT_DATA[24]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXdecr_hits" ];then  
    INIT_DATA[25]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXcas_misses" ];then  
    INIT_DATA[26]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXcas_hits" ];then  
    INIT_DATA[27]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXcas_badval" ];then  
    INIT_DATA[28]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXtouch_hits" ];then  
    INIT_DATA[29]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXtouch_misses" ];then  
    INIT_DATA[30]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXauth_cmds" ];then  
    INIT_DATA[31]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXauth_errors" ];then  
    INIT_DATA[32]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXuptime" ];then  
    INIT_DATA[33]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXrusage_user" ];then  
    INIT_DATA[34]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXrusage_system" ];then  
    INIT_DATA[35]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXexpired_unfetched" ];then  
    INIT_DATA[36]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXevicted_unfetched" ];then  
    INIT_DATA[37]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXevictions" ];then  
    INIT_DATA[38]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXreclaimed" ];then  
    INIT_DATA[39]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXaccepting_conns" ];then  
    INIT_DATA[40]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXcrawler_reclaimed" ];then  
    INIT_DATA[41]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXhash_power_level" ];then  
    INIT_DATA[42]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXhash_bytes" ];then  
    INIT_DATA[43]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXhash_is_expanding" ];then  
    INIT_DATA[44]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXmalloc_fails" ];then  
    INIT_DATA[45]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXlisten_disabled_num" ];then  
    INIT_DATA[46]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXthreads" ];then  
    INIT_DATA[47]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXconn_yields" ];then  
    INIT_DATA[48]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXreserved_fds" ];then  
    INIT_DATA[49]=$FIELD_VALUE 
  elif [ "XX$FIELD" = "XXget_hits" ];then
    INIT_DATA[50]=$FIELD_VALUE
  elif [ "XX$FIELD" = "XXget_misses" ];then
    INIT_DATA[51]=$FIELD_VALUE 
  fi

  INIT_DATA[2]=0   #Connections/Sec
  INIT_DATA[5]=0   #Memcache Get Hits/Sec
  INIT_DATA[6]=0   #Get Hits (Pct)
  INIT_DATA[7]=0   #Memcache Get Miss/Sec
  INIT_DATA[8]=0   #Get Miss (Pct)
  INIT_DATA[10]=0  #Bytes Recieved  (Kbps)
  INIT_DATA[12]=0  #Bytes Sent
  INIT_DATA[16]=0  #Items Added/Sec
}

#First time it will me init data and next time it will be current data
fill_pre_data_first_time()
{
  idx=0
  
  debug_log "fill_pre_data_first_time method called"
  for array_value in ${INIT_DATA[@]} 
  do
    debug_log "idx = $idx, array_value = $array_value" 
    PRE_DATA[$idx]=$array_value    
    idx=`expr $idx + 1`
  done
}

fill_pre_data()
{
  idx=0
  
  debug_log "fill_pre_data method called,"
  for array_value in ${CUR_DATA[@]} 
  do
    debug_log "idx = $idx, array_value = $array_value" 
    PRE_DATA[$idx]=$array_value    
    idx=`expr $idx + 1`
  done
}
fill_cur_data()
{
  debug_log "fill_cur_data method called, Data line = $1"

  FIELD=`echo $1 | awk -F',' '{print $1}'`
  FIELD_VALUE=`echo $1 | awk -F',' '{print $2}' | tr -d "\r\n" |tr -d "\r" |tr -d "\n"`
 
  debug_log "FIELD = $FIELD, FIELD_VALUE  = $FIELD_VALUE"

  if [ "XX$FIELD" = "XXcurr_connections" ];then  
    CUR_DATA[0]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXtotal_connections" ];then  
    CUR_DATA[1]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXconnection_structures" ];then  
    CUR_DATA[3]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXcmd_get" ];then  
    CUR_DATA[4]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXbytes_read" ];then  
    CUR_DATA[9]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXbytes_written" ];then  
    CUR_DATA[11]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXbytes" ];then  
    CUR_DATA[13]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXcurr_items" ];then  
    CUR_DATA[14]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXtotal_items" ];then  
    CUR_DATA[15]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXcmd_set" ];then  
    CUR_DATA[17]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXcmd_flush" ];then  
    CUR_DATA[18]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXcmd_touch" ];then  
    CUR_DATA[19]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXdelete_misses" ];then  
    CUR_DATA[20]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXdelete_hits" ];then  
    CUR_DATA[21]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXincr_misses" ];then  
    CUR_DATA[22]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXincr_hits" ];then  
    CUR_DATA[23]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXdecr_misses" ];then  
    CUR_DATA[24]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXdecr_hits" ];then  
    CUR_DATA[25]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXcas_misses" ];then  
    CUR_DATA[26]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXcas_hits" ];then  
    CUR_DATA[27]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXcas_badval" ];then  
    CUR_DATA[28]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXtouch_hits" ];then  
    CUR_DATA[29]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXtouch_misses" ];then  
    CUR_DATA[30]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXauth_cmds" ];then  
    CUR_DATA[31]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXauth_errors" ];then  
    CUR_DATA[32]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXuptime" ];then  
    CUR_DATA[33]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXrusage_user" ];then  
    CUR_DATA[34]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXrusage_system" ];then  
    CUR_DATA[35]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXexpired_unfetched" ];then  
    CUR_DATA[36]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXevicted_unfetched" ];then  
    CUR_DATA[37]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXevictions" ];then  
    CUR_DATA[38]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXreclaimed" ];then  
    CUR_DATA[39]=$FIELD_VALUE  
  elif [ "XX$FIELD" = "XXaccepting_conns" ];then
    CUR_DATA[40]=$FIELD_VALUE
  elif [ "XX$FIELD" = "XXcrawler_reclaimed" ];then
    CUR_DATA[41]=$FIELD_VALUE
  elif [ "XX$FIELD" = "XXhash_power_level" ];then
    CUR_DATA[42]=$FIELD_VALUE
  elif [ "XX$FIELD" = "XXhash_bytes" ];then
    CUR_DATA[43]=$FIELD_VALUE
  elif [ "XX$FIELD" = "XXhash_is_expanding" ];then
    CUR_DATA[44]=$FIELD_VALUE
  elif [ "XX$FIELD" = "XXmalloc_fails" ];then
    CUR_DATA[45]=$FIELD_VALUE
  elif [ "XX$FIELD" = "XXlisten_disabled_num" ];then
    CUR_DATA[46]=$FIELD_VALUE
  elif [ "XX$FIELD" = "XXthreads" ];then
    CUR_DATA[47]=$FIELD_VALUE
  elif [ "XX$FIELD" = "XXconn_yields" ];then
    CUR_DATA[48]=$FIELD_VALUE
  elif [ "XX$FIELD" = "XXreserved_fds" ];then
    CUR_DATA[49]=$FIELD_VALUE
  elif [ "XX$FIELD" = "XXget_hits" ];then
    CUR_DATA[50]=$FIELD_VALUE
  elif [ "XX$FIELD" = "XXget_misses" ];then
    CUR_DATA[51]=$FIELD_VALUE
  fi

  CUR_DATA[2]=0   #Connections/Sec
  CUR_DATA[5]=0   #Memcache Get Hits/Sec
  CUR_DATA[6]=0   #Get Hits (Pct)
  CUR_DATA[7]=0   #Memcache Get Miss/Sec
  CUR_DATA[8]=0   #Get Miss (Pct)
  CUR_DATA[10]=0  #Bytes Recieved  (Kbps)
  CUR_DATA[12]=0  #Bytes Sent
  CUR_DATA[16]=0  #Items Added/Sec
}

#call only at init time
init_data()
{
  debug_log "init_netstat_data method called."  
  #DATA=$(python /home/srvstva/bin/nsi_nc.py localhost $PORT stats | awk -F' ' '{print $2","$3}')
 
  if [ $NC_AVAILABLE -eq 1 ];then
    DATA=`echo "stats" | $NC_CMD | awk -F' ' '{print $2","$3}'`
  elif [ $PYTHON_AVAILABLE -eq 1 ];then
    DATA=$($PYTHON_CMD | awk -F' ' '{print $2","$3}')
  fi
  
  debug_log "Init Data: $DATA"
  
  for data in `echo $DATA`
  do
    debug_log "data = [$data]"
    fill_init_data $data
  done

  debug_log "INIT Data:________________________________________________________________"
  debug_log "${INIT_DATA[@]}"
  echo "INIT: ${INIT_DATA[@]}" >>$QUICK_DEBUG_LOG_FILE
  debug_log "__________________________________________________________________________"

  #fill_pre_data ${INIT_DATA[@]}
  fill_pre_data_first_time

  debug_log "PRE Data:________________________________________________________________"
  debug_log "${PRE_DATA[@]}"
  echo "PRE: ${PRE_DATA[@]}" >>$QUICK_DEBUG_LOG_FILE
  debug_log "__________________________________________________________________________"
}

set_init_data()
{
  for ((i=0;i<52;i++))
  do
    INIT_DATA[$i]=0
    PRE_DATA[$i]=0
    CUR_DATA[$i]=0
  done
}

reset_init_data()
{
  INIT_DATA[0]=0    #curr_connections
  INIT_DATA[3]=0    #connection_structures
  INIT_DATA[13]=0   #bytes
  INIT_DATA[14]=0   #curr_items
#  INIT_DATA[17]=0   #cmd_set
#  INIT_DATA[18]=0   #cmd_flush
#  INIT_DATA[19]=0   #cmd_touch
  INIT_DATA[20]=0   #delete_misses
  INIT_DATA[21]=0   #delete_hits
  INIT_DATA[22]=0   #incr_misses
  INIT_DATA[23]=0   #incr_hits
  INIT_DATA[24]=0   #decr_misses
  INIT_DATA[25]=0   #decr_hits
  INIT_DATA[26]=0   #cas_misses
  INIT_DATA[27]=0   #cas_hits
  INIT_DATA[28]=0   #cas_badval
  INIT_DATA[29]=0   #touch_hits
  INIT_DATA[30]=0   #touch_misses
  INIT_DATA[31]=0   #auth_cmds
  INIT_DATA[32]=0   #auth_errors
  INIT_DATA[33]=0   #uptime
  INIT_DATA[34]=0   #rusage_user
  INIT_DATA[35]=0   #rusage_system
  INIT_DATA[36]=0   #expired_unfetched
  INIT_DATA[38]=0   #evictions
  #INIT_DATA[39]=0   #reclaimed
  INIT_DATA[40]=0   
  INIT_DATA[41]=0   
  INIT_DATA[42]=0   
  INIT_DATA[43]=0   
  INIT_DATA[44]=0   
  INIT_DATA[45]=0   
  INIT_DATA[46]=0   
  INIT_DATA[47]=0   
  INIT_DATA[48]=0   
  INIT_DATA[49]=0   
  INIT_DATA[50]=0   
  INIT_DATA[51]=0   
}

#called at every interval to get relative data w.r.t data calculated by init_netstat_data
show_relative_data()
{
  debug_log "show_relative_netstat_data method called..."
  if [ $NC_AVAILABLE -eq 1 ]; then
    CUR_DATA=`echo "stats" | $NC_CMD | awk -F' ' '{print $2","$3}'`
  elif [ $PYTHON_AVAILABLE -eq 1 ]; then
    CUR_DATA=$($PYTHON_CMD | awk -F' ' '{print $2","$3}')
  fi
  
  if [ "X$CUR_DATA" = "X" ];then
    error_log "Unable to get data, resetting  all stats to zero"
    for ((j = 0; j < $NUM_FIELD; j++))
    do
      RELATIVE_DATA[$j]=0;
    done
  fi

  for data in `echo $CUR_DATA`
  do
    debug_log "data = $data"
    fill_cur_data $data
  done

  debug_log "CUR Data:________________________________________________________________"
  debug_log "${CUR_DATA[@]}"
  echo "CUR: ${CUR_DATA[@]}" >>$QUICK_DEBUG_LOG_FILE
  debug_log "_________________________________________________________________________"

  #If data is sample then we have to reset init data
  reset_init_data 

  for ((j = 0; j < $NUM_FIELD; j++)) 
  do
    if [ $j -eq 1 -o $j -eq 9 -o $j -eq 11 -o $j -eq 15 -o $j -eq 18 -o $j -eq 19 ];then #For cumulative graphs
      RELATIVE_DATA[$j]=${CUR_DATA[$j]}
    elif [ $j -eq 2 -o $j -eq 4 -o $j -eq 5 -o $j -eq 7 -o $j -eq 10 -o $j -eq 12 -o $j -eq 17 -o $j -eq 39 ];then    # For rate Graphs
      RELATIVE_DATA[$j]=`get_relative_value ${CUR_DATA[$j]} ${PRE_DATA[$j]} cm_memcached_stats $j`
    else
      RELATIVE_DATA[$j]=`get_relative_value ${CUR_DATA[$j]} ${INIT_DATA[$j]} cm_memcached_stats $j`
    fi
    debug_log "j = $j, CUR_DATA = ${CUR_DATA[$j]}, INIT_DATA = ${INIT_DATA[$j]}, RELATIVE_DATA = ${RELATIVE_DATA[$j]}"
  done

  tmp_value=`get_relative_value ${CUR_DATA[1]} ${PRE_DATA[1]} $0 2`
  RELATIVE_DATA[2]=`expr $tmp_value / $INTERVAL_SECS`
  debug_log "idx = 2, cur=${CUR_DATA[1]}, pre=${PRE_DATA[1]}, tmp_value = $tmp_value, RELATIVE_DATA[2] = ${RELATIVE_DATA[2]}"

  #Memcache Get Hits/Sec = {cur(get_hits) - pre(get_hits)}/interval
  tmp_value1=`get_relative_value ${CUR_DATA[50]} ${PRE_DATA[50]} $0 5`
  RELATIVE_DATA[5]=`expr $tmp_value1 / $INTERVAL_SECS`
  debug_log "Get Hits/Sec: idx = 5, cur=${CUR_DATA[50]}, pre=${PRE_DATA[50]}, tmp_value = $tmp_value, RELATIVE_DATA[5] = ${RELATIVE_DATA[5]}"

  #Memcache Get Miss/Sec = {cur(get_miss) - pre(get_miss)}/interval
  tmp_value2=`get_relative_value ${CUR_DATA[51]} ${PRE_DATA[51]} $0 7`
  RELATIVE_DATA[7]=`expr $tmp_value2 / $INTERVAL_SECS`
  debug_log "Get Miss/Sec: idx = 7, cur=${CUR_DATA[51]}, pre=${PRE_DATA[51]}, tmp_value = $tmp_value, RELATIVE_DATA[7]=${RELATIVE_DATA[7]}"


  total_hits=`expr $tmp_value1 + $tmp_value2`
  debug_log "CUR_DATA[50] = ${CUR_DATA[50]}, CUR_DATA[51] = ${CUR_DATA[51]}, total_hits = $total_hits"

  #Get Hits (Pct) = {cur(get_hits)/(cur(get_hist) + cur(get_miss))} * 100
  if [ $BC_AVAILABLE -eq 1 ];then 
    if [ $total_hits -gt 0 ];then
      tmp_value=$(echo "scale=2; $tmp_value1 / $total_hits" | bc)
    else
      tmp_value=0
    fi
  else
    tmp_value=$(awk -v "var1=$tmp_value1" -v "var2=$total_hits" 'BEGIN{printf "%.2f", (var1 / var2)}')
  fi
  if [ "X$tmp_value" = "X" ];then
    tmp_value=0
  fi
  if [ $BC_AVAILABLE -eq 1 ];then
    RELATIVE_DATA[6]=`echo $tmp_value \* 100 | bc`
  else
    RELATIVE_DATA[6]=`awk -v "var1=$tmp_value" 'BEGIN{printf "%d", (var1 * 100)}'`
  fi
  debug_log "Get Hits (Pct): idx = 6, cur=${CUR_DATA[50]}, pre=${PRE_DATA[50]}, total_hits = $total_hits, tmp_value = $tmp_value, RELATIVE_DATA[6]=${RELATIVE_DATA[6]}"

  #Get Miss (Pct) = {cur(get_miss)/(cur(get_hist) + cur(get_miss))} * 100
  if [ $BC_AVAILABLE -eq 1 ];then 
    if [ $total_hits -gt 0 ];then
      tmp_value=$(echo "scale=2; $tmp_value2 / $total_hits" | bc)
    else
      tmp_value=0
    fi
  else 
    tmp_value=$(awk -v "var1=$tmp_value2" -v "var2=$total_hits" 'BEGIN{printf "%.2f", (var1 / var2)}')
  fi
  if [ "X$tmp_value" = "X" ];then
    tmp_value=0
  fi

  if [ $BC_AVAILABLE -eq 1 ];then
    RELATIVE_DATA[8]=`echo $tmp_value \* 100 | bc`
  else
    RELATIVE_DATA[8]=`awk -v "var1=$tmp_value" 'BEGIN{printf "%d", (var1 * 100)}'`
  fi
  debug_log "Get Miss (Pct): idx = 8, cur=${CUR_DATA[51]}, pre=${PRE_DATA[51]}, total_hits = $total_hits, tmp_value = $tmp_value, RELATIVE_DATA[8]=${RELATIVE_DATA[8]}"

  #Bytes Recieved  (Kbps) = [{cur(bytes_read) - pre(bytes_read)} * 8] / (1024 * interval)
  tmp_value=`get_relative_value ${CUR_DATA[9]} ${PRE_DATA[9]} $0 10`
  tmp_value1=`expr $tmp_value \* 8`    #in bites
  tmp_value=`expr $tmp_value1 / 1024`  #in KB
  debug_log "idx = 10, tmp_value = $tmp_value"
  RELATIVE_DATA[10]=`expr $tmp_value / $INTERVAL_SECS`

  #Bytes Sent  (Kbps) = [{cur(bytes_write) - pre(bytes_write)} * 8] / (1024 * interval)
  tmp_value=`get_relative_value ${CUR_DATA[11]} ${PRE_DATA[11]} $0 12`
  tmp_value1=`expr $tmp_value \* 8`    #in bites
  tmp_value=`expr $tmp_value1 / 1024`  #in KB
  debug_log "idx = 12, tmp_value = $tmp_value"
  RELATIVE_DATA[12]=`expr $tmp_value / $INTERVAL_SECS`

  #Items Added/Sec = {cur(total_items) - pre(total_items)}/interval 
  tmp_value=`get_relative_value ${CUR_DATA[15]} ${PRE_DATA[15]} $0 16`
  debug_log "idx = 16, tmp_value = $tmp_value"
  RELATIVE_DATA[16]=`expr $tmp_value / $INTERVAL_SECS`
  
  tmp_value=${RELATIVE_DATA[9]}
  RELATIVE_DATA[9]=`expr $tmp_value / 1073741824` #Converting it into GB
 
  tmp_value=${RELATIVE_DATA[11]}
  RELATIVE_DATA[11]=`expr $tmp_value / 1073741824` #Converting it into GB
 
  tmp_value=${RELATIVE_DATA[4]}
  RELATIVE_DATA[4]=`expr $tmp_value / $INTERVAL_SECS`

  tmp_value=${RELATIVE_DATA[13]}
  RELATIVE_DATA[13]=`expr $tmp_value / 1048576` #Converting it into MB

  tmp_value=${RELATIVE_DATA[17]}
  RELATIVE_DATA[17]=`expr $tmp_value / $INTERVAL_SECS`

  tmp_value=${RELATIVE_DATA[39]}
  RELATIVE_DATA[39]=`expr $tmp_value / $INTERVAL_SECS`

  tmp_value=${RELATIVE_DATA[33]}
  RELATIVE_DATA[33]=`expr $tmp_value / 86400` #Converting it into days

  #Copy This current data array into perivous data array
  fill_pre_data ${CUR_DATA[@]}

  debug_log "PRE Data:________________________________________________________________"
  debug_log "${PRE_DATA[@]}"
  echo "PRE: ${PRE_DATA[@]}" >>$QUICK_DEBUG_LOG_FILE
  debug_log "_________________________________________________________________________"

  debug_log "Relative Data:-----------------------------------------------------------"
  debug_log "${RELATIVE_DATA[@]}"
  echo "REL: ${RELATIVE_DATA[@]}" >>$QUICK_DEBUG_LOG_FILE
  echo "-------------------------------------------------" >>$QUICK_DEBUG_LOG_FILE
  debug_log "-------------------------------------------------------------------------"
  
  echo ${RELATIVE_DATA[@]}
}

convert_interval_into_secs()
{
  #changing into seconds
   if [ "$INTERVAL_SECS" -lt 1000 ];then
      INTERVAL_SECS=`expr $INTERVAL_SECS \* 1000`
   fi

  INTERVAL_SECS=`expr $INTERVAL_SECS / 1000`
}

#############################################################################################
while getopts i:h:p:d? c
do
  case $c in
    i) INTERVAL_SECS=$OPTARG     #has default 10000 msec
       convert_interval_into_secs ;;
    h) HOST=$OPTARG;;
    p) PORT=$OPTARG;;
    d) DEBUG=1 ;;   
    ?) Usage ;;
  esac
done

debug_log "Monitor Called."

set_init_data

#check and set command
check_nc_available_and_set_cmd

#Save initial data
init_data

#nohup nsi_kill_child_of_monitors -p $PID -i 10 -f "$DEBUG_LOG_FILE" 2>/dev/null&
while true;
do
    # Test is over. So exit with success status
    isTestOver $MON_TEST_RUN
    if [ $? = 1 ]; then
      exit 0
    fi

  show_relative_data
  lib_sleep $INTERVAL_SECS
done
exit 0
